"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ü–û–°–õ–ï –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞!
"""
import sqlite3
import os
import sys

def apply_migration():
    db_path = "data/trading_bot.db"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Ö–æ—Ç—è –±—ã —Ä–∞–∑!")
        return False
    
    print("=" * 60)
    print("üîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–• –ü–û–õ–ï–ô")
    print("=" * 60)
    print()
    
    try:
        conn = sqlite3.connect(db_path, timeout=30)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        cursor.execute("PRAGMA table_info(signals)")
        existing_columns = {col[1] for col in cursor.fetchall()}
        
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã: {len(existing_columns)} –ø–æ–ª–µ–π")
        print()
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
        new_fields = [
            ("context_timeframe", "ALTER TABLE signals ADD COLUMN context_timeframe VARCHAR(10)"),
            ("signal_timeframe", "ALTER TABLE signals ADD COLUMN signal_timeframe VARCHAR(10)"),
            ("confirmation_timeframe", "ALTER TABLE signals ADD COLUMN confirmation_timeframe VARCHAR(10)"),
            ("confluence_count", "ALTER TABLE signals ADD COLUMN confluence_count INTEGER DEFAULT 1"),
            ("confluence_strategies", "ALTER TABLE signals ADD COLUMN confluence_strategies TEXT"),
            ("confluence_bonus", "ALTER TABLE signals ADD COLUMN confluence_bonus FLOAT DEFAULT 0.0"),
            ("sl_type", "ALTER TABLE signals ADD COLUMN sl_type VARCHAR(30)"),
            ("sl_level", "ALTER TABLE signals ADD COLUMN sl_level FLOAT"),
            ("sl_offset", "ALTER TABLE signals ADD COLUMN sl_offset FLOAT"),
            ("tp1_type", "ALTER TABLE signals ADD COLUMN tp1_type VARCHAR(30)"),
            ("tp2_type", "ALTER TABLE signals ADD COLUMN tp2_type VARCHAR(30)"),
            ("max_favorable_excursion", "ALTER TABLE signals ADD COLUMN max_favorable_excursion FLOAT"),
            ("max_adverse_excursion", "ALTER TABLE signals ADD COLUMN max_adverse_excursion FLOAT"),
            ("bars_to_tp1", "ALTER TABLE signals ADD COLUMN bars_to_tp1 INTEGER"),
            ("bars_to_exit", "ALTER TABLE signals ADD COLUMN bars_to_exit INTEGER"),
            ("tp1_size", "ALTER TABLE signals ADD COLUMN tp1_size FLOAT DEFAULT 0.30"),
            ("tp2_size", "ALTER TABLE signals ADD COLUMN tp2_size FLOAT DEFAULT 0.40"),
            ("runner_size", "ALTER TABLE signals ADD COLUMN runner_size FLOAT DEFAULT 0.30"),
            ("tp1_pnl_percent", "ALTER TABLE signals ADD COLUMN tp1_pnl_percent FLOAT"),
            ("tp2_hit", "ALTER TABLE signals ADD COLUMN tp2_hit BOOLEAN DEFAULT 0"),
            ("tp2_closed_at", "ALTER TABLE signals ADD COLUMN tp2_closed_at DATETIME"),
            ("tp2_pnl_percent", "ALTER TABLE signals ADD COLUMN tp2_pnl_percent FLOAT"),
            ("trailing_active", "ALTER TABLE signals ADD COLUMN trailing_active BOOLEAN DEFAULT 0"),
            ("trailing_high_water_mark", "ALTER TABLE signals ADD COLUMN trailing_high_water_mark FLOAT"),
            ("runner_exit_price", "ALTER TABLE signals ADD COLUMN runner_exit_price FLOAT"),
            ("runner_pnl_percent", "ALTER TABLE signals ADD COLUMN runner_pnl_percent FLOAT"),
        ]
        
        added_count = 0
        skipped_count = 0
        
        for field_name, sql in new_fields:
            if field_name not in existing_columns:
                try:
                    cursor.execute(sql)
                    added_count += 1
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_name}")
                except sqlite3.OperationalError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {field_name}: {e}")
            else:
                skipped_count += 1
                print(f"‚è≠Ô∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {field_name}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        try:
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_regime_confidence ON signals(market_regime, confluence_count)")
            print("\n‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: idx_regime_confidence")
        except sqlite3.OperationalError as e:
            print(f"\n‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        
        conn.commit()
        conn.close()
        
        print()
        print("=" * 60)
        print(f"üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count} –ø–æ–ª–µ–π")
        print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} –ø–æ–ª–µ–π (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)")
        print("=" * 60)
        print()
        print("‚ú® –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞!")
        return True
        
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e).lower():
            print("‚ùå –û–®–ò–ë–ö–ê: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")
            print("   –°–Ω–∞—á–∞–ª–∞ –û–°–¢–ê–ù–û–í–ò–¢–ï –±–æ—Ç–∞, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –û–°–¢–ê–ù–û–í–ò–¢–ï –±–æ—Ç–∞!")
    print("   (–ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C)")
    print()
    
    input("–ù–∞–∂–º–∏—Ç–µ ENTER –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞... ")
    
    success = apply_migration()
    
    print()
    input("–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –≤—ã—Ö–æ–¥–∞... ")
    
    sys.exit(0 if success else 1)
