//@version=5
indicator("EMA200 Body Cross Strategy", overlay=true, max_labels_count=500, max_lines_count=500)

// ==================== ПАРАМЕТРЫ ====================

// EMA параметры
ema5_len = input.int(5, "EMA 5", group="EMA Settings")
ema9_len = input.int(9, "EMA 9", group="EMA Settings")
ema13_len = input.int(13, "EMA 13", group="EMA Settings")
ema21_len = input.int(21, "EMA 21", group="EMA Settings")
ema200_len = input.int(200, "EMA 200", group="EMA Settings")

// ATR параметры
atr_len = input.int(14, "ATR Length", group="ATR Settings")
atr_mult = input.float(1.5, "ATR Multiplier (для полос)", step=0.1, group="ATR Settings")

// Мягкие требования
min_confirm_depth = input.float(0.25, "Min Confirm Depth (×ATR)", step=0.05, group="Soft Requirements")
min_atr_edge_dist = input.float(0.35, "Min Distance to ATR Edge (×ATR)", step=0.05, group="Soft Requirements")
max_entry_distance = input.float(0.9, "Max Entry Distance from EMA200 (×ATR)", step=0.1, group="Soft Requirements")

// Усилители скоринга
strong_bar_body = input.float(0.6, "Strong Bar Body (×ATR)", step=0.05, group="Score Boosters")
strong_bar_close = input.float(0.35, "Strong Bar Close Distance (×ATR)", step=0.05, group="Score Boosters")
good_atr_reserve = input.float(0.5, "Good ATR Reserve (×ATR)", step=0.05, group="Score Boosters")

// Swing параметры
swing_len = input.int(20, "Swing Length", group="Swing Settings")

// Take Profit
show_tp = input.bool(true, "Show TP Levels", group="Display")
tp1_rr = input.float(1.0, "TP1 R:R", step=0.1, group="Take Profit")
tp2_rr = input.float(2.0, "TP2 R:R", step=0.1, group="Take Profit")

// Score Threshold
score_threshold = input.int(2, "Min Score for Standard Entry", group="Decision")

// ==================== ИНДИКАТОРЫ ====================

// EMA расчёты
ema5 = ta.ema(close, ema5_len)
ema9 = ta.ema(close, ema9_len)
ema13 = ta.ema(close, ema13_len)
ema21 = ta.ema(close, ema21_len)
ema200 = ta.ema(close, ema200_len)

// ATR
atr = ta.atr(atr_len)

// ATR полосы (от EMA200)
atr_upper = ema200 + atr * atr_mult
atr_lower = ema200 - atr * atr_mult

// Swing High/Low
swing_high = ta.highest(high, swing_len)
swing_low = ta.lowest(low, swing_len)

// ==================== ВИЗУАЛИЗАЦИЯ EMA И ATR ====================

plot(ema200, "EMA 200", color=color.yellow, linewidth=3)
plot(ema5, "EMA 5", color=color.new(color.aqua, 50), linewidth=1)
plot(ema9, "EMA 9", color=color.new(color.aqua, 60), linewidth=1)
plot(ema13, "EMA 13", color=color.new(color.aqua, 70), linewidth=1)
plot(ema21, "EMA 21", color=color.new(color.aqua, 80), linewidth=1)

plot(atr_upper, "ATR Upper", color=color.new(color.red, 70), style=plot.style_circles, linewidth=1)
plot(atr_lower, "ATR Lower", color=color.new(color.green, 70), style=plot.style_circles, linewidth=1)

// ==================== БАЗОВАЯ ЛОГИКА BODY CROSS ====================

// Свеча-инициатор (2 свечи назад = [2])
// Подтверждающая свеча (1 свеча назад = [1])

// LONG: Инициатор пересекает EMA200 телом снизу вверх
initiator_long = close[2] > ema200[2] and open[2] < ema200[2] and math.min(close[2], open[2]) < ema200[2]

// Подтверждение LONG: закрывается выше EMA200 и не касается
confirm_long = close[1] > ema200[1] and low[1] > ema200[1]

// SHORT: Инициатор пересекает EMA200 телом сверху вниз
initiator_short = close[2] < ema200[2] and open[2] > ema200[2] and math.max(close[2], open[2]) > ema200[2]

// Подтверждение SHORT: закрывается ниже EMA200 и не касается
confirm_short = close[1] < ema200[1] and high[1] < ema200[1]

// ==================== МЯГКИЕ ТРЕБОВАНИЯ ====================

// 1. Глубина подтверждения от EMA200
depth_long = math.abs(close[1] - ema200[1])
depth_short = math.abs(close[1] - ema200[1])

req_depth_long = depth_long >= min_confirm_depth * atr[1]
req_depth_short = depth_short >= min_confirm_depth * atr[1]

// 2. Расстояние до внешней ATR полосы
dist_to_upper = math.abs(close[1] - atr_upper[1])
dist_to_lower = math.abs(close[1] - atr_lower[1])

req_edge_long = dist_to_upper >= min_atr_edge_dist * atr[1]
req_edge_short = dist_to_lower >= min_atr_edge_dist * atr[1]

// 3. Удаление от EMA200 не слишком большое
entry_dist_long = math.abs(close[1] - ema200[1])
entry_dist_short = math.abs(close[1] - ema200[1])

req_distance_long = entry_dist_long <= max_entry_distance * atr[1]
req_distance_short = entry_dist_short <= max_entry_distance * atr[1]

// ==================== СИСТЕМА СКОРИНГА ====================

// --- УСИЛИТЕЛИ (+1) ---

// 1. Наклон EMA200 в сторону входа
ema200_slope = ema200 - ema200[5]
slope_long = ema200_slope > 0 ? 1 : (ema200_slope < 0 ? -1 : 0)
slope_short = ema200_slope < 0 ? 1 : (ema200_slope > 0 ? -1 : 0)

// 2. Веер ленты EMA (5<9<13<21 для LONG, обратно для SHORT)
fan_long = ema5[1] > ema9[1] and ema9[1] > ema13[1] and ema13[1] > ema21[1] ? 1 : 0
fan_short = ema5[1] < ema9[1] and ema9[1] < ema13[1] and ema13[1] < ema21[1] ? 1 : 0

// 3. Запас до внешней ATR полосы ≥0.5×ATR
reserve_long = dist_to_upper >= good_atr_reserve * atr[1] ? 1 : 0
reserve_short = dist_to_lower >= good_atr_reserve * atr[1] ? 1 : 0

// 4. Подтверждающий бар сильный (тело ≥0.6×ATR и close ≥0.35×ATR от EMA200)
body_confirm = math.abs(close[1] - open[1])
strong_body = body_confirm >= strong_bar_body * atr[1]
strong_close_long = depth_long >= strong_bar_close * atr[1]
strong_close_short = depth_short >= strong_bar_close * atr[1]

strong_bar_long = strong_body and strong_close_long ? 1 : 0
strong_bar_short = strong_body and strong_close_short ? 1 : 0

// 5. Пробой swing high/low
swing_break_long = close[1] > swing_high[2] ? 1 : 0
swing_break_short = close[1] < swing_low[2] ? 1 : 0

// 6. Retest к EMA13/21 (HL для лонга, LH для шорта)
// Упрощённая проверка: была касание EMA13/21 в последних 3 барах с удержанием
retest_long = 0
retest_short = 0

for i = 0 to 2
    if low[i] <= ema13[i] and close[i] > ema13[i]
        retest_long := 1
    if low[i] <= ema21[i] and close[i] > ema21[i]
        retest_long := 1
    if high[i] >= ema13[i] and close[i] < ema13[i]
        retest_short := 1
    if high[i] >= ema21[i] and close[i] < ema21[i]
        retest_short := 1

// --- ШТРАФЫ (-1) ---

// 1. Pre-touch (бар перед инициатором касался EMA200)
pre_touch_long = low[3] <= ema200[3] and high[3] >= ema200[3] ? -1 : 0
pre_touch_short = low[3] <= ema200[3] and high[3] >= ema200[3] ? -1 : 0

// 2. Подтверждение противоположного цвета и close в неправильной части
confirm_red = close[1] < open[1]
confirm_green = close[1] > open[1]
confirm_range = high[1] - low[1]

wrong_color_long = confirm_red and (close[1] - low[1]) / confirm_range < 0.4 ? -1 : 0
wrong_color_short = confirm_green and (high[1] - close[1]) / confirm_range < 0.4 ? -1 : 0

// 3. Длинная тень инициатора против входа >0.6×ATR
upper_wick_init = high[2] - math.max(close[2], open[2])
lower_wick_init = math.min(close[2], open[2]) - low[2]

long_wick_long = upper_wick_init > 0.6 * atr[2] ? -1 : 0
long_wick_short = lower_wick_init > 0.6 * atr[2] ? -1 : 0

// 4. Вход у внешней ATR полосы
edge_penalty_long = dist_to_upper < min_atr_edge_dist * atr[1] ? -1 : 0
edge_penalty_short = dist_to_lower < min_atr_edge_dist * atr[1] ? -1 : 0

// --- ИТОГОВЫЙ SCORE ---

score_long = slope_long + fan_long + reserve_long + strong_bar_long + swing_break_long + retest_long + 
             pre_touch_long + wrong_color_long + long_wick_long + edge_penalty_long

score_short = slope_short + fan_short + reserve_short + strong_bar_short + swing_break_short + retest_short + 
              pre_touch_short + wrong_color_short + long_wick_short + edge_penalty_short

// ==================== ФИНАЛЬНЫЕ СИГНАЛЫ ====================

signal_long = initiator_long and confirm_long and req_depth_long and req_edge_long and req_distance_long
signal_short = initiator_short and confirm_short and req_depth_short and req_edge_short and req_distance_short

// Режим входа по скору
entry_mode_long = score_long >= score_threshold ? "STANDARD" : (score_long >= 0 ? "SCALP" : "SKIP")
entry_mode_short = score_short >= score_threshold ? "STANDARD" : (score_short >= 0 ? "SCALP" : "SKIP")

// ==================== РАСЧЁТ SL И TP ====================

// Stop Loss за EMA200 с небольшим буфером (0.1×ATR)
sl_buffer = 0.1 * atr[1]
sl_long = ema200[1] - sl_buffer
sl_short = ema200[1] + sl_buffer

// Entry = close подтверждающей свечи
entry_long = close[1]
entry_short = close[1]

// Risk (R) = расстояние от entry до SL
risk_long = entry_long - sl_long
risk_short = sl_short - entry_short

// Take Profit
tp1_long = entry_long + risk_long * tp1_rr
tp2_long = entry_long + risk_long * tp2_rr

tp1_short = entry_short - risk_short * tp1_rr
tp2_short = entry_short - risk_short * tp2_rr

// ==================== ВИЗУАЛИЗАЦИЯ СИГНАЛОВ ====================

// Цвет по качеству
color_long = score_long >= score_threshold ? color.new(color.lime, 0) : 
             (score_long >= 0 ? color.new(color.yellow, 0) : color.new(color.gray, 50))

color_short = score_short >= score_threshold ? color.new(color.red, 0) : 
              (score_short >= 0 ? color.new(color.orange, 0) : color.new(color.gray, 50))

// Стрелки
plotshape(signal_long and score_long >= 0, "LONG", shape.triangleup, location.belowbar, 
          color_long, size=size.normal)
plotshape(signal_short and score_short >= 0, "SHORT", shape.triangledown, location.abovebar, 
          color_short, size=size.normal)

// Labels со скором и режимом
if signal_long and score_long >= 0
    label_text = "LONG\nScore: " + str.tostring(score_long) + "\n" + entry_mode_long
    label.new(bar_index[1], low[1], label_text, 
              color=color_long, textcolor=color.white, 
              style=label.style_label_up, size=size.small)

if signal_short and score_short >= 0
    label_text = "SHORT\nScore: " + str.tostring(score_short) + "\n" + entry_mode_short
    label.new(bar_index[1], high[1], label_text, 
              color=color_short, textcolor=color.white, 
              style=label.style_label_down, size=size.small)

// ==================== TP LEVELS ====================

if show_tp and signal_long and score_long >= 0
    // Entry level
    line.new(bar_index[1], entry_long, bar_index, entry_long, 
             color=color.new(color.blue, 50), width=1, style=line.style_dashed)
    
    // TP1
    line.new(bar_index[1], tp1_long, bar_index, tp1_long, 
             color=color.new(color.lime, 30), width=2, style=line.style_solid)
    label.new(bar_index, tp1_long, "TP1", color=color.new(color.lime, 70), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // TP2 только для STANDARD
    if entry_mode_long == "STANDARD"
        line.new(bar_index[1], tp2_long, bar_index, tp2_long, 
                 color=color.new(color.lime, 30), width=2, style=line.style_solid)
        label.new(bar_index, tp2_long, "TP2", color=color.new(color.lime, 70), 
                  textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // SL
    line.new(bar_index[1], sl_long, bar_index, sl_long, 
             color=color.new(color.red, 30), width=2, style=line.style_solid)
    label.new(bar_index, sl_long, "SL", color=color.new(color.red, 70), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)

if show_tp and signal_short and score_short >= 0
    // Entry level
    line.new(bar_index[1], entry_short, bar_index, entry_short, 
             color=color.new(color.blue, 50), width=1, style=line.style_dashed)
    
    // TP1
    line.new(bar_index[1], tp1_short, bar_index, tp1_short, 
             color=color.new(color.red, 30), width=2, style=line.style_solid)
    label.new(bar_index, tp1_short, "TP1", color=color.new(color.red, 70), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // TP2 только для STANDARD
    if entry_mode_short == "STANDARD"
        line.new(bar_index[1], tp2_short, bar_index, tp2_short, 
                 color=color.new(color.red, 30), width=2, style=line.style_solid)
        label.new(bar_index, tp2_short, "TP2", color=color.new(color.red, 70), 
                  textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // SL
    line.new(bar_index[1], sl_short, bar_index, sl_short, 
             color=color.new(color.lime, 30), width=2, style=line.style_solid)
    label.new(bar_index, sl_short, "SL", color=color.new(color.lime, 70), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)

// ==================== АЛЕРТЫ ====================

alertcondition(signal_long and score_long >= score_threshold, "LONG Standard Entry", 
               "EMA200 Body Cross LONG - Standard Entry (Score: {{plot_0}})")
alertcondition(signal_long and score_long >= 0 and score_long < score_threshold, "LONG Scalp Entry", 
               "EMA200 Body Cross LONG - Scalp Only (Score: {{plot_0}})")

alertcondition(signal_short and score_short >= score_threshold, "SHORT Standard Entry", 
               "EMA200 Body Cross SHORT - Standard Entry (Score: {{plot_0}})")
alertcondition(signal_short and score_short >= 0 and score_short < score_threshold, "SHORT Scalp Entry", 
               "EMA200 Body Cross SHORT - Scalp Only (Score: {{plot_0}})")

// ==================== TABLE С СТАТИСТИКОЙ ====================

var table stats_table = table.new(position.top_right, 2, 8, border_width=1)

if barstate.islast
    table.cell(stats_table, 0, 0, "Parameter", bgcolor=color.new(color.gray, 70), text_color=color.white)
    table.cell(stats_table, 1, 0, "Value", bgcolor=color.new(color.gray, 70), text_color=color.white)
    
    table.cell(stats_table, 0, 1, "EMA200 Slope")
    table.cell(stats_table, 1, 1, ema200_slope > 0 ? "UP ↑" : (ema200_slope < 0 ? "DOWN ↓" : "FLAT →"), 
               text_color=ema200_slope > 0 ? color.lime : (ema200_slope < 0 ? color.red : color.gray))
    
    table.cell(stats_table, 0, 2, "EMA Fan")
    table.cell(stats_table, 1, 2, fan_long == 1 ? "BULLISH ↑" : (fan_short == 1 ? "BEARISH ↓" : "NEUTRAL"))
    
    table.cell(stats_table, 0, 3, "ATR Value")
    table.cell(stats_table, 1, 3, str.tostring(atr, "#.##"))
    
    table.cell(stats_table, 0, 4, "Distance to EMA200")
    table.cell(stats_table, 1, 4, str.tostring(math.abs(close - ema200), "#.##"))
    
    table.cell(stats_table, 0, 5, "ATR Upper Band")
    table.cell(stats_table, 1, 5, str.tostring(atr_upper, "#.##"))
    
    table.cell(stats_table, 0, 6, "ATR Lower Band")
    table.cell(stats_table, 1, 6, str.tostring(atr_lower, "#.##"))
    
    table.cell(stats_table, 0, 7, "Swing High/Low")
    table.cell(stats_table, 1, 7, "H:" + str.tostring(swing_high, "#.##") + " L:" + str.tostring(swing_low, "#.##"), 
               text_size=size.tiny)
