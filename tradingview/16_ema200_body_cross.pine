//@version=5
indicator("EMA200 Body Cross Strategy", overlay=true, max_labels_count=500, max_lines_count=500)

// ==================== ПАРАМЕТРЫ ====================

// EMA параметры
ema5_len = input.int(5, "EMA 5", group="EMA Settings")
ema9_len = input.int(9, "EMA 9", group="EMA Settings")
ema13_len = input.int(13, "EMA 13", group="EMA Settings")
ema21_len = input.int(21, "EMA 21", group="EMA Settings")
ema200_len = input.int(200, "EMA 200", group="EMA Settings")

// ATR параметры
atr_len = input.int(14, "ATR Length", group="ATR Settings")
atr_mult = input.float(1.5, "ATR Multiplier (для полос)", step=0.1, group="ATR Settings")

// Мягкие требования
min_confirm_depth = input.float(0.25, "Min Confirm Depth (×ATR)", step=0.05, group="Soft Requirements")
min_atr_edge_dist = input.float(0.35, "Min Distance to ATR Edge (×ATR)", step=0.05, group="Soft Requirements")
max_entry_distance = input.float(0.9, "Max Entry Distance from EMA200 (×ATR)", step=0.1, group="Soft Requirements")

// Усилители скоринга
strong_bar_body = input.float(0.6, "Strong Bar Body (×ATR)", step=0.05, group="Score Boosters")
strong_bar_close = input.float(0.35, "Strong Bar Close Distance (×ATR)", step=0.05, group="Score Boosters")
good_atr_reserve = input.float(0.5, "Good ATR Reserve (×ATR)", step=0.05, group="Score Boosters")

// Swing параметры
swing_len = input.int(20, "Swing Length", group="Swing Settings")

// Take Profit
show_tp = input.bool(true, "Show TP Levels", group="Display")
tp1_rr = input.float(1.0, "TP1 R:R", step=0.1, group="Take Profit")
tp2_rr = input.float(2.0, "TP2 R:R", step=0.1, group="Take Profit")

// Score Threshold
score_threshold = input.int(2, "Min Score for Standard Entry", group="Decision")

// ==================== ИНДИКАТОРЫ ====================

// EMA расчёты
ema5 = ta.ema(close, ema5_len)
ema9 = ta.ema(close, ema9_len)
ema13 = ta.ema(close, ema13_len)
ema21 = ta.ema(close, ema21_len)
ema200 = ta.ema(close, ema200_len)

// ATR
atr = ta.atr(atr_len)

// ATR полосы (от EMA200)
atr_upper = ema200 + atr * atr_mult
atr_lower = ema200 - atr * atr_mult

// Swing High/Low
swing_high = ta.highest(high, swing_len)
swing_low = ta.lowest(low, swing_len)

// ==================== ВИЗУАЛИЗАЦИЯ EMA И ATR ====================

plot(ema200, "EMA 200", color=color.yellow, linewidth=3)
plot(ema5, "EMA 5", color=color.new(color.aqua, 50), linewidth=1)
plot(ema9, "EMA 9", color=color.new(color.aqua, 60), linewidth=1)
plot(ema13, "EMA 13", color=color.new(color.aqua, 70), linewidth=1)
plot(ema21, "EMA 21", color=color.new(color.aqua, 80), linewidth=1)

plot(atr_upper, "ATR Upper", color=color.new(color.red, 70), style=plot.style_circles, linewidth=1)
plot(atr_lower, "ATR Lower", color=color.new(color.green, 70), style=plot.style_circles, linewidth=1)

// ==================== БАЗОВАЯ ЛОГИКА BODY CROSS ====================

// Свеча-инициатор (2 свечи назад = [2])
// Подтверждающая свеча (1 свеча назад = [1])

// LONG: Инициатор пересекает EMA200 телом снизу вверх
initiator_long = close[2] > ema200[2] and open[2] < ema200[2] and math.min(close[2], open[2]) < ema200[2]

// Подтверждение LONG: закрывается выше EMA200 и не касается
confirm_long = close[1] > ema200[1] and low[1] > ema200[1]

// SHORT: Инициатор пересекает EMA200 телом сверху вниз
initiator_short = close[2] < ema200[2] and open[2] > ema200[2] and math.max(close[2], open[2]) > ema200[2]

// Подтверждение SHORT: закрывается ниже EMA200 и не касается
confirm_short = close[1] < ema200[1] and high[1] < ema200[1]

// ==================== ПРОФЕССИОНАЛЬНЫЕ ФИЛЬТРЫ ====================

// 1. НАКЛОН EMA200 (фильтр рейнджа)
slope200 = ema200 - ema200[10]
slope200_threshold = 0.2 * atr[1]

slope_trending_long = slope200 >= slope200_threshold
slope_trending_short = slope200 <= -slope200_threshold

// 2. ПОДТВЕРЖДЕНИЕ - ЦВЕТ И ГЛУБИНА
confirm_color_long = close[1] > open[1]  // зелёный бар
confirm_color_short = close[1] < open[1]  // красный бар

depth_long = close[1] - ema200[1]
depth_short = ema200[1] - close[1]

depth_standard_long = depth_long >= 0.35 * atr[1]
depth_standard_short = depth_short >= 0.35 * atr[1]

depth_scalp_long = depth_long >= 0.25 * atr[1]
depth_scalp_short = depth_short >= 0.25 * atr[1]

// 3. НЕ У КРАЯ ATR-КАНАЛА
gap_to_upper = atr_upper[1] - close[1]
gap_to_lower = close[1] - atr_lower[1]

gap_standard_long = gap_to_upper >= 0.45 * atr[1]
gap_standard_short = gap_to_lower >= 0.45 * atr[1]

gap_scalp_long = gap_to_upper >= 0.35 * atr[1]
gap_scalp_short = gap_to_lower >= 0.35 * atr[1]

// 4. РАЗМЕР ИНИЦИАТОРА (анти-перерастяжка)
initiator_body = math.abs(close[2] - open[2])
oversized_initiator_long = initiator_body > 1.2 * atr[2] and depth_long < 0.35 * atr[1]
oversized_initiator_short = initiator_body > 1.2 * atr[2] and depth_short < 0.35 * atr[1]

// 5. PRE-TOUCH (липучка к EMA200)
pre_touch_long = (low[3] <= ema200[3] * 1.001 and low[3] > ema200[3] * 0.999) or (low[4] <= ema200[4] * 1.001 and low[4] > ema200[4] * 0.999)
pre_touch_short = (high[3] >= ema200[3] * 0.999 and high[3] < ema200[3] * 1.001) or (high[4] >= ema200[4] * 0.999 and high[4] < ema200[4] * 1.001)

depth_pretouch_long = depth_long >= 0.45 * atr[1]
depth_pretouch_short = depth_short >= 0.45 * atr[1]

// 6. ЛЕНТА EMA (веер)
fan_ordered_long = ema5[1] > ema9[1] and ema9[1] > ema13[1] and ema13[1] > ema21[1]
fan_ordered_short = ema5[1] < ema9[1] and ema9[1] < ema13[1] and ema13[1] < ema21[1]

fan_forming_long = ema5 > ema9 and ema9 > ema13 and ema13 > ema21
fan_forming_short = ema5 < ema9 and ema9 < ema13 and ema13 < ema21

swing_break_long = close[1] > swing_high[2]
swing_break_short = close[1] < swing_low[2]

fan_ready_long = (fan_ordered_long or (fan_forming_long and swing_break_long))
fan_ready_short = (fan_ordered_short or (fan_forming_short and swing_break_short))

fan_compressed = math.abs(ema5[1] - ema21[1]) < 0.3 * atr[1]
ema200_flat = math.abs(slope200) < 0.1 * atr[1]

// 7. ДИСТАНЦИЯ ОТ EMA200 В МОМЕНТ ВХОДА
entry_distance_long = close[1] - ema200[1]
entry_distance_short = ema200[1] - close[1]

distance_ok_long = entry_distance_long <= 0.9 * atr[1]
distance_ok_short = entry_distance_short <= 0.9 * atr[1]

// ==================== ОПРЕДЕЛЕНИЕ РЕЖИМА ВХОДА ====================

// КРИТИЧЕСКИЕ УСЛОВИЯ (если не выполнены → SKIP)
critical_long = initiator_long and confirm_long and confirm_color_long and not oversized_initiator_long
critical_short = initiator_short and confirm_short and confirm_color_short and not oversized_initiator_short

// STANDARD УСЛОВИЯ (все должны быть выполнены)
standard_long = critical_long and slope_trending_long and depth_standard_long and gap_standard_long and distance_ok_long and fan_ready_long and (not pre_touch_long or (pre_touch_long and depth_pretouch_long and fan_ordered_long))

standard_short = critical_short and slope_trending_short and depth_standard_short and gap_standard_short and distance_ok_short and fan_ready_short and (not pre_touch_short or (pre_touch_short and depth_pretouch_short and fan_ordered_short))

// SCALP УСЛОВИЯ (более мягкие требования)
scalp_long = critical_long and not standard_long and depth_scalp_long and gap_scalp_long and (fan_compressed and ema200_flat or not slope_trending_long)

scalp_short = critical_short and not standard_short and depth_scalp_short and gap_scalp_short and (fan_compressed and ema200_flat or not slope_trending_short)

// ИТОГОВЫЕ СИГНАЛЫ
signal_long = standard_long or scalp_long
signal_short = standard_short or scalp_short

// РЕЖИМ ВХОДА
entry_mode_long = standard_long ? "STANDARD" : (scalp_long ? "SCALP" : "SKIP")
entry_mode_short = standard_short ? "STANDARD" : (scalp_short ? "SCALP" : "SKIP")


// ==================== РАСЧЁТ SL И TP ====================

// Entry = close подтверждающей свечи (свеча [1])
entry_long = close[1]
entry_short = close[1]

// Stop Loss за экстремум ИНИЦИАТОРА (свеча [2]) с небольшим буфером
// LONG: чуть ниже low инициатора
// SHORT: чуть выше high инициатора
sl_buffer = 0.1 * atr[2]  // буфер ~10% ATR от тени
sl_long = low[2] - sl_buffer
sl_short = high[2] + sl_buffer

// Risk (R) = расстояние от entry до SL
risk_long = entry_long - sl_long
risk_short = sl_short - entry_short

// Take Profit
tp1_long = entry_long + risk_long * tp1_rr
tp2_long = entry_long + risk_long * tp2_rr

tp1_short = entry_short - risk_short * tp1_rr
tp2_short = entry_short - risk_short * tp2_rr

// Breakeven level (после TP1)
// BE = Entry + комиссия (0.04% × 2 для open+close)
be_offset = entry_long * 0.0008  // 0.08% для покрытия комиссий туда-обратно
be_long = entry_long + be_offset
be_short = entry_short - be_offset

// ==================== ВИЗУАЛИЗАЦИЯ СИГНАЛОВ ====================

// Цвет по режиму
color_long = standard_long ? color.new(color.lime, 0) : 
             (scalp_long ? color.new(color.yellow, 0) : color.new(color.gray, 70))

color_short = standard_short ? color.new(color.red, 0) : 
              (scalp_short ? color.new(color.orange, 0) : color.new(color.gray, 70))

// Стрелки (только для STANDARD и SCALP, пропускаем SKIP)
plotshape(signal_long, "LONG", shape.triangleup, location.belowbar, color_long, size=size.normal)
plotshape(signal_short, "SHORT", shape.triangledown, location.abovebar, color_short, size=size.normal)

// Labels с режимом
if signal_long
    label_text = "LONG\n" + entry_mode_long
    label.new(bar_index[1], low[1], label_text, color=color_long, textcolor=color.white, style=label.style_label_up, size=size.small)

if signal_short
    label_text = "SHORT\n" + entry_mode_short
    label.new(bar_index[1], high[1], label_text, color=color_short, textcolor=color.white, style=label.style_label_down, size=size.small)

// ==================== TP LEVELS ====================

if show_tp and signal_long
    // Entry level
    line.new(bar_index[1], entry_long, bar_index, entry_long, 
             color=color.new(color.blue, 50), width=1, style=line.style_dashed)
    
    // TP1 (для всех режимов)
    line.new(bar_index[1], tp1_long, bar_index, tp1_long, 
             color=color.new(color.lime, 30), width=2, style=line.style_solid)
    tp1_label_text = entry_mode_long == "SCALP" ? "TP1 (100%)" : "TP1 (50%)"
    label.new(bar_index, tp1_long, tp1_label_text, color=color.new(color.lime, 70), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // Breakeven level (перевод SL после TP1)
    line.new(bar_index[1], be_long, bar_index, be_long, 
             color=color.new(color.orange, 60), width=1, style=line.style_dotted)
    label.new(bar_index, be_long, "BE", color=color.new(color.orange, 80), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // TP2 только для STANDARD режима
    if entry_mode_long == "STANDARD"
        line.new(bar_index[1], tp2_long, bar_index, tp2_long, 
                 color=color.new(color.lime, 30), width=2, style=line.style_solid)
        label.new(bar_index, tp2_long, "TP2 (50%)", color=color.new(color.lime, 70), 
                  textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // SL (за low инициатора)
    line.new(bar_index[1], sl_long, bar_index, sl_long, 
             color=color.new(color.red, 30), width=2, style=line.style_solid)
    label.new(bar_index, sl_long, "SL", color=color.new(color.red, 70), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)

if show_tp and signal_short
    // Entry level
    line.new(bar_index[1], entry_short, bar_index, entry_short, 
             color=color.new(color.blue, 50), width=1, style=line.style_dashed)
    
    // TP1 (для всех режимов)
    line.new(bar_index[1], tp1_short, bar_index, tp1_short, 
             color=color.new(color.red, 30), width=2, style=line.style_solid)
    tp1_label_text_short = entry_mode_short == "SCALP" ? "TP1 (100%)" : "TP1 (50%)"
    label.new(bar_index, tp1_short, tp1_label_text_short, color=color.new(color.red, 70), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // Breakeven level (перевод SL после TP1)
    line.new(bar_index[1], be_short, bar_index, be_short, 
             color=color.new(color.orange, 60), width=1, style=line.style_dotted)
    label.new(bar_index, be_short, "BE", color=color.new(color.orange, 80), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // TP2 только для STANDARD режима
    if entry_mode_short == "STANDARD"
        line.new(bar_index[1], tp2_short, bar_index, tp2_short, 
                 color=color.new(color.red, 30), width=2, style=line.style_solid)
        label.new(bar_index, tp2_short, "TP2 (50%)", color=color.new(color.red, 70), 
                  textcolor=color.white, style=label.style_label_left, size=size.tiny)
    
    // SL (за high инициатора)
    line.new(bar_index[1], sl_short, bar_index, sl_short, 
             color=color.new(color.lime, 30), width=2, style=line.style_solid)
    label.new(bar_index, sl_short, "SL", color=color.new(color.lime, 70), 
              textcolor=color.white, style=label.style_label_left, size=size.tiny)

// ==================== АЛЕРТЫ ====================

alertcondition(standard_long, "LONG Standard Entry", "EMA200 Body Cross LONG - Standard Entry")
alertcondition(scalp_long, "LONG Scalp Entry", "EMA200 Body Cross LONG - Scalp Entry")

alertcondition(standard_short, "SHORT Standard Entry", "EMA200 Body Cross SHORT - Standard Entry")
alertcondition(scalp_short, "SHORT Scalp Entry", "EMA200 Body Cross SHORT - Scalp Entry")

// ==================== TABLE С СТАТИСТИКОЙ ====================

var table stats_table = table.new(position.top_right, 2, 8, border_width=1)

if barstate.islast
    table.cell(stats_table, 0, 0, "Parameter", bgcolor=color.new(color.gray, 70), text_color=color.white)
    table.cell(stats_table, 1, 0, "Value", bgcolor=color.new(color.gray, 70), text_color=color.white)
    
    table.cell(stats_table, 0, 1, "EMA200 Slope (10)")
    slope_text = slope200 > 0 ? "UP ↑" : (slope200 < 0 ? "DOWN ↓" : "FLAT →")
    slope_color = slope200 > 0 ? color.lime : (slope200 < 0 ? color.red : color.gray)
    table.cell(stats_table, 1, 1, slope_text, text_color=slope_color)
    
    table.cell(stats_table, 0, 2, "EMA Fan")
    fan_text = fan_ordered_long ? "BULLISH ↑" : (fan_ordered_short ? "BEARISH ↓" : "NEUTRAL")
    table.cell(stats_table, 1, 2, fan_text)
    
    table.cell(stats_table, 0, 3, "ATR Value")
    table.cell(stats_table, 1, 3, str.tostring(atr, "#.##"))
    
    table.cell(stats_table, 0, 4, "Distance to EMA200")
    table.cell(stats_table, 1, 4, str.tostring(math.abs(close - ema200), "#.##"))
    
    table.cell(stats_table, 0, 5, "ATR Upper Band")
    table.cell(stats_table, 1, 5, str.tostring(atr_upper, "#.##"))
    
    table.cell(stats_table, 0, 6, "ATR Lower Band")
    table.cell(stats_table, 1, 6, str.tostring(atr_lower, "#.##"))
    
    table.cell(stats_table, 0, 7, "Swing High/Low")
    table.cell(stats_table, 1, 7, "H:" + str.tostring(swing_high, "#.##") + " L:" + str.tostring(swing_low, "#.##"), text_size=size.tiny)
