#!/usr/bin/env python3
"""
V3 S/R Signal Export Script
–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø-10 —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–ø—É—â–µ–Ω–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
from datetime import datetime
import pytz

DB_PATH = "trading_bot.db"

def export_signals():
    """Export top signals with missed potential from local database"""
    
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        print("=" * 100)
        print("üî• –¢–û–ü-10 –°–ò–ì–ù–ê–õ–û–í V3 S/R –° –£–ü–£–©–ï–ù–ù–´–ú –ü–û–¢–ï–ù–¶–ò–ê–õ–û–ú")
        print("=" * 100)
        print()
        
        query = """
        SELECT 
            signal_id,
            symbol,
            direction,
            setup_type,
            entry_price,
            stop_loss,
            take_profit_1,
            take_profit_2,
            exit_price,
            exit_reason,
            created_at,
            closed_at,
            pnl_percent,
            final_r_multiple,
            mfe_r,
            mae_r,
            confidence,
            tp1_hit,
            tp2_hit
        FROM v3_sr_signals
        WHERE 
            exit_reason IS NOT NULL 
            AND mfe_r IS NOT NULL
            AND final_r_multiple IS NOT NULL
            AND (mfe_r - final_r_multiple) > 0.5
        ORDER BY (mfe_r - final_r_multiple) DESC
        LIMIT 10
        """
        
        cursor.execute(query)
        signals = cursor.fetchall()
        
        if not signals:
            print("‚ö†Ô∏è  –°–∏–≥–Ω–∞–ª—ã —Å —É–ø—É—â–µ–Ω–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª {DB_PATH} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
            return
        
        kyiv_tz = pytz.timezone('Europe/Kyiv')
        utc_tz = pytz.UTC
        
        for idx, signal in enumerate(signals, 1):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∏–µ–≤—Å–∫–æ–µ
            try:
                if signal['created_at']:
                    created_dt = datetime.fromisoformat(signal['created_at'].replace('Z', '+00:00'))
                    if created_dt.tzinfo is None:
                        created_dt = utc_tz.localize(created_dt)
                    created_kyiv = created_dt.astimezone(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S')
                else:
                    created_kyiv = "N/A"
                    
                if signal['closed_at']:
                    closed_dt = datetime.fromisoformat(signal['closed_at'].replace('Z', '+00:00'))
                    if closed_dt.tzinfo is None:
                        closed_dt = utc_tz.localize(closed_dt)
                    closed_kyiv = closed_dt.astimezone(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S')
                else:
                    closed_kyiv = "N/A"
            except:
                created_kyiv = signal['created_at'] if signal['created_at'] else "N/A"
                closed_kyiv = signal['closed_at'] if signal['closed_at'] else "N/A"
            
            # –†–∞—Å—á–µ—Ç —É–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
            mfe_r = signal['mfe_r'] if signal['mfe_r'] else 0
            final_r = signal['final_r_multiple'] if signal['final_r_multiple'] else 0
            missed_r = mfe_r - final_r
            
            # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ø—Ä–∏ MFE
            entry = signal['entry_price']
            sl = signal['stop_loss']
            risk = abs(entry - sl) if entry and sl else 0
            
            if signal['direction'] == 'LONG' and risk > 0:
                mfe_price = entry + (mfe_r * risk)
            elif signal['direction'] == 'SHORT' and risk > 0:
                mfe_price = entry - (mfe_r * risk)
            else:
                mfe_price = 0
            
            print(f"{'=' * 100}")
            print(f"#{idx} - {signal['symbol']} {signal['direction']} {signal['setup_type']}")
            print(f"{'=' * 100}")
            print(f"Signal ID: {signal['signal_id']}")
            print()
            print(f"üìÖ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ (–ö–∏–µ–≤):  {created_kyiv}")
            print(f"üìÖ –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ (–ö–∏–µ–≤): {closed_kyiv}")
            print()
            print(f"üí∞ Entry Price:   {signal['entry_price']:.6f}" if signal['entry_price'] else "üí∞ Entry Price:   N/A")
            print(f"üõë Stop Loss:     {signal['stop_loss']:.6f}" if signal['stop_loss'] else "üõë Stop Loss:     N/A")
            print(f"üéØ Take Profit 1: {signal['take_profit_1']:.6f} (1.0R)" if signal['take_profit_1'] else "üéØ Take Profit 1: N/A")
            print(f"üéØ Take Profit 2: {signal['take_profit_2']:.6f} (1.5R)" if signal['take_profit_2'] else "üéØ Take Profit 2: N/A")
            print()
            print(f"üìä Exit Price:    {signal['exit_price']:.6f}" if signal['exit_price'] else "üìä Exit Price:    N/A")
            print(f"üìä Exit Reason:   {signal['exit_reason']}")
            print()
            
            tp1_status = "‚úÖ YES" if signal['tp1_hit'] else "‚ùå NO"
            tp2_status = "‚úÖ YES" if signal['tp2_hit'] else "‚ùå NO"
            print(f"TP1 Hit: {tp1_status} | TP2 Hit: {tp2_status}")
            print()
            
            pnl = signal['pnl_percent'] if signal['pnl_percent'] else 0
            print(f"üíµ Final PnL:     {final_r:+.2f}R ({pnl:+.2f}%)")
            print(f"üìà MFE (Max):     {mfe_r:+.2f}R ‚Üê –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
            
            if mfe_price > 0:
                print(f"üìç –¶–µ–Ω–∞ –ø—Ä–∏ MFE:  {mfe_price:.6f}")
            
            mae_r = signal['mae_r'] if signal['mae_r'] else 0
            print(f"üìâ MAE (Min):     {mae_r:+.2f}R")
            print()
            print(f"‚ö†Ô∏è  –£–ü–£–©–ï–ù–û:       {missed_r:.2f}R")
            
            if signal['confidence']:
                print(f"üìä Confidence:    {signal['confidence']:.0f}%")
            
            print()
            
            # –ê–Ω–∞–ª–∏–∑
            if signal['exit_reason'] == 'TP2' and missed_r > 1.0:
                print(f"üí° –ü–†–û–ë–õ–ï–ú–ê: TP2 –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –Ω–∞ {final_r:.2f}R, –Ω–æ —Ü–µ–Ω–∞ –¥–æ—à–ª–∞ –¥–æ {mfe_r:.2f}R!")
                print(f"   –ï—Å–ª–∏ –±—ã –±—ã–ª —Ç–æ–ª—å–∫–æ trailing (–±–µ–∑ TP2), –ø–æ–ª—É—á–∏–ª–∏ –±—ã ~{mfe_r:.2f}R")
            elif signal['exit_reason'] == 'SL' and mfe_r > 0.5:
                print(f"üí° –ü–†–û–ë–õ–ï–ú–ê: –¶–µ–Ω–∞ –¥–æ—à–ª–∞ –¥–æ {mfe_r:.2f}R, –Ω–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ SL!")
                print(f"   –ù—É–∂–µ–Ω –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ BE –ø–æ—Å–ª–µ MFE > 0.5R")
            elif signal['exit_reason'] == 'TRAIL':
                print(f"üí° INFO: Trailing —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ {final_r:.2f}R (MFE –±—ã–ª {mfe_r:.2f}R)")
                if missed_r > 0.5:
                    print(f"   –í–æ–∑–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å trail_atr_mult –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞")
            
            print()
        
        print(f"{'=' * 100}")
        print(f"üìå SUMMARY:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–ø—É—â–µ–Ω–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º > 0.5R")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
        print(f"{'=' * 100}")
        
        conn.close()
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª {DB_PATH} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print()
    print("V3 S/R Signal Export Tool")
    print("–≠–∫—Å–ø–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–ø—É—â–µ–Ω–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º")
    print()
    export_signals()
    print()
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
