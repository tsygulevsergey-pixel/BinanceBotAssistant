#!/usr/bin/env python3
"""
V3 S/R Signal Export - —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ JSON
"""

import sqlite3
import json
import os

# –ü—É—Ç—å –∫ –ë–î –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
DB_PATH = os.path.join(os.path.dirname(__file__), "data", "trading_bot.db")
OUTPUT_FILE = os.path.join(os.path.dirname(__file__), "v3_signals_export.json")

def export_to_json():
    """Export all V3 S/R signals to JSON file"""
    
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        print(f"–ë–î: {DB_PATH}")
        
        cursor.execute("SELECT * FROM v3_sr_signals ORDER BY created_at DESC")
        rows = cursor.fetchall()
        
        if not rows:
            print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ v3_sr_signals")
            conn.close()
            return
        
        print(f"–ù–∞–π–¥–µ–Ω–æ: {len(rows)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        signals = [dict(row) for row in rows]
        
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            json.dump(signals, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç: {OUTPUT_FILE}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(signals)}")
        
        closed = sum(1 for s in signals if s.get('closed_at'))
        print(f"–ó–∞–∫—Ä—ã—Ç–æ: {closed}, –ê–∫—Ç–∏–≤–Ω–æ: {len(signals) - closed}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    export_to_json()
