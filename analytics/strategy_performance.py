"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker
from src.database.models import Signal, ActionPriceSignal
from datetime import datetime, timedelta
import pytz

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
engine = create_engine('sqlite:///trading_bot.db')
Session = sessionmaker(bind=engine)

def analyze_main_strategies(days=30):
    """–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    session = Session()
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cutoff_date = datetime.now(pytz.UTC) - timedelta(days=days)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    strategies = session.query(Signal.strategy_name).distinct().all()
    
    print(f"\n{'='*80}")
    print(f"üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–¢–†–ê–¢–ï–ì–ò–ô (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π)")
    print(f"{'='*80}\n")
    
    results = []
    
    for (strategy_name,) in strategies:
        signals = session.query(Signal).filter(
            Signal.strategy_name == strategy_name,
            Signal.created_at >= cutoff_date,
            Signal.status.in_(['PROFIT', 'LOSS', 'BREAKEVEN'])
        ).all()
        
        if not signals:
            continue
            
        total = len(signals)
        wins = len([s for s in signals if s.pnl_percent and s.pnl_percent > 0])
        losses = len([s for s in signals if s.pnl_percent and s.pnl_percent <= 0])
        
        tp1_count = len([s for s in signals if s.exit_type == 'TP1'])
        tp2_count = len([s for s in signals if s.exit_type == 'TP2'])
        sl_count = len([s for s in signals if s.exit_type == 'SL'])
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_pnl = sum([s.pnl_percent for s in signals if s.pnl_percent]) / total if total > 0 else 0
        avg_win = sum([s.pnl_percent for s in signals if s.pnl_percent and s.pnl_percent > 0]) / wins if wins > 0 else 0
        avg_loss = sum([s.pnl_percent for s in signals if s.pnl_percent and s.pnl_percent <= 0]) / losses if losses > 0 else 0
        
        win_rate = (wins / total * 100) if total > 0 else 0
        
        # –†–∞—Å—á–µ—Ç expectancy (–º–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ)
        expectancy = (win_rate/100 * avg_win) + ((100-win_rate)/100 * avg_loss)
        
        results.append({
            'name': strategy_name,
            'total': total,
            'wins': wins,
            'losses': losses,
            'win_rate': win_rate,
            'avg_pnl': avg_pnl,
            'avg_win': avg_win,
            'avg_loss': avg_loss,
            'tp1': tp1_count,
            'tp2': tp2_count,
            'sl': sl_count,
            'expectancy': expectancy
        })
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ expectancy (–ª—É—á—à–∏–µ —Å–≤–µ—Ä—Ö—É)
    results.sort(key=lambda x: x['expectancy'], reverse=True)
    
    # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    print(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<30} {'–°–∏–≥–Ω':<6} {'WR%':<7} {'Avg PnL':<9} {'Avg Win':<9} {'Avg Loss':<10} {'TP1/TP2/SL':<12} {'Expect':<7}")
    print(f"{'-'*115}")
    
    for r in results:
        status = "üü¢" if r['expectancy'] > 0.3 else "üü°" if r['expectancy'] > 0 else "üî¥"
        print(f"{status} {r['name']:<28} {r['total']:<6} {r['win_rate']:<6.1f}% {r['avg_pnl']:>+7.2f}% {r['avg_win']:>+7.2f}% {r['avg_loss']:>+8.2f}% {r['tp1']}/{r['tp2']}/{r['sl']:<9} {r['expectancy']:>+6.2f}%")
    
    print(f"\n{'='*80}")
    print("üü¢ –û—Ç–ª–∏—á–Ω–æ (Expectancy > 0.3%)  üü° –ù–æ—Ä–º–∞ (0% < E < 0.3%)  üî¥ –ü–ª–æ—Ö–æ (E < 0%)")
    print(f"{'='*80}\n")
    
    session.close()
    return results

def show_worst_performers(results, count=3):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ö—É–¥—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –ø—Ä–∏—á–∏–Ω—ã"""
    worst = sorted(results, key=lambda x: x['expectancy'])[:count]
    
    print(f"\n{'='*80}")
    print(f"üî¥ –¢–û–ü-{count} –•–£–î–®–ò–• –°–¢–†–ê–¢–ï–ì–ò–ô –ò –ß–¢–û –ò–°–ü–†–ê–í–ò–¢–¨:")
    print(f"{'='*80}\n")
    
    for i, r in enumerate(worst, 1):
        print(f"{i}. {r['name']}")
        print(f"   Expectancy: {r['expectancy']:+.2f}% | Win Rate: {r['win_rate']:.1f}% | Avg PnL: {r['avg_pnl']:+.2f}%")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
        problems = []
        fixes = []
        
        if r['win_rate'] < 40:
            problems.append("‚ùå –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç (<40%)")
            fixes.append("   ‚Üí –£–∂–µ—Å—Ç–æ—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã (ADX, ATR, BBW)")
            fixes.append("   ‚Üí –£–≤–µ–ª–∏—á–∏—Ç—å min_score –≤ config.yaml")
            fixes.append("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        if r['avg_loss'] < -1.5:
            problems.append("‚ùå –ë–æ–ª—å—à–∏–µ —É–±—ã—Ç–∫–∏")
            fixes.append("   ‚Üí –£–º–µ–Ω—å—à–∏—Ç—å max_risk_percent –≤ config.yaml")
            fixes.append("   ‚Üí –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤")
        
        if r['avg_win'] < 1.0:
            problems.append("‚ùå –ú–∞–ª–µ–Ω—å–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å")
            fixes.append("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤")
            fixes.append("   ‚Üí –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å trailing stop")
        
        if r['total'] < 5:
            problems.append("‚ö†Ô∏è –ú–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            fixes.append("   ‚Üí –ü–æ–¥–æ–∂–¥–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 20-30 —Å–∏–≥–Ω–∞–ª–æ–≤)")
        
        if r['sl'] > r['tp1'] + r['tp2']:
            problems.append("‚ùå –ë–æ–ª—å—à–µ SL —á–µ–º TP")
            fixes.append("   ‚Üí –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—ã")
        
        if problems:
            print(f"\n   –ü—Ä–æ–±–ª–µ–º—ã:")
            for p in problems:
                print(f"   {p}")
            print(f"\n   –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:")
            for f in fixes:
                print(f"   {f}")
        else:
            print(f"   ‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        
        print()

def show_best_performers(results, count=3):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    best = sorted(results, key=lambda x: x['expectancy'], reverse=True)[:count]
    
    print(f"\n{'='*80}")
    print(f"üü¢ –¢–û–ü-{count} –õ–£–ß–®–ò–• –°–¢–†–ê–¢–ï–ì–ò–ô:")
    print(f"{'='*80}\n")
    
    for i, r in enumerate(best, 1):
        print(f"{i}. {r['name']}")
        print(f"   ‚úÖ Expectancy: {r['expectancy']:+.2f}% | Win Rate: {r['win_rate']:.1f}% | Avg PnL: {r['avg_pnl']:+.2f}%")
        print(f"   üìä TP1: {r['tp1']} | TP2: {r['tp2']} | SL: {r['sl']}")
        print()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π')
    parser.add_argument('--days', type=int, default=30, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)')
    args = parser.parse_args()
    
    results = analyze_main_strategies(days=args.days)
    
    if results:
        show_best_performers(results, count=3)
        show_worst_performers(results, count=3)
        
        print(f"\nüí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   1. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å Expectancy < 0% ‚Üí –æ—Ç–∫–ª—é—á–∏—Ç—å (enabled: false –≤ config.yaml)")
        print(f"   2. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å WR < 35% ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞")
        print(f"   3. –ï—Å–ª–∏ –º–Ω–æ–≥–æ SL ‚Üí —É–∂–µ—Å—Ç–æ—á–∏—Ç—å min_score –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        print(f"   4. –ú–∏–Ω–∏–º—É–º 20-30 —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤")
        print(f"\n   üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.yaml:")
        print(f"      - min_score: –ø–æ—Ä–æ–≥ –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ (–≤—ã—à–µ = –º–µ–Ω—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ)")
        print(f"      - enabled: –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        print(f"      - max_risk_percent: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É\n")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
