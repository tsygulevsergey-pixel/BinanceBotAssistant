import openpyxl

def extract_metrics():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ TradingView –æ—Ç—á–µ—Ç–æ–≤"""
    
    files = {
        'BTCUSDT': '../attached_assets/Smart_Money_Liquidity_Hunt_BINANCE_BTCUSDT.P_2025-10-13_846cf_1760382115223.xlsx',
        'ETHUSDT': '../attached_assets/Smart_Money_Liquidity_Hunt_BINANCE_ETHUSDT.P_2025-10-13_98d79_1760382152153.xlsx',
        'SOLUSDT': '../attached_assets/Smart_Money_Liquidity_Hunt_BINANCE_SOLUSDT.P_2025-10-13_672c5_1760382187508.xlsx'
    }
    
    results = {}
    
    for symbol, filepath in files.items():
        wb = openpyxl.load_workbook(filepath)
        metrics = {}
        
        # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "–î–∏–Ω–∞–º–∏–∫–∞"
        dynamics = wb['–î–∏–Ω–∞–º–∏–∫–∞']
        for row in dynamics.iter_rows(values_only=True):
            if row[0] == '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å':
                metrics['net_profit'] = row[1]
                metrics['net_profit_pct'] = row[2]
        
        # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "–ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫"
        analysis = wb['–ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫']
        for row in analysis.iter_rows(values_only=True):
            if row[0] == '–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫':
                metrics['total_trades'] = row[1]
            elif row[0] == '–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏':
                metrics['winning_trades'] = row[1]
            elif row[0] == '–£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏':
                metrics['losing_trades'] = row[1]
            elif row[0] == '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö':
                metrics['win_rate'] = row[2]
            elif row[0] == '–°—Ä–µ–¥–Ω–∏–µ –ü–†/–£–ë':
                metrics['avg_trade'] = row[1]
                metrics['avg_trade_pct'] = row[2]
        
        # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞"
        risk = wb['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω...']
        for row in risk.iter_rows(values_only=True):
            if row[0] == '–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏':
                metrics['profit_factor'] = row[1]
        
        results[symbol] = metrics
        wb.close()
    
    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    print("\n" + "="*80)
    print("üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó: Smart Money Liquidity Hunt Strategy")
    print("="*80)
    
    for symbol, m in results.items():
        print(f"\n{'‚îÄ'*80}")
        print(f"üéØ {symbol}")
        print(f"{'‚îÄ'*80}")
        print(f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:      {m.get('net_profit', 'N/A'):>10} USDT ({m.get('net_profit_pct', 'N/A'):>6}%)")
        print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:        {m.get('total_trades', 'N/A'):>10}")
        print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:   {m.get('winning_trades', 'N/A'):>10}")
        print(f"–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:    {m.get('losing_trades', 'N/A'):>10}")
        print(f"Win Rate:            {m.get('win_rate', 'N/A'):>10}%")
        print(f"Profit Factor:       {m.get('profit_factor', 'N/A'):>10}")
        print(f"–°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞:      {m.get('avg_trade', 'N/A'):>10} USDT ({m.get('avg_trade_pct', 'N/A'):>6}%)")
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\n{'='*80}")
    print("üìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print(f"{'='*80}\n")
    
    print(f"{'–ú–µ—Ç—Ä–∏–∫–∞':<25} {'BTCUSDT':>15} {'ETHUSDT':>15} {'SOLUSDT':>15}")
    print(f"{'-'*80}")
    print(f"{'Win Rate %':<25} {results['BTCUSDT'].get('win_rate', 'N/A'):>15} {results['ETHUSDT'].get('win_rate', 'N/A'):>15} {results['SOLUSDT'].get('win_rate', 'N/A'):>15}")
    print(f"{'Profit Factor':<25} {results['BTCUSDT'].get('profit_factor', 'N/A'):>15} {results['ETHUSDT'].get('profit_factor', 'N/A'):>15} {results['SOLUSDT'].get('profit_factor', 'N/A'):>15}")
    print(f"{'Net Profit %':<25} {results['BTCUSDT'].get('net_profit_pct', 'N/A'):>15} {results['ETHUSDT'].get('net_profit_pct', 'N/A'):>15} {results['SOLUSDT'].get('net_profit_pct', 'N/A'):>15}")
    print(f"{'Total Trades':<25} {results['BTCUSDT'].get('total_trades', 'N/A'):>15} {results['ETHUSDT'].get('total_trades', 'N/A'):>15} {results['SOLUSDT'].get('total_trades', 'N/A'):>15}")
    print(f"{'Avg Trade %':<25} {results['BTCUSDT'].get('avg_trade_pct', 'N/A'):>15} {results['ETHUSDT'].get('avg_trade_pct', 'N/A'):>15} {results['SOLUSDT'].get('avg_trade_pct', 'N/A'):>15}")
    
    # –í—ã–≤–æ–¥—ã
    print(f"\n{'='*80}")
    print("üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´")
    print(f"{'='*80}\n")
    
    win_rates = [results[s].get('win_rate', 0) for s in results]
    profit_factors = [results[s].get('profit_factor', 0) for s in results]
    
    avg_win_rate = sum(win_rates) / len(win_rates)
    avg_profit_factor = sum(profit_factors) / len(profit_factors)
    
    print(f"‚úÖ –°—Ä–µ–¥–Ω–∏–π Win Rate:      {avg_win_rate:.1f}%")
    print(f"‚úÖ –°—Ä–µ–¥–Ω–∏–π Profit Factor: {avg_profit_factor:.2f}")
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å
    win_rate_std = (max(win_rates) - min(win_rates))
    if win_rate_std < 15:
        print(f"\nüéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–°–¢–¨: –û–¢–õ–ò–ß–ù–û (—Ä–∞–∑–±—Ä–æ—Å Win Rate: {win_rate_std:.1f}%)")
        print("   –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞—Ö!")
    elif win_rate_std < 25:
        print(f"\nüü° –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–°–¢–¨: –°–†–ï–î–ù–ï (—Ä–∞–∑–±—Ä–æ—Å Win Rate: {win_rate_std:.1f}%)")
        print("   –ï—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    else:
        print(f"\n‚ùå –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–°–¢–¨: –ü–õ–û–•–û (—Ä–∞–∑–±—Ä–æ—Å Win Rate: {win_rate_std:.1f}%)")
        print("   –°—Ç—Ä–∞—Ç–µ–≥–∏—è overfitted –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\n{'='*80}")
    print("üèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê")
    print(f"{'='*80}\n")
    
    if avg_win_rate >= 50 and avg_profit_factor >= 1.3:
        print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –û–¢–õ–ò–ß–ù–û!")
        print("   –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–∞ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ")
    elif avg_win_rate >= 45 and avg_profit_factor >= 1.1:
        print("üü° –†–ï–ó–£–õ–¨–¢–ê–¢: –•–û–†–û–®–û")
        print("   –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    else:
        print("‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        print("   –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–∞–±—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é")
    
    print(f"\n{'='*80}\n")
    
    return results

if __name__ == "__main__":
    extract_metrics()
