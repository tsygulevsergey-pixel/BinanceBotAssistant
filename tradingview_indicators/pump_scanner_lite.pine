// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//@version=5
indicator("Pump Scanner v1.1 (Strict Compression)", overlay=true, max_labels_count=50)

// ════════════════════════════════════════════════════════════════════════════
// НАСТРОЙКИ
// ════════════════════════════════════════════════════════════════════════════

// Основные параметры
emaLen200 = input.int(200, "EMA200 Length", minval=1, group="EMA & Ribbons")
atrLen = input.int(14, "ATR Length", minval=1, group="ATR Channels")
atrMult = input.float(2.0, "ATR Multiplier", minval=0.1, group="ATR Channels")

bbLen = input.int(20, "BB Length", minval=1, group="Bollinger & Keltner")
bbMult = input.float(2.0, "BB Multiplier", minval=0.1, group="Bollinger & Keltner")
kcLen = input.int(20, "KC Length", minval=1, group="Bollinger & Keltner")
kcMult = input.float(1.5, "KC Multiplier", minval=0.1, group="Bollinger & Keltner")

volLen = input.int(50, "Volume SMA Length", minval=1, group="Volume & CVD")
volZThreshold = input.float(2.0, "Volume Z-Score Threshold", minval=0.5, group="Volume & CVD")
lrLen = input.int(50, "CVD Linear Regression Length", minval=1, group="Volume & CVD")

swingLen = input.int(20, "Swing Length", minval=1, group="Swing High/Low")

// Пороговые значения для компрессии (v1.1)
bbWidthZThreshold = input.float(-0.8, "BBWidth Z-Score Threshold", minval=-2.0, maxval=0.0, step=0.1, group="Compression v1.1")
atrPctZThreshold = input.float(-0.5, "ATR% Z-Score Threshold", minval=-2.0, maxval=0.0, step=0.1, group="Compression v1.1")
compressionPersistN = input.int(4, "Compression Persist (N of M)", minval=2, maxval=10, group="Compression v1.1")
compressionPersistM = input.int(6, "Compression Lookback (M bars)", minval=3, maxval=20, group="Compression v1.1")
ribbonTightThr = input.float(0.22, "Ribbon Tight (ATR)", minval=0.05, step=0.01, group="Compression v1.1")
distTo200Thr = input.float(0.2, "Distance to EMA200 (ATR)", minval=0.05, step=0.05, group="Compression v1.1")
slopeDirectionalThr = input.float(0.02, "EMA200 Directional Slope", minval=0.0, step=0.01, group="Compression v1.1")
volDryThreshold = input.float(0.8, "Volume Dry Ratio", minval=0.5, maxval=1.0, step=0.05, group="Compression v1.1")

// Пороговые значения для триггера
watchMinScore = input.int(5, "Watch Min Score", minval=1, maxval=10, group="Trigger Settings")
confirmDepthMin = input.float(0.35, "Trigger Depth (ATR)", minval=0.1, step=0.05, group="Trigger Settings")
airMin = input.float(0.35, "Trigger Air to Band (ATR)", minval=0.1, step=0.05, group="Trigger Settings")
debounceBarCount = input.int(2, "Watch Debounce (bars)", minval=1, maxval=5, group="Trigger Settings")
cooldownBars = input.int(30, "Trigger Cooldown (bars)", minval=10, maxval=50, group="Trigger Settings")
lookbackBW = input.int(200, "BBWidth/ATR Z-Score Lookback", minval=50, group="Trigger Settings")

// Опции
enableShorts = input.bool(false, "Enable Short Triggers", group="Options")
enablePreTouchFilter = input.bool(true, "Enable Pre-Touch Filter", group="Options")
showPanel = input.bool(true, "Show Info Panel", group="Options")
showWatchBg = input.bool(true, "Show Watch Background", group="Options")
showTriggerBg = input.bool(true, "Show Trigger Background", group="Options")

// ════════════════════════════════════════════════════════════════════════════
// РАСЧЁТЫ
// ════════════════════════════════════════════════════════════════════════════

// EMA200 и наклон
ema200 = ta.ema(close, emaLen200)
atr14 = ta.atr(atrLen)
slope200 = nz((ema200 - ema200[1]) / atr14, 0)

// EMA Ribbon
ema5 = ta.ema(close, 5)
ema9 = ta.ema(close, 9)
ema13 = ta.ema(close, 13)
ema21 = ta.ema(close, 21)

// ATR каналы
atrMid = ta.ema(close, atrLen)
atrUpper = close + atrMult * atr14
atrLower = close - atrMult * atr14

// Bollinger Bands
bbBasis = ta.sma(close, bbLen)
bbDev = ta.stdev(close, bbLen)
bbUpper = bbBasis + bbMult * bbDev
bbLower = bbBasis - bbMult * bbDev
bbWidth = nz((bbUpper - bbLower) / bbBasis, 0)

// Keltner Channel
kcMid = ta.ema(close, kcLen)
kcRange = ta.atr(kcLen)
kcUpper = kcMid + kcMult * kcRange
kcLower = kcMid - kcMult * kcRange

// TTM Squeeze
squeezeOn = (bbLower > kcLower) and (bbUpper < kcUpper)

// BBWidth Z-Score (v1.1)
bbWidthSMA = ta.sma(bbWidth, lookbackBW)
bbWidthStd = ta.stdev(bbWidth, lookbackBW)
bbWidthZ = nz((bbWidth - bbWidthSMA) / bbWidthStd, 0)

// ATR% Z-Score (v1.1)
atrPct = nz(atr14 / close * 100, 0)
atrPctSMA = ta.sma(atrPct, lookbackBW)
atrPctStd = ta.stdev(atrPct, lookbackBW)
atrPctZ = nz((atrPct - atrPctSMA) / atrPctStd, 0)

// Настоящая компрессия (3 признака)
trueCompression = squeezeOn and (bbWidthZ < bbWidthZThreshold) and (atrPctZ < atrPctZThreshold)

// Swing High/Low
swingHigh = ta.highest(high, swingLen)
swingLow = ta.lowest(low, swingLen)

// Volume Spike
volSMA = ta.sma(volume, volLen)
volStd = ta.stdev(volume, volLen)
volZ = nz((volume - volSMA) / volStd, 0)
volSpike = volZ >= volZThreshold

// Сухой объём (v1.1)
volRatio = nz(volume / volSMA, 1.0)
volDry = volRatio < volDryThreshold

// Псевдо-CVD
signedVol = volume * math.sign(close - close[1])
var float cvd = 0
cvd := nz(cvd[1], 0) + signedVol
cvdSlope = ta.linreg(cvd, lrLen, 0)

// Ribbon Compression
ribbonMax = math.max(ema5, ema9, ema13, ema21)
ribbonMin = math.min(ema5, ema9, ema13, ema21)
ribbonSpan = ribbonMax - ribbonMin
ribbonTight = nz(ribbonSpan / atr14, 0) <= ribbonTightThr

// ════════════════════════════════════════════════════════════════════════════
// ЛОГИКА СКОРИНГА v1.1 (STRICT COMPRESSION)
// ════════════════════════════════════════════════════════════════════════════

// Персистентность компрессии (≥N из M баров)
compressionCount = 0
for i = 0 to compressionPersistM - 1
    if trueCompression[i]
        compressionCount += 1

persistentCompression = compressionCount >= compressionPersistN

// Направленный уклон EMA200
slopeUpGood = slope200 >= slopeDirectionalThr
slopeDownGood = slope200 <= -slopeDirectionalThr

// Направление позиции относительно EMA200
aboveEMA200 = close > ema200
belowEMA200 = close < ema200

// Дистанция до EMA200
distTo200ATR = nz((close - ema200) / atr14, 0)
nearEMA200 = math.abs(distTo200ATR) <= distTo200Thr

// Компоненты Watch Score v1.1
score_compression = persistentCompression ? 3 : 0  // Ключевой фактор
score_ribbon = ribbonTight ? 2 : 0
score_near200 = nearEMA200 ? 1 : 0
score_volDry = volDry ? 1 : 0
score_cvdSlope = cvdSlope > 0 ? 1 : 0

// Направленный скор: для Long требуем slopeUp, для Short - slopeDown
score_slopeLong = (aboveEMA200 and slopeUpGood) ? 2 : 0
score_slopeShort = (belowEMA200 and slopeDownGood) ? 2 : 0

watchScoreLong = score_compression + score_ribbon + score_near200 + score_volDry + score_cvdSlope + score_slopeLong
watchScoreShort = score_compression + score_ribbon + score_near200 + score_volDry - score_cvdSlope + score_slopeShort  // CVD инвертирован для шортов

// Дирекционный Watch (Long только если выше EMA200, Short - ниже)
isWatchLong = aboveEMA200 and watchScoreLong >= watchMinScore
isWatchShort = belowEMA200 and watchScoreShort >= watchMinScore and enableShorts
isWatch = isWatchLong or isWatchShort

// Дебаунс: Watch должен держаться debounceBarCount баров подряд
var int watchDebounceCounter = 0
if isWatch
    watchDebounceCounter += 1
else
    watchDebounceCounter := 0

watchConfirmed = watchDebounceCounter >= debounceBarCount

// ════════════════════════════════════════════════════════════════════════════
// ТРИГГЕРЫ v1.1 (с Cooldown)
// ════════════════════════════════════════════════════════════════════════════

// Расстояния для триггера
distToUpperBand = nz((bbUpper - close) / atr14, 0)
distToLowerBand = nz((close - bbLower) / atr14, 0)

// Pre-touch фильтр
preTouchLong = enablePreTouchFilter and (low[1] <= ema200) and (distTo200ATR < 0.3)
preTouchShort = enablePreTouchFilter and (high[1] >= ema200) and (distTo200ATR > -0.3)

// Trigger Long (жёсткий фильтр)
breakoutLong = close > swingHigh
depthLong = close - ema200 >= atr14 * confirmDepthMin
airLong = distToUpperBand >= airMin
volumeConfirm = volSpike or cvdSlope > 0

isTriggerLongRaw = breakoutLong and depthLong and airLong and volumeConfirm and not preTouchLong

// Trigger Short (жёсткий фильтр)
breakoutShort = close < swingLow
depthShort = ema200 - close >= atr14 * confirmDepthMin
airShort = distToLowerBand >= airMin

isTriggerShortRaw = enableShorts and breakoutShort and depthShort and airShort and volumeConfirm and not preTouchShort

// Cooldown механизм: после триггера блокируем повторные на N баров
var int cooldownCounterLong = 0
var int cooldownCounterShort = 0

if isTriggerLongRaw
    cooldownCounterLong := cooldownBars
if cooldownCounterLong > 0
    cooldownCounterLong -= 1

if isTriggerShortRaw
    cooldownCounterShort := cooldownBars
if cooldownCounterShort > 0
    cooldownCounterShort -= 1

// Финальные триггеры с учётом cooldown
isTriggerLong = isTriggerLongRaw and cooldownCounterLong == cooldownBars
isTriggerShort = isTriggerShortRaw and cooldownCounterShort == cooldownBars

// ════════════════════════════════════════════════════════════════════════════
// ВИЗУАЛИЗАЦИЯ
// ════════════════════════════════════════════════════════════════════════════

// EMA Lines
plot(ema200, "EMA200", color=color.white, linewidth=2)
plot(ema5, "EMA5", color=color.red, linewidth=1)
plot(ema9, "EMA9", color=color.orange, linewidth=1)
plot(ema13, "EMA13", color=color.yellow, linewidth=1)
plot(ema21, "EMA21", color=color.green, linewidth=1)

// ATR Channels
plot(atrUpper, "ATR Upper", color=color.new(color.gray, 70), linewidth=1, style=plot.style_line)
plot(atrLower, "ATR Lower", color=color.new(color.gray, 70), linewidth=1, style=plot.style_line)

// Bollinger Bands
plot(bbUpper, "BB Upper", color=color.new(color.blue, 80), linewidth=1)
plot(bbLower, "BB Lower", color=color.new(color.blue, 80), linewidth=1)

// Фоны (дирекционные для Watch)
bgWatchLong = showWatchBg and watchConfirmed and isWatchLong and not isTriggerLong ? color.new(color.green, 92) : na
bgWatchShort = showWatchBg and watchConfirmed and isWatchShort and not isTriggerShort ? color.new(color.red, 92) : na
bgTriggerLong = showTriggerBg and isTriggerLong ? color.new(color.green, 85) : na
bgTriggerShort = showTriggerBg and isTriggerShort ? color.new(color.red, 85) : na

bgcolor(bgWatchLong, title="Watch Long Background")
bgcolor(bgWatchShort, title="Watch Short Background")
bgcolor(bgTriggerLong, title="Trigger Long Background")
bgcolor(bgTriggerShort, title="Trigger Short Background")

// Метки (дирекционные для Watch)
if watchConfirmed and isWatchLong and barstate.islast and not isTriggerLong
    label.new(bar_index, low, "⚡WATCH LONG\nS:" + str.tostring(watchScoreLong), 
              style=label.style_label_up, color=color.green, textcolor=color.white, size=size.small)

if watchConfirmed and isWatchShort and barstate.islast and not isTriggerShort
    label.new(bar_index, high, "⚡WATCH SHORT\nS:" + str.tostring(watchScoreShort), 
              style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

if isTriggerLong and barstate.islast
    label.new(bar_index, low, "🚀 TRIGGER L\nS:" + str.tostring(watchScoreLong), 
              style=label.style_label_up, color=color.lime, textcolor=color.black, size=size.normal)

if isTriggerShort and barstate.islast
    label.new(bar_index, high, "🚀 TRIGGER S\nS:" + str.tostring(watchScoreShort), 
              style=label.style_label_down, color=color.fuchsia, textcolor=color.white, size=size.normal)

// Панель информации v1.1
if showPanel and barstate.islast
    var table infoTable = table.new(position.top_right, 2, 12, border_width=1, bgcolor=color.new(color.black, 80), border_color=color.gray)
    
    // Направление Watch
    watchDir = isWatchLong ? "LONG" : (isWatchShort ? "SHORT" : "---")
    watchDirColor = isWatchLong ? color.lime : (isWatchShort ? color.red : color.gray)
    table.cell(infoTable, 0, 0, "Watch:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 0, watchDir, text_color=watchDirColor, text_size=size.small)
    
    // Score (Long/Short)
    scoreDisplay = isWatchLong ? str.tostring(watchScoreLong) : (isWatchShort ? str.tostring(watchScoreShort) : "0")
    table.cell(infoTable, 0, 1, "Score:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 1, scoreDisplay, text_color=color.yellow, text_size=size.small)
    
    // Компрессия (True = 3 признака)
    table.cell(infoTable, 0, 2, "Compress:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 2, persistentCompression ? "✓" : "✗", text_color=persistentCompression ? color.lime : color.red, text_size=size.small)
    
    // BBWidth Z-Score
    table.cell(infoTable, 0, 3, "BW Z:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 3, str.tostring(bbWidthZ, "#.##"), text_color=bbWidthZ < bbWidthZThreshold ? color.lime : color.white, text_size=size.small)
    
    // ATR% Z-Score
    table.cell(infoTable, 0, 4, "ATR% Z:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 4, str.tostring(atrPctZ, "#.##"), text_color=atrPctZ < atrPctZThreshold ? color.lime : color.white, text_size=size.small)
    
    // Ribbon
    table.cell(infoTable, 0, 5, "Ribbon:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 5, ribbonTight ? "✓" : "✗", text_color=ribbonTight ? color.lime : color.red, text_size=size.small)
    
    // Dist to EMA200
    table.cell(infoTable, 0, 6, "Dist200:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 6, str.tostring(distTo200ATR, "#.##") + " ATR", text_color=nearEMA200 ? color.lime : color.white, text_size=size.small)
    
    // Slope200
    table.cell(infoTable, 0, 7, "Slope:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 7, slope200 > 0 ? "↑" : "↓", text_color=slope200 > 0 ? color.lime : color.red, text_size=size.small)
    
    // Volume Dry
    table.cell(infoTable, 0, 8, "Vol Dry:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 8, volDry ? "✓" : "✗", text_color=volDry ? color.lime : color.red, text_size=size.small)
    
    // VolZ
    table.cell(infoTable, 0, 9, "VolZ:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 9, str.tostring(volZ, "#.##"), text_color=volSpike ? color.lime : color.white, text_size=size.small)
    
    // CVD
    table.cell(infoTable, 0, 10, "CVD:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 10, cvdSlope > 0 ? "↑" : "↓", text_color=cvdSlope > 0 ? color.lime : color.red, text_size=size.small)
    
    // Debounce Counter
    table.cell(infoTable, 0, 11, "Debounce:", text_color=color.white, text_size=size.small)
    table.cell(infoTable, 1, 11, str.tostring(watchDebounceCounter) + "/" + str.tostring(debounceBarCount), text_color=watchConfirmed ? color.lime : color.gray, text_size=size.small)

// ════════════════════════════════════════════════════════════════════════════
// АЛЕРТЫ v1.1 (Directional)
// ════════════════════════════════════════════════════════════════════════════

// Используем alert() вместо alertcondition для динамических сообщений
if watchConfirmed and isWatchLong and barstate.isconfirmed
    alert("⚡ WATCH LONG: " + syminfo.ticker + " TF=" + timeframe.period + " Score=" + str.tostring(watchScoreLong) + " | BW_Z=" + str.tostring(bbWidthZ, "#.##") + " | ATR%_Z=" + str.tostring(atrPctZ, "#.##") + " | Persist=" + str.tostring(persistentCompression), alert.freq_once_per_bar)

if watchConfirmed and isWatchShort and barstate.isconfirmed
    alert("⚡ WATCH SHORT: " + syminfo.ticker + " TF=" + timeframe.period + " Score=" + str.tostring(watchScoreShort) + " | BW_Z=" + str.tostring(bbWidthZ, "#.##") + " | ATR%_Z=" + str.tostring(atrPctZ, "#.##") + " | Persist=" + str.tostring(persistentCompression), alert.freq_once_per_bar)

if isTriggerLong and barstate.isconfirmed
    alert("🚀 TRIGGER LONG: " + syminfo.ticker + " TF=" + timeframe.period + " Score=" + str.tostring(watchScoreLong) + " | Depth=" + str.tostring(distTo200ATR, "#.##") + "ATR | VolZ=" + str.tostring(volZ, "#.##"), alert.freq_once_per_bar)

if isTriggerShort and barstate.isconfirmed
    alert("🚀 TRIGGER SHORT: " + syminfo.ticker + " TF=" + timeframe.period + " Score=" + str.tostring(watchScoreShort) + " | Depth=" + str.tostring(distTo200ATR, "#.##") + "ATR | VolZ=" + str.tostring(volZ, "#.##"), alert.freq_once_per_bar)

// Простые alertcondition для быстрой настройки (статические сообщения)
alertcondition(isWatchLong, "Watch Long", "⚡ WATCH LONG: {{ticker}} on {{interval}}")
alertcondition(isWatchShort, "Watch Short", "⚡ WATCH SHORT: {{ticker}} on {{interval}}")
alertcondition(isTriggerLong, "Trigger Long", "🚀 TRIGGER LONG: {{ticker}} on {{interval}}")
alertcondition(isTriggerShort, "Trigger Short", "🚀 TRIGGER SHORT: {{ticker}} on {{interval}}")

// ════════════════════════════════════════════════════════════════════════════
// ВЫХОДНЫЕ СЕРИИ v1.1 (для экспорта/бэктеста)
// ════════════════════════════════════════════════════════════════════════════

// Scores
plot(watchScoreLong, "Watch Score Long", display=display.data_window)
plot(watchScoreShort, "Watch Score Short", display=display.data_window)

// Watch/Trigger states
plot(isWatchLong ? 1 : 0, "Is Watch Long", display=display.data_window)
plot(isWatchShort ? 1 : 0, "Is Watch Short", display=display.data_window)
plot(isTriggerLong ? 1 : 0, "Is Trigger Long", display=display.data_window)
plot(isTriggerShort ? 1 : 0, "Is Trigger Short", display=display.data_window)

// Compression metrics v1.1
plot(trueCompression ? 1 : 0, "True Compression (3 signs)", display=display.data_window)
plot(persistentCompression ? 1 : 0, "Persistent Compression", display=display.data_window)
plot(bbWidthZ, "BBWidth Z-Score", display=display.data_window)
plot(atrPctZ, "ATR% Z-Score", display=display.data_window)

// Core metrics
plot(distTo200ATR, "Dist to EMA200 (ATR)", display=display.data_window)
plot(slope200, "EMA200 Slope", display=display.data_window)
plot(volZ, "Volume Z-Score", display=display.data_window)
plot(volDry ? 1 : 0, "Volume Dry", display=display.data_window)
plot(cvdSlope, "CVD Slope", display=display.data_window)
plot(ribbonTight ? 1 : 0, "Ribbon Tight", display=display.data_window)
