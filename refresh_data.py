"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π

–ó–∞–ø—É—Å–∫:
    python refresh_data.py              # –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∑–∞ 10 –¥–Ω–µ–π
    python refresh_data.py NMRUSDT      # –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –∑–∞ 10 –¥–Ω–µ–π
    python refresh_data.py NMRUSDT 7    # –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –∑–∞ 7 –¥–Ω–µ–π
"""
import asyncio
import sys
from src.binance.client import BinanceClient
from src.binance.data_loader import DataLoader
from src.utils.config import config
from src.database.db import db
from src.database.models import Candle
from src.utils.logger import logger


async def refresh_data(symbol: str = None, days: int = 10):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    binance_client = BinanceClient(
        api_key=config.get('binance.api_key'),
        api_secret=config.get('binance.api_secret')
    )
    data_loader = DataLoader(binance_client)
    
    print(f"\n{'='*80}")
    print(f"üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –ë–î")
    print(f"{'='*80}\n")
    
    if symbol:
        # –û–±–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
        symbols = [symbol.upper()]
        print(f"üìä –°–∏–º–≤–æ–ª: {symbol.upper()}")
    else:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ë–î
        session = db.get_session()
        try:
            result = session.query(Candle.symbol).distinct().all()
            symbols = [row[0] for row in result]
            print(f"üìä –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ë–î: {len(symbols)}")
        finally:
            session.close()
    
    print(f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π")
    print(f"\n{'-'*80}\n")
    
    # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    total = len(symbols)
    for idx, sym in enumerate(symbols, 1):
        try:
            print(f"[{idx}/{total}] üîÑ {sym}...")
            await data_loader.refresh_recent_candles(sym, days=days)
            print(f"[{idx}/{total}] ‚úÖ {sym} - –ì–û–¢–û–í–û\n")
        except Exception as e:
            print(f"[{idx}/{total}] ‚ùå {sym} - –û–®–ò–ë–ö–ê: {e}\n")
            logger.error(f"Error refreshing {sym}: {e}")
    
    print(f"\n{'='*80}")
    print(f"‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"{'='*80}\n")
    
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
    print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ check_db_data.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    print()


async def main():
    """Main entry point"""
    symbol = None
    days = 10
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) > 1:
        symbol = sys.argv[1]
    
    if len(sys.argv) > 2:
        try:
            days = int(sys.argv[2])
        except ValueError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {sys.argv[2]}")
            print("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python refresh_data.py [SYMBOL] [DAYS]")
            print("   –ü—Ä–∏–º–µ—Ä: python refresh_data.py NMRUSDT 7")
            return
    
    await refresh_data(symbol, days)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
