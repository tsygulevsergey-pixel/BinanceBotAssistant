#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
–ü–∞—Ä—Å–∏—Ç –ª–æ–≥–∏ strategies_*.log –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

import re
from pathlib import Path
from collections import defaultdict
from datetime import datetime
import json

class LogAnalyzer:
    def __init__(self, log_dir='attached_assets'):
        self.log_dir = Path(log_dir)
        self.strategies = {
            'Liquidity Sweep': 0,
            'Break & Retest': 1,
            'Order Flow': 2,
            'MA/VWAP Pullback': 3,
            'Volume Profile': 4,
            'ATR Momentum': 5
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.patterns = {
            'signal_generated': re.compile(r'Signal generated: (.*?) \| (.*?) (LONG|SHORT).*?Score: ([\d.]+)'),
            'signal_details': re.compile(r'Entry: ([\d.]+).*?SL: ([\d.]+).*?TP1: ([\d.]+).*?TP2: ([\d.]+)', re.DOTALL),
            'regime': re.compile(r'Regime: (\w+)'),
            'bias': re.compile(r'BTC Bias: (\w+)'),
            'volume_ratio': re.compile(r'Volume Ratio: ([\d.]+)'),
            'exit': re.compile(r'(.*?) (LONG|SHORT).*?closed.*?(TP1|TP2|SL|BREAKEVEN|TIME_STOP).*?([\d.]+)%'),
            'strategy_disabled': re.compile(r'(.*?) strategy.*?(disabled|not active|skipped)', re.IGNORECASE),
            'filter_rejection': re.compile(r'(‚ùå|‚ö†Ô∏è|Rejected|Skipped|Failed).*?(\w+.*?)(?:\n|$)'),
            'adx_filter': re.compile(r'ADX.*?([\d.]+).*?<.*?([\d.]+)'),
            'volume_filter': re.compile(r'Volume.*?([\d.]+)x.*?<.*?([\d.]+)x'),
        }
    
    def find_log_files(self):
        """–ù–∞–π—Ç–∏ –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã strategies_*.log"""
        return sorted(self.log_dir.glob('strategies_*.log'), key=lambda x: x.stat().st_mtime, reverse=True)
    
    def parse_logs(self, max_files=None):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤"""
        log_files = self.find_log_files()
        
        if max_files:
            log_files = log_files[:max_files]
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(log_files)} –ª–æ–≥-—Ñ–∞–π–ª–æ–≤...")
        
        all_signals = []
        all_exits = []
        strategy_activity = defaultdict(int)
        filter_rejections = defaultdict(int)
        
        for log_file in log_files:
            print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {log_file.name} ({log_file.stat().st_size / 1024:.1f} KB)")
            
            try:
                with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                
                # –ü–∞—Ä—Å–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤
                for match in self.patterns['signal_generated'].finditer(content):
                    strategy_name = match.group(1)
                    symbol = match.group(2)
                    direction = match.group(3)
                    score = float(match.group(4))
                    
                    signal = {
                        'strategy': strategy_name,
                        'symbol': symbol,
                        'direction': direction,
                        'score': score,
                        'log_file': log_file.name
                    }
                    
                    # –ò—â–µ–º –¥–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    signal_pos = match.end()
                    nearby_text = content[signal_pos:signal_pos+500]
                    
                    # –†–µ–∂–∏–º
                    regime_match = self.patterns['regime'].search(nearby_text)
                    if regime_match:
                        signal['regime'] = regime_match.group(1)
                    
                    # Bias
                    bias_match = self.patterns['bias'].search(nearby_text)
                    if bias_match:
                        signal['bias'] = bias_match.group(1)
                    
                    # Volume ratio
                    vol_match = self.patterns['volume_ratio'].search(nearby_text)
                    if vol_match:
                        signal['volume_ratio'] = float(vol_match.group(1))
                    
                    all_signals.append(signal)
                    strategy_activity[strategy_name] += 1
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã—Ö–æ–¥–æ–≤
                for match in self.patterns['exit'].finditer(content):
                    symbol = match.group(1)
                    direction = match.group(2)
                    exit_type = match.group(3)
                    pnl = float(match.group(4))
                    
                    exit_data = {
                        'symbol': symbol,
                        'direction': direction,
                        'exit_type': exit_type,
                        'pnl_percent': pnl,
                        'log_file': log_file.name
                    }
                    
                    all_exits.append(exit_data)
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                for line in content.split('\n'):
                    # ADX —Ñ–∏–ª—å—Ç—Ä
                    adx_match = self.patterns['adx_filter'].search(line)
                    if adx_match:
                        filter_rejections['ADX_too_weak'] += 1
                    
                    # Volume —Ñ–∏–ª—å—Ç—Ä
                    vol_match = self.patterns['volume_filter'].search(line)
                    if vol_match:
                        filter_rejections['Volume_too_low'] += 1
                    
                    # –û–±—â–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    if any(word in line.lower() for word in ['rejected', 'failed', 'skipped', '–Ω–µ –ø—Ä–æ—à—ë–ª']):
                        if 'volume' in line.lower():
                            filter_rejections['Volume_filters'] += 1
                        elif 'adx' in line.lower():
                            filter_rejections['ADX_filters'] += 1
                        elif 'regime' in line.lower():
                            filter_rejections['Regime_filters'] += 1
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {log_file.name}: {e}")
        
        return {
            'signals': all_signals,
            'exits': all_exits,
            'strategy_activity': dict(strategy_activity),
            'filter_rejections': dict(filter_rejections)
        }
    
    def analyze_data(self, data):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        signals = data['signals']
        exits = data['exits']
        
        print(f"\n" + "="*80)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
        print(f"="*80)
        
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"-"*80)
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤—ã—Ö–æ–¥–æ–≤: {len(exits)}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        print(f"\n\nüìä –ê–ö–¢–ò–í–ù–û–°–¢–¨ –°–¢–†–ê–¢–ï–ì–ò–ô")
        print(f"-"*80)
        
        print(f"\n{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<30} {'–°–∏–≥–Ω–∞–ª–æ–≤':<15} {'–°—Ç–∞—Ç—É—Å'}")
        print(f"-"*80)
        
        total_generated = sum(data['strategy_activity'].values())
        
        for strategy_name in self.strategies.keys():
            count = data['strategy_activity'].get(strategy_name, 0)
            percentage = (count / total_generated * 100) if total_generated > 0 else 0
            
            if count == 0:
                status = "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            elif count < 5:
                status = f"‚ö†Ô∏è –ú–ê–õ–û –°–ò–ì–ù–ê–õ–û–í ({percentage:.1f}%)"
            else:
                status = f"‚úÖ –ê–ö–¢–ò–í–ù–ê ({percentage:.1f}%)"
            
            print(f"{strategy_name:<30} {count:<15} {status}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–∂–∏–º–∞–º
        print(f"\n\nüåä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –†–ï–ñ–ò–ú–ê–ú")
        print(f"-"*80)
        
        regime_counts = defaultdict(int)
        for signal in signals:
            if 'regime' in signal:
                regime_counts[signal['regime']] += 1
        
        for regime, count in sorted(regime_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(signals) * 100) if signals else 0
            print(f"{regime:<20} {count:<10} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ bias
        print(f"\n\nüìâ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û BTC BIAS")
        print(f"-"*80)
        
        bias_counts = defaultdict(int)
        for signal in signals:
            if 'bias' in signal:
                bias_counts[signal['bias']] += 1
        
        for bias, count in sorted(bias_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(signals) * 100) if signals else 0
            print(f"{bias:<20} {count:<10} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        print(f"\n\nüéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø–ú")
        print(f"-"*80)
        
        direction_counts = defaultdict(int)
        for signal in signals:
            direction_counts[signal['direction']] += 1
        
        for direction, count in sorted(direction_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(signals) * 100) if signals else 0
            print(f"{direction:<20} {count:<10} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ Score
        print(f"\n\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï SCORE")
        print(f"-"*80)
        
        if signals:
            scores = [s['score'] for s in signals if 'score' in s]
            if scores:
                print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score: {min(scores):.1f}")
                print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π score: {max(scores):.1f}")
                print(f"–°—Ä–µ–¥–Ω–∏–π score: {sum(scores)/len(scores):.2f}")
                
                score_ranges = {
                    '< 2.0': len([s for s in scores if s < 2.0]),
                    '2.0-3.0': len([s for s in scores if 2.0 <= s < 3.0]),
                    '3.0-4.0': len([s for s in scores if 3.0 <= s < 4.0]),
                    '>= 4.0': len([s for s in scores if s >= 4.0])
                }
                
                print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º:")
                for range_name, count in score_ranges.items():
                    percentage = (count / len(scores) * 100) if scores else 0
                    print(f"  {range_name:<15} {count:<10} ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–æ–≤
        if exits:
            print(f"\n\nüö™ –ê–ù–ê–õ–ò–ó –í–´–•–û–î–û–í")
            print(f"-"*80)
            
            exit_type_counts = defaultdict(list)
            for exit_data in exits:
                exit_type_counts[exit_data['exit_type']].append(exit_data['pnl_percent'])
            
            print(f"\n{'–¢–∏–ø –≤—ã—Ö–æ–¥–∞':<20} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<15} {'Avg PnL%':<15} {'Total PnL%'}")
            print(f"-"*80)
            
            for exit_type, pnls in sorted(exit_type_counts.items(), key=lambda x: sum(x[1]), reverse=True):
                avg_pnl = sum(pnls) / len(pnls) if pnls else 0
                total_pnl = sum(pnls)
                count = len(pnls)
                
                rating = "‚úÖ" if avg_pnl > 0 else "‚ùå"
                
                print(f"{exit_type:<20} {count:<15} {avg_pnl:<+15.2f} {total_pnl:+.2f}% {rating}")
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PnL
            all_pnls = [e['pnl_percent'] for e in exits]
            positive_pnls = [p for p in all_pnls if p > 0]
            negative_pnls = [p for p in all_pnls if p <= 0]
            
            win_rate = (len(positive_pnls) / len(all_pnls) * 100) if all_pnls else 0
            
            print(f"\nüìà –û–ë–©–ò–ô PnL –ê–ù–ê–õ–ò–ó:")
            print(f"-"*80)
            print(f"Win Rate: {win_rate:.1f}% ({len(positive_pnls)} –ø–æ–±–µ–¥ / {len(exits)} —Å–¥–µ–ª–æ–∫)")
            print(f"–°—É–º–º–∞—Ä–Ω—ã–π PnL: {sum(all_pnls):+.2f}%")
            print(f"–°—Ä–µ–¥–Ω–∏–π PnL: {sum(all_pnls)/len(all_pnls):+.2f}%")
            
            if positive_pnls:
                print(f"–°—Ä–µ–¥–Ω—è—è –ø–æ–±–µ–¥–∞: {sum(positive_pnls)/len(positive_pnls):+.2f}%")
                print(f"–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {max(positive_pnls):+.2f}%")
            
            if negative_pnls:
                print(f"–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {sum(negative_pnls)/len(negative_pnls):+.2f}%")
                print(f"–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {min(negative_pnls):+.2f}%")
            
            if positive_pnls and negative_pnls:
                profit_factor = abs(sum(positive_pnls) / sum(negative_pnls))
                print(f"Profit Factor: {profit_factor:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if data['filter_rejections']:
            print(f"\n\nüö´ –û–¢–ö–õ–û–ù–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–ê–ú–ò")
            print(f"-"*80)
            
            for filter_name, count in sorted(data['filter_rejections'].items(), key=lambda x: x[1], reverse=True):
                print(f"{filter_name:<30} {count} —Ä–∞–∑")
        
        # Volume Ratio –∞–Ω–∞–ª–∏–∑
        print(f"\n\nüìä –ê–ù–ê–õ–ò–ó VOLUME RATIO")
        print(f"-"*80)
        
        volume_ratios = [s.get('volume_ratio') for s in signals if 'volume_ratio' in s]
        if volume_ratios:
            print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {min(volume_ratios):.2f}x")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max(volume_ratios):.2f}x")
            print(f"–°—Ä–µ–¥–Ω–∏–π: {sum(volume_ratios)/len(volume_ratios):.2f}x")
            
            vol_distribution = {
                '< 1.0x': len([v for v in volume_ratios if v < 1.0]),
                '1.0-1.5x': len([v for v in volume_ratios if 1.0 <= v < 1.5]),
                '>= 1.5x': len([v for v in volume_ratios if v >= 1.5])
            }
            
            print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
            for range_name, count in vol_distribution.items():
                percentage = (count / len(volume_ratios) * 100) if volume_ratios else 0
                print(f"  {range_name:<15} {count:<10} ({percentage:.1f}%)")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ volume ratio –≤ –ª–æ–≥–∞—Ö")
        
        print(f"\n" + "="*80)
        print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print(f"="*80 + "\n")
        
        return {
            'signals_count': len(signals),
            'exits_count': len(exits),
            'win_rate': win_rate if exits else 0,
            'total_pnl': sum(all_pnls) if exits else 0
        }


if __name__ == "__main__":
    analyzer = LogAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüîç –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô –ü–û –õ–û–ì-–§–ê–ô–õ–ê–ú")
    print("="*80)
    
    data = analyzer.parse_logs(max_files=5)
    results = analyzer.analyze_data(data)
    
    print(f"\nüìã –ö–†–ê–¢–ö–ò–ï –ò–¢–û–ì–ò:")
    print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {results['signals_count']}")
    print(f"   –ó–∞–∫—Ä—ã—Ç–æ —Å–¥–µ–ª–æ–∫: {results['exits_count']}")
    if results['exits_count'] > 0:
        print(f"   Win Rate: {results['win_rate']:.1f}%")
        print(f"   –°—É–º–º–∞—Ä–Ω—ã–π PnL: {results['total_pnl']:+.2f}%")
