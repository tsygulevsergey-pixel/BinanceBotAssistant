#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ Action Price
"""
import sqlite3
import sys

DB_PATH = "data/trading_bot.db"

def clear_all_signals():
    """–£–¥–∞–ª–∏—Ç—å –í–°–ï —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –ë–î (–æ–±—ã—á–Ω—ã–µ + Action Price)"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    cursor.execute("SELECT COUNT(*) FROM signals")
    main_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM action_price_signals")
    ap_count = cursor.fetchone()[0]
    
    total = main_count + ap_count
    
    print(f"üìä –°–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î:")
    print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {main_count}")
    print(f"   ‚Ä¢ Action Price: {ap_count}")
    print(f"   ‚Ä¢ –í–°–ï–ì–û: {total}")
    
    if total == 0:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞")
        conn.close()
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –í–°–ï {total} —Å–∏–≥–Ω–∞–ª–æ–≤? (yes/no): ")
    if response.lower() != 'yes':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        conn.close()
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    cursor.execute("DELETE FROM signals")
    deleted_main = cursor.rowcount
    
    cursor.execute("DELETE FROM action_price_signals")
    deleted_ap = cursor.rowcount
    
    cursor.execute("DELETE FROM signal_locks")
    
    conn.commit()
    
    print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ:")
    print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {deleted_main}")
    print(f"   ‚Ä¢ Action Price: {deleted_ap}")
    print(f"   ‚Ä¢ –í–°–ï–ì–û: {deleted_main + deleted_ap}")
    print(f"\nüîì –í—Å–µ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
    
    conn.close()

def clear_by_status(status, signal_type='all'):
    """
    –£–¥–∞–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    
    Args:
        status: —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞ (WIN/LOSS/TIME_STOP/ACTIVE/PENDING)
        signal_type: 'main' | 'action_price' | 'all'
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    deleted_main = 0
    deleted_ap = 0
    
    # –ü–æ–¥—Å—á–µ—Ç
    if signal_type in ['main', 'all']:
        cursor.execute("SELECT COUNT(*) FROM signals WHERE status = ?", (status,))
        main_count = cursor.fetchone()[0]
    else:
        main_count = 0
    
    if signal_type in ['action_price', 'all']:
        cursor.execute("SELECT COUNT(*) FROM action_price_signals WHERE status = ?", (status,))
        ap_count = cursor.fetchone()[0]
    else:
        ap_count = 0
    
    total = main_count + ap_count
    
    print(f"üìä –°–∏–≥–Ω–∞–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':")
    if signal_type in ['main', 'all']:
        print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {main_count}")
    if signal_type in ['action_price', 'all']:
        print(f"   ‚Ä¢ Action Price: {ap_count}")
    print(f"   ‚Ä¢ –í–°–ï–ì–û: {total}")
    
    if total == 0:
        print(f"‚úÖ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
        conn.close()
        return
    
    response = input(f"\n‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å {total} —Å–∏–≥–Ω–∞–ª–æ–≤? (yes/no): ")
    if response.lower() != 'yes':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        conn.close()
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    if signal_type in ['main', 'all']:
        cursor.execute("DELETE FROM signals WHERE status = ?", (status,))
        deleted_main = cursor.rowcount
    
    if signal_type in ['action_price', 'all']:
        cursor.execute("DELETE FROM action_price_signals WHERE status = ?", (status,))
        deleted_ap = cursor.rowcount
    
    conn.commit()
    
    print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ:")
    if signal_type in ['main', 'all']:
        print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {deleted_main}")
    if signal_type in ['action_price', 'all']:
        print(f"   ‚Ä¢ Action Price: {deleted_ap}")
    print(f"   ‚Ä¢ –í–°–ï–ì–û: {deleted_main + deleted_ap}")
    
    conn.close()

def clear_action_price_only():
    """–£–¥–∞–ª–∏—Ç—å –¢–û–õ–¨–ö–û Action Price —Å–∏–≥–Ω–∞–ª—ã"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM action_price_signals")
    count = cursor.fetchone()[0]
    
    print(f"üìä Action Price —Å–∏–≥–Ω–∞–ª–æ–≤: {count}")
    
    if count == 0:
        print("‚úÖ –ù–µ—Ç Action Price —Å–∏–≥–Ω–∞–ª–æ–≤")
        conn.close()
        return
    
    response = input(f"\n‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –≤—Å–µ {count} Action Price —Å–∏–≥–Ω–∞–ª–æ–≤? (yes/no): ")
    if response.lower() != 'yes':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        conn.close()
        return
    
    cursor.execute("DELETE FROM action_price_signals")
    deleted = cursor.rowcount
    conn.commit()
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ Action Price —Å–∏–≥–Ω–∞–ª–æ–≤: {deleted}")
    conn.close()

def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    cursor.execute("""
        SELECT status, COUNT(*) as count 
        FROM signals 
        GROUP BY status
    """)
    main_stats = cursor.fetchall()
    
    print("\nüîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    print("-" * 30)
    main_total = 0
    if main_stats:
        for status, count in main_stats:
            print(f"  {status}: {count}")
            main_total += count
    else:
        print("  (–ø—É—Å—Ç–æ)")
    print("-" * 30)
    print(f"  –í–°–ï–ì–û: {main_total}")
    
    # Action Price
    cursor.execute("""
        SELECT status, COUNT(*) as count 
        FROM action_price_signals 
        GROUP BY status
    """)
    ap_stats = cursor.fetchall()
    
    print("\nüéØ Action Price:")
    print("-" * 30)
    ap_total = 0
    if ap_stats:
        for status, count in ap_stats:
            print(f"  {status}: {count}")
            ap_total += count
    else:
        print("  (–ø—É—Å—Ç–æ)")
    print("-" * 30)
    print(f"  –í–°–ï–ì–û: {ap_total}")
    
    # –û–±—â–∏–π –∏—Ç–æ–≥
    print("\n" + "=" * 50)
    print(f"üìä –û–ë–©–ò–ô –ò–¢–û–ì: {main_total + ap_total} —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("=" * 50)
    
    conn.close()

if __name__ == "__main__":
    print("üóëÔ∏è  –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 50)
    
    show_stats()
    
    print("\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –£–¥–∞–ª–∏—Ç—å –í–°–ï —Å–∏–≥–Ω–∞–ª—ã (–æ–±—ã—á–Ω—ã–µ + Action Price)")
    print("2. –£–¥–∞–ª–∏—Ç—å –¢–û–õ–¨–ö–û Action Price —Å–∏–≥–Ω–∞–ª—ã")
    print("3. –£–¥–∞–ª–∏—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É - –í–°–ï —Ç–∏–ø—ã (WIN/LOSS/TIME_STOP)")
    print("4. –£–¥–∞–ª–∏—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É - –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("5. –£–¥–∞–ª–∏—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É - –¢–û–õ–¨–ö–û Action Price")
    print("6. –£–¥–∞–ª–∏—Ç—å ACTIVE/PENDING - –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª—ã")
    print("7. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ")
    
    if choice == "1":
        clear_all_signals()
    elif choice == "2":
        clear_action_price_only()
    elif choice == "3":
        status = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (WIN/LOSS/TIME_STOP): ").upper()
        clear_by_status(status, 'all')
    elif choice == "4":
        status = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (WIN/LOSS/TIME_STOP): ").upper()
        clear_by_status(status, 'main')
    elif choice == "5":
        status = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (WIN/LOSS/TIME_STOP): ").upper()
        clear_by_status(status, 'action_price')
    elif choice == "6":
        status = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (ACTIVE/PENDING): ").upper()
        clear_by_status(status, 'all')
    elif choice == "7":
        show_stats()
    elif choice == "0":
        print("üëã –í—ã—Ö–æ–¥")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
