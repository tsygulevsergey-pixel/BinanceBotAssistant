"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
–ó–∞–ø—É—Å–∫: python check_db_data.py
"""
import sqlite3
from datetime import datetime

# –ü—É—Ç—å –∫ –ë–î
DB_PATH = 'data/trading_bot.db'

def check_candles_data(symbol='NMRUSDT', timeframe='15m'):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –ë–î"""
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print(f"\n{'='*80}")
    print(f"–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•: {symbol} {timeframe}")
    print(f"{'='*80}\n")
    
    # 1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
    print("1Ô∏è‚É£ –ö–û–õ–ò–ß–ï–°–¢–í–û –°–í–ï–ß–ï–ô:")
    cursor.execute("""
        SELECT COUNT(*) as total_candles 
        FROM candles 
        WHERE symbol = ? AND timeframe = ?
    """, (symbol, timeframe))
    result = cursor.fetchone()
    total_candles = result[0] if result else 0
    print(f"   –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {total_candles}")
    
    if total_candles < 200:
        print(f"   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–µ–Ω—å—à–µ 200 —Å–≤–µ—á–µ–π! EMA200 –±—É–¥–µ—Ç –Ω–µ—Ç–æ—á–Ω–æ–π.")
    else:
        print(f"   ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è EMA200 (–º–∏–Ω–∏–º—É–º 200)")
    
    # 2. –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    print(f"\n2Ô∏è‚É£ –î–ò–ê–ü–ê–ó–û–ù –î–ê–¢:")
    cursor.execute("""
        SELECT 
            MIN(open_time) as oldest_candle,
            MAX(open_time) as newest_candle
        FROM candles 
        WHERE symbol = ? AND timeframe = ?
    """, (symbol, timeframe))
    result = cursor.fetchone()
    
    if result and result[0]:
        oldest = datetime.fromisoformat(result[0].replace('Z', '+00:00'))
        newest = datetime.fromisoformat(result[1].replace('Z', '+00:00'))
        print(f"   –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è: {oldest.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   –°–∞–º–∞—è –Ω–æ–≤–∞—è:  {newest.strftime('%Y-%m-%d %H:%M:%S')}")
        
        days_diff = (newest - oldest).days
        print(f"   –ü–µ—Ä–∏–æ–¥: {days_diff} –¥–Ω–µ–π")
    else:
        print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")
        conn.close()
        return
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    print(f"\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–ï–õ–û–í (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏):")
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ timestamp –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É
    cursor.execute("""
        SELECT open_time
        FROM candles
        WHERE symbol = ? AND timeframe = ?
        ORDER BY open_time
    """, (symbol, timeframe))
    
    timestamps = [row[0] for row in cursor.fetchall()]
    
    gaps_found = 0
    max_gap_minutes = 0
    gap_details = []
    
    for i in range(1, len(timestamps)):
        prev_time = datetime.fromisoformat(timestamps[i-1].replace('Z', '+00:00'))
        curr_time = datetime.fromisoformat(timestamps[i].replace('Z', '+00:00'))
        
        diff_minutes = (curr_time - prev_time).total_seconds() / 60
        
        if diff_minutes > 15:
            gaps_found += 1
            max_gap_minutes = max(max_gap_minutes, diff_minutes)
            
            if len(gap_details) < 5:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–±–µ–ª–æ–≤
                gap_details.append({
                    'from': prev_time,
                    'to': curr_time,
                    'minutes': int(diff_minutes),
                    'missing_candles': int((diff_minutes - 15) / 15)
                })
    
    if gaps_found == 0:
        print(f"   ‚úÖ –ü—Ä–æ–±–µ–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ —Ü–µ–ª–æ—Å—Ç–Ω—ã–µ.")
    else:
        print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–µ–ª–æ–≤: {gaps_found}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–µ–ª: {int(max_gap_minutes)} –º–∏–Ω—É—Ç ({int(max_gap_minutes/60)} —á–∞—Å–æ–≤)")
        
        if gap_details:
            print(f"\n   –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–µ–ª–æ–≤ (–ø–µ—Ä–≤—ã–µ 5):")
            for idx, gap in enumerate(gap_details, 1):
                print(f"   {idx}. {gap['from'].strftime('%Y-%m-%d %H:%M')} ‚Üí "
                      f"{gap['to'].strftime('%Y-%m-%d %H:%M')} "
                      f"({gap['minutes']} –º–∏–Ω, –ø—Ä–æ–ø—É—â–µ–Ω–æ {gap['missing_candles']} —Å–≤–µ—á–µ–π)")
    
    # 4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
    print(f"\n4Ô∏è‚É£ –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–í–ï–ß–ï–ô:")
    cursor.execute("""
        SELECT open_time, open, high, low, close, volume
        FROM candles
        WHERE symbol = ? AND timeframe = ?
        ORDER BY open_time DESC
        LIMIT 5
    """, (symbol, timeframe))
    
    candles = cursor.fetchall()
    print(f"   {'–í—Ä–µ–º—è':<20} {'Open':<12} {'High':<12} {'Low':<12} {'Close':<12} {'Volume':<15}")
    print(f"   {'-'*83}")
    
    for candle in candles:
        time_str = datetime.fromisoformat(candle[0].replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M')
        print(f"   {time_str:<20} {candle[1]:<12.5f} {candle[2]:<12.5f} {candle[3]:<12.5f} {candle[4]:<12.5f} {candle[5]:<15.2f}")
    
    # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    print(f"\n5Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –°–ò–ú–í–û–õ–ê–ú ({timeframe}):")
    cursor.execute("""
        SELECT symbol, COUNT(*) as count
        FROM candles
        WHERE timeframe = ?
        GROUP BY symbol
        ORDER BY count DESC
        LIMIT 10
    """, (timeframe,))
    
    symbols = cursor.fetchall()
    print(f"   {'–°–∏–º–≤–æ–ª':<15} {'–°–≤–µ—á–µ–π':<10}")
    print(f"   {'-'*25}")
    for sym in symbols:
        status = '‚úÖ' if sym[1] >= 200 else '‚ö†Ô∏è'
        print(f"   {sym[0]:<15} {sym[1]:<10} {status}")
    
    conn.close()
    
    print(f"\n{'='*80}\n")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
    
    if total_candles < 200:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ EMA200")
        print("   ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    elif gaps_found > 0:
        print("   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö - EMA200 –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π")
        print("   ‚Üí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ DataLoader –Ω–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
    else:
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –Ω–æ—Ä–º–µ! EMA200 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–Ω–æ–π")
        print("   ‚Üí –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å Binance –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –º–µ—Ç–æ–¥–µ —Ä–∞—Å—á–µ—Ç–∞ pandas-ta")
    
    print()

if __name__ == '__main__':
    import sys
    
    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∏–º–≤–æ–ª –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    symbol = sys.argv[1] if len(sys.argv) > 1 else 'NMRUSDT'
    timeframe = sys.argv[2] if len(sys.argv) > 2 else '15m'
    
    try:
        check_candles_data(symbol, timeframe)
    except sqlite3.OperationalError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å –ë–î '{DB_PATH}'")
        print(f"   {e}")
        print(f"\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print(f"   1. –§–∞–π–ª –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print(f"   2. –ü—É—Ç—å –∫ –ë–î –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (—Å–µ–π—á–∞—Å: {DB_PATH})")
        print()
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
