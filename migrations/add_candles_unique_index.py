"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ —Å–≤–µ—á–∏
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
- –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å)
- –°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ü–û–°–õ–ï –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞!
"""
import sqlite3
import os
import sys

def check_duplicates(cursor):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ candles"""
    cursor.execute("""
        SELECT symbol, timeframe, open_time, COUNT(*) as cnt
        FROM candles
        GROUP BY symbol, timeframe, open_time
        HAVING COUNT(*) > 1
        ORDER BY cnt DESC
        LIMIT 10
    """)
    
    duplicates = cursor.fetchall()
    return duplicates

def count_total_duplicates(cursor):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    cursor.execute("""
        SELECT COUNT(*) as dup_groups, SUM(cnt - 1) as dup_records
        FROM (
            SELECT COUNT(*) as cnt
            FROM candles
            GROUP BY symbol, timeframe, open_time
            HAVING COUNT(*) > 1
        )
    """)
    
    result = cursor.fetchone()
    return result if result else (0, 0)

def remove_duplicates(cursor):
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è –∑–∞–ø–∏—Å—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º ID (—Å–∞–º—É—é —Å–≤–µ–∂—É—é)"""
    cursor.execute("""
        DELETE FROM candles
        WHERE id NOT IN (
            SELECT MAX(id)
            FROM candles
            GROUP BY symbol, timeframe, open_time
        )
    """)
    
    return cursor.rowcount

def create_unique_index(cursor):
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ (symbol, timeframe, open_time)"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        cursor.execute("DROP INDEX IF EXISTS idx_candles_symbol_timeframe_time")
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        cursor.execute("""
            CREATE UNIQUE INDEX idx_candles_symbol_timeframe_time 
            ON candles (symbol, timeframe, open_time)
        """)
        
        return True
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        return False

def apply_migration():
    db_path = "data/trading_bot.db"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Ö–æ—Ç—è –±—ã —Ä–∞–∑!")
        return False
    
    print("=" * 70)
    print("üîß –ú–ò–ì–†–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ —Å–≤–µ—á–∏")
    print("=" * 70)
    print()
    
    try:
        conn = sqlite3.connect(db_path, timeout=30)
        cursor = conn.cursor()
        
        # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        print("üìä –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        print()
        
        dup_groups, dup_records = count_total_duplicates(cursor)
        
        if dup_groups == 0:
            print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
            print()
        else:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
            print(f"   ‚Ä¢ –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {dup_groups}")
            print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {dup_records}")
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            duplicates = check_duplicates(cursor)
            print("   –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—Ç–æ–ø-10):")
            for symbol, timeframe, open_time, count in duplicates[:5]:
                print(f"   ‚Ä¢ {symbol} {timeframe} {open_time}: {count} –∫–æ–ø–∏–π")
            print()
            
            # –®–ê–ì 2: –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            print("üßπ –®–ê–ì 2: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
            print("   –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã...")
            print()
            
            deleted_count = remove_duplicates(cursor)
            
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã
            dup_groups_after, _ = count_total_duplicates(cursor)
            if dup_groups_after == 0:
                print("‚úÖ –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
                print()
            else:
                print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {dup_groups_after}")
                print("   –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
                return False
        
        # –®–ê–ì 3: –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        print("üîí –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
        print()
        
        if create_unique_index(cursor):
            print("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("=" * 70)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–ê!")
        print("=" * 70)
        print()
        print("–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:")
        print("  ‚úì –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–≤–µ—á–µ–π")
        print("  ‚úì –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (symbol, timeframe, open_time)")
        print("  ‚úì –¢–µ–ø–µ—Ä—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã")
        print()
        print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
        print("  ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ - –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ë–´–°–¢–†–ï–ï!")
        print()
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ").lower().strip()
    
    if response in ['yes', 'y', '–¥–∞', '–¥']:
        success = apply_migration()
        sys.exit(0 if success else 1)
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
