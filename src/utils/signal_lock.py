"""
–°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª–∏—Ç–∏–∫–∏ "1 —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ —Å–∏–º–≤–æ–ª"
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Redis (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏ SQLite (fallback)

–õ–æ–≥–∏–∫–∞:
- –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º–æ–∂–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥–∞–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
- –û–¥–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å >1 –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Ç—É –∂–µ –º–æ–Ω–µ—Ç—É+–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –µ—ë —Å–∏–≥–Ω–∞–ª–∞
"""

import hashlib
from datetime import datetime, timedelta
from typing import Optional
import pytz

try:
    import redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False

from src.utils.config import config
from src.utils.logger import logger
from src.database.db import db
from src.database.models import SignalLock


class SignalLockManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.lock_ttl = config.get('telegram.lock_ttl', 3600)  # seconds
        self.redis_client = None
        self.use_redis = False
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
        if REDIS_AVAILABLE:
            try:
                redis_host = config.get('redis.host', 'localhost')
                redis_port = config.get('redis.port', 6379)
                redis_db = config.get('redis.db', 0)
                redis_password = config.get('redis.password', None)
                
                self.redis_client = redis.Redis(
                    host=redis_host,
                    port=redis_port,
                    db=redis_db,
                    password=redis_password,
                    decode_responses=True,
                    socket_timeout=2,
                    socket_connect_timeout=2
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                self.redis_client.ping()
                self.use_redis = True
                logger.info(f"‚úÖ Redis connected at {redis_host}:{redis_port}")
            except Exception as e:
                logger.warning(f"Redis unavailable ({e}), using SQLite fallback for signal locks")
                self.redis_client = None
                self.use_redis = False
        else:
            logger.warning("Redis library not available, using SQLite fallback for signal locks")
    
    def _generate_lock_key(self, symbol: str, direction: str = None, strategy_name: str = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT) - –µ—Å–ª–∏ None, —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –µ—Å–ª–∏ None, –±–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        if direction and strategy_name:
            return f"signal_lock:{symbol}:{direction}:{strategy_name}"
        elif direction:
            return f"signal_lock:{symbol}:{direction}"
        return f"signal_lock:{symbol}"
    
    def acquire_lock(self, symbol: str, direction: str, strategy_name: str) -> bool:
        """
        –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT)
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, False –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        if self.use_redis:
            return self._acquire_lock_redis(symbol, direction, strategy_name)
        else:
            return self._acquire_lock_sqlite(symbol, direction, strategy_name)
    
    def _acquire_lock_redis(self, symbol: str, direction: str, strategy_name: str) -> bool:
        """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ Redis"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º direction –∏ strategy_name –≤ –∫–ª—é—á–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö locks –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            key = self._generate_lock_key(symbol, direction, strategy_name)
            lock_data = f"{strategy_name}:{direction}"
            
            # SET NX EX - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å TTL
            result = self.redis_client.set(
                key,
                lock_data,
                nx=True,  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
                ex=self.lock_ttl  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            )
            
            if result:
                logger.info(f"üîí Lock acquired: {symbol} {direction} ({strategy_name}) TTL={self.lock_ttl}s")
                return True
            else:
                existing = self.redis_client.get(key)
                logger.warning(f"‚ùå Lock denied: {symbol} {direction} already locked by {existing}")
                return False
        except Exception as e:
            logger.error(f"Redis lock error for {symbol} {direction}: {e}")
            # Fallback to SQLite on Redis error
            return self._acquire_lock_sqlite(symbol, direction, strategy_name)
    
    def _acquire_lock_sqlite(self, symbol: str, direction: str, strategy_name: str) -> bool:
        """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ SQLite"""
        session = db.get_session()
        try:
            now = datetime.now(pytz.UTC)
            
            # –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            expired_threshold = now - timedelta(seconds=self.lock_ttl)
            session.query(SignalLock).filter(
                SignalLock.created_at < expired_threshold
            ).delete()
            session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            existing_lock = session.query(SignalLock).filter(
                SignalLock.symbol == symbol,
                SignalLock.direction == direction,
                SignalLock.strategy_name == strategy_name
            ).first()
            
            if existing_lock:
                logger.warning(
                    f"‚ùå Lock denied: {symbol} {direction} already locked by "
                    f"{existing_lock.strategy_name}"
                )
                return False
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            new_lock = SignalLock(
                symbol=symbol,
                direction=direction,
                strategy_name=strategy_name,
                created_at=now
            )
            session.add(new_lock)
            session.commit()
            
            logger.info(f"üîí Lock acquired (SQLite): {symbol} {direction} ({strategy_name}) TTL={self.lock_ttl}s")
            return True
            
        except Exception as e:
            session.rollback()
            logger.error(f"SQLite lock error for {symbol} {direction}: {e}")
            return False
        finally:
            session.close()
    
    def release_lock(self, symbol: str, direction: str = None, strategy_name: str = None):
        """
        –û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT) - –µ—Å–ª–∏ None, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤—Å–µ locks —Å–∏–º–≤–æ–ª–∞
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –µ—Å–ª–∏ None, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤—Å–µ locks –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        if self.use_redis:
            self._release_lock_redis(symbol, direction, strategy_name)
        else:
            self._release_lock_sqlite(symbol, direction, strategy_name)
    
    def _release_lock_redis(self, symbol: str, direction: str = None, strategy_name: str = None):
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ Redis"""
        try:
            if direction and strategy_name:
                # –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                key = self._generate_lock_key(symbol, direction, strategy_name)
                deleted = self.redis_client.delete(key)
                if deleted:
                    logger.info(f"üîì Lock released: {symbol} {direction} ({strategy_name})")
            elif direction:
                # –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                pattern = f"signal_lock:{symbol}:{direction}:*"
                keys = self.redis_client.keys(pattern)
                if keys:
                    deleted = self.redis_client.delete(*keys)
                    logger.info(f"üîì Locks released: {symbol} {direction} ({deleted} locks)")
            else:
                # –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Å–µ locks –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (–≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
                pattern = f"signal_lock:{symbol}:*"
                keys = self.redis_client.keys(pattern)
                if keys:
                    deleted = self.redis_client.delete(*keys)
                    logger.info(f"üîì Locks released: {symbol} ({deleted} locks)")
        except Exception as e:
            logger.error(f"Redis unlock error for {symbol}: {e}")
    
    def _release_lock_sqlite(self, symbol: str, direction: str = None, strategy_name: str = None):
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ SQLite"""
        session = db.get_session()
        try:
            query = session.query(SignalLock).filter(SignalLock.symbol == symbol)
            
            if direction and strategy_name:
                # –û—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                query = query.filter(
                    SignalLock.direction == direction,
                    SignalLock.strategy_name == strategy_name
                )
                deleted = query.delete()
                session.commit()
                if deleted:
                    logger.info(f"üîì Lock released (SQLite): {symbol} {direction} ({strategy_name})")
            elif direction:
                # –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                query = query.filter(SignalLock.direction == direction)
                deleted = query.delete()
                session.commit()
                if deleted:
                    logger.info(f"üîì Locks released (SQLite): {symbol} {direction} ({deleted} locks)")
            else:
                # –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Å–µ locks –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                deleted = query.delete()
                session.commit()
                if deleted:
                    logger.info(f"üîì Locks released (SQLite): {symbol} ({deleted} locks)")
        except Exception as e:
            session.rollback()
            logger.error(f"SQLite unlock error for {symbol}: {e}")
        finally:
            session.close()
    
    def get_active_locks_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        if self.use_redis:
            try:
                pattern = "signal_lock:*"
                keys = self.redis_client.keys(pattern)
                return len(keys)
            except Exception as e:
                logger.error(f"Error counting Redis locks: {e}")
                return 0
        else:
            session = db.get_session()
            try:
                now = datetime.now(pytz.UTC)
                expired_threshold = now - timedelta(seconds=self.lock_ttl)
                count = session.query(SignalLock).filter(
                    SignalLock.created_at >= expired_threshold
                ).count()
                return count
            finally:
                session.close()
    
    def cleanup_expired_locks(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite, Redis –æ—á–∏—â–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"""
        if not self.use_redis:
            session = db.get_session()
            try:
                now = datetime.now(pytz.UTC)
                expired_threshold = now - timedelta(seconds=self.lock_ttl)
                deleted = session.query(SignalLock).filter(
                    SignalLock.created_at < expired_threshold
                ).delete()
                session.commit()
                if deleted > 0:
                    logger.info(f"üßπ Cleaned up {deleted} expired signal locks")
            except Exception as e:
                session.rollback()
                logger.error(f"Error cleaning up locks: {e}")
            finally:
                session.close()
