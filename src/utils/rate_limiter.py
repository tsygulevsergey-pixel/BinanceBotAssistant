import asyncio
import time
from collections import deque
from typing import Dict, Optional, Any
from src.utils.logger import logger
from src.utils.config import config


class RateLimiter:
    def __init__(self, weight_limit: Optional[int] = None, window_seconds: int = 60, safety_threshold: float = 0.55):
        self.weight_limit = weight_limit or config.get('binance.rest_weight_limit', 1100)
        self.window_seconds = window_seconds
        self.safety_threshold = safety_threshold  # 55% –ø–æ—Ä–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (1320/2400, –±—É—Ñ–µ—Ä 1080 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ ¬±430)
        self.safe_limit = int(self.weight_limit * safety_threshold)  # 1320 –¥–ª—è 2400 (–∏–ª–∏ 605 –¥–ª—è 1100)
        self.requests = deque()
        self.current_weight = 0  # –†–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –æ—Ç Binance
        self.pending_weight = 0  # –í–µ—Å –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–ª—ë—Ç–µ (–¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Binance)
        self.lock = asyncio.Lock()
        self.backoff_base = config.get('binance.rate_limit_backoff_base', 2)
        self.max_retries = config.get('binance.rate_limit_max_retries', 5)
        
        # IP ban tracking
        self.ip_ban_until: Optional[float] = None  # Timestamp –∫–æ–≥–¥–∞ IP –±–∞–Ω —Å–Ω–∏–º–µ—Ç—Å—è
        self.ip_ban_event = asyncio.Event()  # Event –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö pending requests
        self.ip_ban_logged = False  # –§–ª–∞–≥ —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å IP BAN —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        
        # Warning debounce (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å warning –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥)
        self.last_threshold_warning_time: float = 0
    
    async def acquire(self, weight: int = 1) -> bool:
        while True:
            async with self.lock:
                now = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP ban
                if self.ip_ban_until and now < self.ip_ban_until:
                    wait_time = self.ip_ban_until - now
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    if not self.ip_ban_logged:
                        logger.warning(
                            f"üö´ IP BAN active, all pending requests blocked! "
                            f"Waiting {wait_time:.0f}s (unbanned at {time.strftime('%H:%M:%S', time.localtime(self.ip_ban_until))})"
                        )
                        self.ip_ban_logged = True
                    
                    await asyncio.sleep(wait_time)
                    self.ip_ban_until = None  # –°–±—Ä–æ—Å–∏—Ç—å –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    self.ip_ban_logged = False  # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥
                    self.ip_ban_event.set()  # –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö
                    continue
                
                # –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                while self.requests and self.requests[0][0] < now - self.window_seconds:
                    self.requests.popleft()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞: current (–æ—Ç Binance) + pending (–≤ –ø–æ–ª—ë—Ç–µ) + –Ω–æ–≤—ã–π weight
                total_weight = self.current_weight + self.pending_weight + weight
                
                if total_weight > self.safe_limit:
                    # –ù–∞–π—Ç–∏ –≤—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫–Ω–æ 60 —Å–µ–∫)
                    wait_time = 60 - (now % 60) + 1  # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
                    percent = (total_weight / self.weight_limit) * 100
                    
                    # Debounce: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å warning –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥
                    if now - self.last_threshold_warning_time >= 60:
                        logger.warning(
                            f"‚ö†Ô∏è Rate limit threshold reached ({percent:.1f}% of limit), "
                            f"pausing for {wait_time:.1f}s (current: {self.current_weight}+{self.pending_weight}/{self.safe_limit})"
                        )
                        self.last_threshold_warning_time = now
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: –ñ–¥–µ–º —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –í–ù–£–¢–†–ò —Ü–∏–∫–ª–∞
                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º lock –ø–µ—Ä–µ–¥ —Å–Ω–æ–º
                else:
                    # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –≤–µ—Å (–±—É–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Binance)
                    self.pending_weight += weight
                    self.requests.append((now, weight))
                    return True
            
            # –ñ–¥–µ–º —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ (wait_time —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ if –±–ª–æ–∫–µ –≤—ã—à–µ)
            await asyncio.sleep(wait_time)
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
            # —Ç.–∫. Binance —É–∂–µ —Å–±—Ä–æ—Å–∏–ª —Å–≤–æ–∏, –Ω–æ –º—ã –Ω–µ –ø–æ–ª—É—á–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            async with self.lock:
                self.current_weight = 0
                self.pending_weight = 0
                self.requests.clear()
                logger.info(f"‚úÖ Rate limit window reset, counters cleared")
    
    async def execute_with_backoff(self, func, *args, weight: int = 1, **kwargs):
        acquired = False
        try:
            for attempt in range(self.max_retries):
                try:
                    if not acquired:
                        await self.acquire(weight)
                        acquired = True
                    result = await func(*args, **kwargs)
                    return result
                except Exception as e:
                    error_str = str(e)
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: IP BAN (418) - –æ—Å–≤–æ–±–æ–¥–∏—Ç—å acquired –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ requests
                    # update_from_binance_headers() —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª ip_ban_until
                    # –°–ª–µ–¥—É—é—â–∏–π acquire() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–æ–∂–¥—ë—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∞–Ω–∞
                    if '418' in error_str:
                        # –û—Å–≤–æ–±–æ–¥–∏—Ç—å acquired —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –≤—ã–∑–≤–∞–ª–∞ acquire()
                        if acquired:
                            async with self.lock:
                                self.pending_weight = max(0, self.pending_weight - weight)
                            acquired = False
                        
                        # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å (–±—É–¥–µ—Ç 50+ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç pending tasks)
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤ acquire() –æ–¥–∏–Ω —Ä–∞–∑
                        
                        # –ù–ï raise! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º retry loop - acquire() –ø–æ–¥–æ–∂–¥—ë—Ç –±–∞–Ω
                        continue
                    
                    # 429 (–æ–±—ã—á–Ω—ã–π rate limit) - –¥–µ–ª–∞–µ–º backoff retry
                    if '429' in error_str:
                        wait_time = (self.backoff_base ** attempt) + (time.time() % 1)
                        logger.warning(
                            f"Rate limit 429 (attempt {attempt + 1}/{self.max_retries}), "
                            f"backing off for {wait_time:.2f}s"
                        )
                        await asyncio.sleep(wait_time)
                        # –û—Å–≤–æ–±–æ–¥–∏—Ç—å acquired –¥–ª—è retry
                        if acquired:
                            async with self.lock:
                                self.pending_weight = max(0, self.pending_weight - weight)
                            acquired = False
                        continue
                    
                    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
                    raise
            
            raise Exception(f"Max retries ({self.max_retries}) exceeded for rate limited request")
        except:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è –∏ update_from_binance() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω,
            # –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º pending weight —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if acquired:
                async with self.lock:
                    self.pending_weight = max(0, self.pending_weight - weight)
            raise
    
    async def update_from_binance_headers(self, actual_weight: int, retry_after: Optional[str] = None):
        """
        –û–±–Ω–æ–≤–∏—Ç—å rate limiter —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Binance
        
        Args:
            actual_weight: –†–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-MBX-USED-WEIGHT-1M
            retry_after: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Retry-After (–ø—Ä–∏ –±–∞–Ω–µ)
        """
        async with self.lock:  # ‚Üê THREAD-SAFE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            prev_current_weight = self.current_weight
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if actual_weight != prev_current_weight:
                diff = actual_weight - prev_current_weight
                if abs(diff) > 50:  # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –±–æ–ª—å—à–æ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏
                    logger.info(
                        f"üìä Rate limiter sync: local={prev_current_weight}+{self.pending_weight}, "
                        f"binance={actual_weight} (diff: {diff:+d})"
                    )
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ Binance (–Ω–æ–≤–∞—è –º–∏–Ω—É—Ç–∞)
            # –ï—Å–ª–∏ actual_weight –ú–ï–ù–¨–®–ï prev_current_weight - –∑–Ω–∞—á–∏—Ç Binance —Å–±—Ä–æ—Å–∏–ª —Å—á—ë—Ç—á–∏–∫
            if actual_weight < prev_current_weight:
                # –ù–æ–≤–∞—è –º–∏–Ω—É—Ç–∞ - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
                self.current_weight = actual_weight
                self.pending_weight = 0
                self.requests.clear()
                logger.debug(f"‚úÖ Binance counter reset detected, local counters synchronized")
            else:
                # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–æ–π –∂–µ –º–∏–Ω—É—Ç—ã)
                weight_added = actual_weight - prev_current_weight
                
                # –í–°–ï–ì–î–ê —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Binance (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã)
                self.current_weight = actual_weight
                
                # –û—Å–≤–æ–±–æ–¥–∏—Ç—å pending weight –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞
                # –≠—Ç–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à—ë–ª –æ—Ç –û–î–ù–û–ì–û –∑–∞–ø—Ä–æ—Å–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –µ—â—ë –≤ –ø–æ–ª—ë—Ç–µ
                self.pending_weight = max(0, self.pending_weight - weight_added)
                
                # –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                self.requests.clear()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å Retry-After - –∑–Ω–∞—á–∏—Ç IP –±–∞–Ω –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        if retry_after:
            wait_seconds = int(retry_after)
            async with self.lock:
                self.ip_ban_until = time.time() + wait_seconds
                self.ip_ban_logged = False  # –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–∞–Ω–∞
                self.ip_ban_event.clear()  # –û—á–∏—Å—Ç–∏—Ç—å event
            
            unban_time = time.strftime('%H:%M:%S', time.localtime(self.ip_ban_until))
            logger.error(
                f"üö® BINANCE IP BAN detected! All requests blocked until {unban_time} ({wait_seconds}s)"
            )
    
    def get_current_usage(self) -> Dict[str, Any]:
        # current_weight –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ—Ç Binance, –Ω–µ –≤—ã—á–∏—Ç–∞–µ–º –∑–¥–µ—Å—å
        return {
            'current_weight': self.current_weight,
            'safe_limit': self.safe_limit,
            'hard_limit': self.weight_limit,
            'percent_used': (self.current_weight / self.weight_limit) * 100,
            'percent_of_safe': (self.current_weight / self.safe_limit) * 100 if self.safe_limit > 0 else 0,
            'is_near_limit': self.current_weight >= self.safe_limit
        }
    
    async def wait_if_near_limit(self, weight: int = 1) -> None:
        """–ü–æ–¥–æ–∂–¥–∞—Ç—å –µ—Å–ª–∏ –±–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É (–¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π)"""
        should_wait = False
        wait_time = 0
        
        async with self.lock:
            now = time.time()
            
            # –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ deque)
            while self.requests and self.requests[0][0] < now - self.window_seconds:
                self.requests.popleft()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: current + pending + –Ω–æ–≤—ã–π weight
            total_weight = self.current_weight + self.pending_weight + weight
            
            if total_weight > self.safe_limit:
                should_wait = True
                wait_time = 60 - (now % 60) + 1  # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
                percent = (total_weight / self.weight_limit) * 100
                logger.info(
                    f"üõë Batch operation paused at {percent:.1f}% limit "
                    f"({self.current_weight}+{self.pending_weight}/{self.safe_limit}), waiting {wait_time:.1f}s for reset"
                )
        
        # –ñ–¥–µ–º –í–ù–ï lock
        if should_wait:
            await asyncio.sleep(wait_time)
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
            async with self.lock:
                self.current_weight = 0
                self.pending_weight = 0
                self.requests.clear()
                logger.info(f"‚úÖ Batch rate limit window reset, counters cleared")
