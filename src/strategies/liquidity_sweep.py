from typing import Dict, Optional
import pandas as pd
import numpy as np
from datetime import datetime
from src.strategies.base_strategy import BaseStrategy, Signal
from src.utils.config import config
from src.utils.strategy_logger import strategy_logger
from src.indicators.technical import calculate_atr


class LiquiditySweepStrategy(BaseStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è #11: Liquidity Sweep (Stop-Hunt)
    
    –õ–æ–≥–∏–∫–∞:
    - –£–∫–æ–ª –∑–∞ high/low (sweep) –∏ –±—ã—Å—Ç—Ä—ã–π reclaim ‚Üí fade
    - –ü—Ä–∏ acceptance (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è) ‚Üí continuation
    
    FADE: reclaim –≤–Ω—É—Ç—Ä—å –≤ —Ç–æ–º –∂–µ/—Å–ª–µ–¥. –±–∞—Ä–µ + CVD flip + imbalance flip
    CONTINUATION: acceptance (2 close/0.25 ATR) + –æ–±—ä—ë–º/POC-—Å–¥–≤–∏–≥ + OI‚Üë
    
    –°–∫–∞–Ω–µ—Ä: –ø—Ä–æ–∫–æ–ª ‚â•0.1‚Äì0.3 ATR –∏–ª–∏ ‚â•0.1‚Äì0.2%; –æ–±—ä—ë–º —Å–≤–µ–π–ø–∞ >1.5‚Äì2√ó
    """
    
    def __init__(self):
        strategy_config = config.get('strategies.liquidity_sweep', {})
        super().__init__("Liquidity Sweep", strategy_config)
        
        self.timeframe = '15m'
        self.lookback_bars = 50
        self.sweep_min_atr = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫–æ–ª 0.1 ATR
        self.sweep_max_atr = 0.3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫–æ–ª 0.3 ATR
        self.sweep_min_pct = 0.001  # 0.1% –º–∏–Ω–∏–º—É–º
        self.sweep_max_pct = 0.002  # 0.2% –º–∞–∫—Å–∏–º—É–º
        self.volume_threshold = 1.5  # –û–±—ä—ë–º —Å–≤–µ–π–ø–∞ >1.5√ó
        self.acceptance_min_closes = 2  # –ú–∏–Ω–∏–º—É–º 2 close –¥–ª—è acceptance
        self.acceptance_atr_distance = 0.25
        self.max_bars_after_sweep = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –±–∞—Ä–∞ –ø–æ—Å–ª–µ sweep –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö sweep –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ {symbol: {...}}
        self.active_sweeps: Dict[str, Dict] = {}
        
    def get_timeframe(self) -> str:
        return self.timeframe
    
    def get_category(self) -> str:
        return "mean_reversion"  # Fade –±–∞–∑–æ–≤–æ MR, continuation - breakout
    
    def check_signal(self, symbol: str, df: pd.DataFrame, 
                     regime: str, bias: str, 
                     indicators: Dict) -> Optional[Signal]:
        
        if len(df) < self.lookback_bars:
            strategy_logger.debug(f"    ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} –±–∞—Ä–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è {self.lookback_bars}")
            return None
        
        # ATR –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
        atr = calculate_atr(df['high'], df['low'], df['close'], period=14)
        current_atr = atr.iloc[-1]
        current_timestamp = df.index[-1]
        
        # –¢–µ–∫—É—â–∞—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞
        current_high = df['high'].iloc[-1]
        current_low = df['low'].iloc[-1]
        current_close = df['close'].iloc[-1]
        current_volume = df['volume'].iloc[-1]
        
        # –ú–µ–¥–∏–∞–Ω–Ω—ã–π –æ–±—ä—ë–º
        median_volume = df['volume'].tail(20).median()
        
        # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π sweep –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if symbol in self.active_sweeps:
            sweep_ctx = self.active_sweeps[symbol]
            bars_since_sweep = sweep_ctx['bars_count']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç (–º–∞–∫—Å–∏–º—É–º 3 –±–∞—Ä–∞ –ø–æ—Å–ª–µ sweep)
            if bars_since_sweep >= self.max_bars_after_sweep:
                strategy_logger.debug(f"    ‚è∞ Sweep —Ç–∞–π–º–∞—É—Ç: {bars_since_sweep} –±–∞—Ä–æ–≤ –ø—Ä–æ—à–ª–æ, —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                del self.active_sweeps[symbol]
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º fade/continuation –Ω–∞ —Ç–µ–∫—É—â–µ–º –±–∞—Ä–µ
                strategy_logger.debug(f"    üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ sweep (–±–∞—Ä {bars_since_sweep+1} –ø–æ—Å–ª–µ –ø—Ä–æ–∫–æ–ª–∞)")
                
                signal_type = self._check_fade_or_continuation(
                    df, sweep_ctx['direction'], sweep_ctx['level'], 
                    sweep_ctx['atr'], indicators
                )
                
                if signal_type == 'fade':
                    signal = self._create_fade_signal(
                        symbol, df, 
                        'long' if sweep_ctx['direction'] == 'down' else 'short',
                        sweep_ctx['level'], sweep_ctx['atr'], indicators
                    )
                    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    del self.active_sweeps[symbol]
                    return signal
                    
                elif signal_type == 'continuation':
                    signal = self._create_continuation_signal(
                        symbol, df,
                        'long' if sweep_ctx['direction'] == 'up' else 'short',
                        sweep_ctx['level'], sweep_ctx['atr'], indicators
                    )
                    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    del self.active_sweeps[symbol]
                    return signal
                else:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –±–∞—Ä–æ–≤
                    self.active_sweeps[symbol]['bars_count'] += 1
                    strategy_logger.debug(f"    ‚è≥ –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–±–∞—Ä {self.active_sweeps[symbol]['bars_count']} –∏–∑ {self.max_bars_after_sweep})")
        
        # –®–ê–ì 2: –ò—â–µ–º –ù–û–í–´–ô sweep –Ω–∞ —Ç–µ–∫—É—â–µ–º –±–∞—Ä–µ
        # –ù–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –±–∞—Ä)
        recent_high = df['high'].iloc[-self.lookback_bars-1:-1].max()
        recent_low = df['low'].iloc[-self.lookback_bars-1:-1].min()
        
        # --- –ü–†–û–í–ï–†–ö–ê SWEEP UP (–ø—Ä–æ–∫–æ–ª –≤–≤–µ—Ä—Ö) ---
        sweep_up_atr = current_high - recent_high
        sweep_up_pct = sweep_up_atr / recent_high
        
        if (self.sweep_min_atr * current_atr <= sweep_up_atr <= self.sweep_max_atr * current_atr or
            self.sweep_min_pct <= sweep_up_pct <= self.sweep_max_pct):
            
            # –û–±—ä—ë–º —Å–≤–µ–π–ø–∞
            if current_volume > self.volume_threshold * median_volume:
                strategy_logger.debug(f"    üéØ SWEEP UP –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ü—Ä–æ–∫–æ–ª {sweep_up_atr:.4f} ({sweep_up_pct*100:.2f}%), –æ–±—ä—ë–º {current_volume/median_volume:.1f}x")
                
                # –°–û–•–†–ê–ù–Ø–ï–ú sweep –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –±–∞—Ä–∞—Ö
                self.active_sweeps[symbol] = {
                    'level': recent_high,
                    'direction': 'up',
                    'timestamp': current_timestamp,
                    'atr': current_atr,
                    'bars_count': 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å—á—ë—Ç—á–∏–∫
                }
                return None  # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        
        # --- –ü–†–û–í–ï–†–ö–ê SWEEP DOWN (–ø—Ä–æ–∫–æ–ª –≤–Ω–∏–∑) ---
        sweep_down_atr = recent_low - current_low
        sweep_down_pct = sweep_down_atr / recent_low
        
        if (self.sweep_min_atr * current_atr <= sweep_down_atr <= self.sweep_max_atr * current_atr or
            self.sweep_min_pct <= sweep_down_pct <= self.sweep_max_pct):
            
            if current_volume > self.volume_threshold * median_volume:
                strategy_logger.debug(f"    üéØ SWEEP DOWN –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ü—Ä–æ–∫–æ–ª {sweep_down_atr:.4f} ({sweep_down_pct*100:.2f}%), –æ–±—ä—ë–º {current_volume/median_volume:.1f}x")
                
                # –°–û–•–†–ê–ù–Ø–ï–ú sweep –∫–æ–Ω—Ç–µ–∫—Å—Ç
                self.active_sweeps[symbol] = {
                    'level': recent_low,
                    'direction': 'down',
                    'timestamp': current_timestamp,
                    'atr': current_atr,
                    'bars_count': 0
                }
                return None  # –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ä–∞
        
        # –ù–µ—Ç –Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ sweep, –Ω–∏ –Ω–æ–≤–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        return None
    
    def _check_fade_or_continuation(self, df: pd.DataFrame, sweep_direction: str,
                                    sweep_level: float, atr: float, 
                                    indicators: Dict) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç fade –∏–ª–∏ continuation –ø–æ—Å–ª–µ sweep
        """
        current_close = df['close'].iloc[-1]
        prev_close = df['close'].iloc[-2]
        
        # CVD –∏–∑ —Å–≤–æ–µ–≥–æ timeframe, fallback –∫ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤–æ–º—É –∏–ª–∏ 0
        cvd = indicators.get(self.timeframe, {}).get('cvd', indicators.get('cvd', 0))
        depth_imbalance = indicators.get('depth_imbalance', 1.0)
        doi_pct = indicators.get('doi_pct', 0)
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 closes
        recent_closes = df['close'].tail(3).values
        
        if sweep_direction == 'up':
            # Sweep –≤–≤–µ—Ä—Ö
            strategy_logger.debug(f"      –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ SWEEP UP: close={current_close:.2f}, level={sweep_level:.2f}")
            
            # FADE: reclaim –≤–Ω—É—Ç—Ä—å (close –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è)
            if current_close < sweep_level:
                strategy_logger.debug(f"      ‚úì Reclaim –≤–Ω—É—Ç—Ä—å: close {current_close:.2f} < level {sweep_level:.2f}")
                # CVD flip –≤–Ω–∏–∑ (–±—ã–ª–æ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å–≤–µ–π–ø–µ, —Å—Ç–∞–ª–∏ –ø—Ä–æ–¥–∞–∂–∏)
                if cvd < 0:
                    strategy_logger.debug(f"      ‚úì CVD flip –≤–Ω–∏–∑: {cvd:.2f}")
                    # Imbalance flip (–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂)
                    if depth_imbalance > 1.1:
                        strategy_logger.debug(f"      ‚úì Imbalance flip (–ø—Ä–æ–¥–∞–∂–∏): {depth_imbalance:.2f} > 1.1")
                        strategy_logger.debug(f"      ‚úÖ FADE –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
                        return 'fade'
                    else:
                        strategy_logger.debug(f"      ‚ùå Imbalance –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: {depth_imbalance:.2f} <= 1.1")
                else:
                    strategy_logger.debug(f"      ‚ùå CVD –Ω–µ flip –≤–Ω–∏–∑: {cvd:.2f} >= 0")
            else:
                strategy_logger.debug(f"      ‚ùå –ù–µ—Ç reclaim: close {current_close:.2f} >= level {sweep_level:.2f}")
            
            # CONTINUATION: acceptance –≤—ã—à–µ (‚â•2 close –∑–∞ —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ ‚â•0.25 ATR)
            closes_above = sum(c >= sweep_level for c in recent_closes)
            distance_above = current_close - sweep_level
            
            if closes_above >= self.acceptance_min_closes or distance_above >= self.acceptance_atr_distance * atr:
                strategy_logger.debug(f"      ‚úì Acceptance –≤—ã—à–µ: {closes_above} closes >= {self.acceptance_min_closes} –ò–õ–ò distance {distance_above:.4f} >= {self.acceptance_atr_distance * atr:.4f}")
                # CVD/OI –ø–æ –≤—ã—Ö–æ–¥—É (–ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è)
                if cvd > 0 or doi_pct > 1.0:
                    strategy_logger.debug(f"      ‚úì CVD/OI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: CVD={cvd:.2f}, doi_pct={doi_pct:.2f}")
                    strategy_logger.debug(f"      ‚úÖ CONTINUATION –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
                    return 'continuation'
                else:
                    strategy_logger.debug(f"      ‚ùå –ù–µ—Ç CVD/OI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: CVD={cvd:.2f}, doi_pct={doi_pct:.2f}")
            else:
                strategy_logger.debug(f"      ‚ùå –ù–µ—Ç acceptance: {closes_above} closes < {self.acceptance_min_closes} –ò distance {distance_above:.4f} < {self.acceptance_atr_distance * atr:.4f}")
        
        else:  # sweep_direction == 'down'
            # Sweep –≤–Ω–∏–∑
            strategy_logger.debug(f"      –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ SWEEP DOWN: close={current_close:.2f}, level={sweep_level:.2f}")
            
            # FADE: reclaim –≤–≤–µ—Ä—Ö
            if current_close > sweep_level:
                strategy_logger.debug(f"      ‚úì Reclaim –≤–≤–µ—Ä—Ö: close {current_close:.2f} > level {sweep_level:.2f}")
                # CVD flip –≤–≤–µ—Ä—Ö
                if cvd > 0:
                    strategy_logger.debug(f"      ‚úì CVD flip –≤–≤–µ—Ä—Ö: {cvd:.2f}")
                    # Imbalance flip (–¥–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫)
                    if depth_imbalance < 0.9:
                        strategy_logger.debug(f"      ‚úì Imbalance flip (–ø–æ–∫—É–ø–∫–∏): {depth_imbalance:.2f} < 0.9")
                        strategy_logger.debug(f"      ‚úÖ FADE –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
                        return 'fade'
                    else:
                        strategy_logger.debug(f"      ‚ùå Imbalance –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: {depth_imbalance:.2f} >= 0.9")
                else:
                    strategy_logger.debug(f"      ‚ùå CVD –Ω–µ flip –≤–≤–µ—Ä—Ö: {cvd:.2f} <= 0")
            else:
                strategy_logger.debug(f"      ‚ùå –ù–µ—Ç reclaim: close {current_close:.2f} <= level {sweep_level:.2f}")
            
            # CONTINUATION: acceptance –Ω–∏–∂–µ
            closes_below = sum(c <= sweep_level for c in recent_closes)
            distance_below = sweep_level - current_close
            
            if closes_below >= self.acceptance_min_closes or distance_below >= self.acceptance_atr_distance * atr:
                strategy_logger.debug(f"      ‚úì Acceptance –Ω–∏–∂–µ: {closes_below} closes >= {self.acceptance_min_closes} –ò–õ–ò distance {distance_below:.4f} >= {self.acceptance_atr_distance * atr:.4f}")
                # CVD/OI –≤–Ω–∏–∑
                if cvd < 0 or doi_pct < -1.0:
                    strategy_logger.debug(f"      ‚úì CVD/OI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: CVD={cvd:.2f}, doi_pct={doi_pct:.2f}")
                    strategy_logger.debug(f"      ‚úÖ CONTINUATION –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
                    return 'continuation'
                else:
                    strategy_logger.debug(f"      ‚ùå –ù–µ—Ç CVD/OI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: CVD={cvd:.2f}, doi_pct={doi_pct:.2f}")
            else:
                strategy_logger.debug(f"      ‚ùå –ù–µ—Ç acceptance: {closes_below} closes < {self.acceptance_min_closes} –ò distance {distance_below:.4f} < {self.acceptance_atr_distance * atr:.4f}")
        
        strategy_logger.debug(f"      ‚è≥ –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è fade/continuation –Ω–∞ —ç—Ç–æ–º –±–∞—Ä–µ")
        return None
    
    def _create_fade_signal(self, symbol: str, df: pd.DataFrame, direction: str,
                           sweep_level: float, atr: float, indicators: Dict) -> Signal:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª FADE - –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ sweep
        """
        current_close = df['close'].iloc[-1]
        current_high = df['high'].iloc[-1]
        current_low = df['low'].iloc[-1]
        
        if direction == 'long':
            # Fade –≤–Ω–∏–∑ –ø–æ—Å–ª–µ sweep down ‚Üí long
            entry = current_close
            stop_loss = current_low - 0.25 * atr  # –ó–∞ —Ö–≤–æ—Å—Ç —Å–≤–µ–π–ø–∞
            
            # TP –∫–∞–∫ –≤ mean reversion
            take_profit_1 = sweep_level + 0.5 * atr  # TP1 –æ–±—Ä–∞—Ç–Ω–æ –∫ —É—Ä–æ–≤–Ω—é
            take_profit_2 = sweep_level + 1.5 * atr  # TP2 –¥–∞–ª—å—à–µ
            
            return Signal(
                symbol=symbol,
                direction='long',
                entry_price=entry,
                stop_loss=stop_loss,
                take_profit_1=take_profit_1,
                take_profit_2=take_profit_2,
                confidence=2.5,
                strategy_name=self.name,
                metadata={
                    'type': 'liquidity_sweep_fade',
                    'sweep_level': sweep_level,
                    'sweep_direction': 'down'
                }
            )
        else:
            # Fade –≤–≤–µ—Ä—Ö –ø–æ—Å–ª–µ sweep up ‚Üí short
            entry = current_close
            stop_loss = current_high + 0.25 * atr
            
            take_profit_1 = sweep_level - 0.5 * atr
            take_profit_2 = sweep_level - 1.5 * atr
            
            return Signal(
                symbol=symbol,
                direction='short',
                entry_price=entry,
                stop_loss=stop_loss,
                take_profit_1=take_profit_1,
                take_profit_2=take_profit_2,
                confidence=2.5,
                strategy_name=self.name,
                metadata={
                    'type': 'liquidity_sweep_fade',
                    'sweep_level': sweep_level,
                    'sweep_direction': 'up'
                }
            )
    
    def _create_continuation_signal(self, symbol: str, df: pd.DataFrame, direction: str,
                                    sweep_level: float, atr: float, indicators: Dict) -> Signal:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª CONTINUATION - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ acceptance
        """
        current_close = df['close'].iloc[-1]
        
        if direction == 'long':
            entry = current_close
            stop_loss = sweep_level - 0.3 * atr  # –ó–∞ —É—Ä–æ–≤–µ–Ω—å —Å–≤–µ–π–ø–∞
            
            # TP –∫–∞–∫ –≤ breakout
            take_profit_1 = entry + 1.5 * atr
            take_profit_2 = entry + 3.0 * atr
            
            return Signal(
                symbol=symbol,
                direction='long',
                entry_price=entry,
                stop_loss=stop_loss,
                take_profit_1=take_profit_1,
                take_profit_2=take_profit_2,
                confidence=2.0,
                strategy_name=self.name,
                metadata={
                    'type': 'liquidity_sweep_continuation',
                    'sweep_level': sweep_level,
                    'sweep_direction': 'up'
                }
            )
        else:
            entry = current_close
            stop_loss = sweep_level + 0.3 * atr
            
            take_profit_1 = entry - 1.5 * atr
            take_profit_2 = entry - 3.0 * atr
            
            return Signal(
                symbol=symbol,
                direction='short',
                entry_price=entry,
                stop_loss=stop_loss,
                take_profit_1=take_profit_1,
                take_profit_2=take_profit_2,
                confidence=2.0,
                strategy_name=self.name,
                metadata={
                    'type': 'liquidity_sweep_continuation',
                    'sweep_level': sweep_level,
                    'sweep_direction': 'down'
                }
            )
