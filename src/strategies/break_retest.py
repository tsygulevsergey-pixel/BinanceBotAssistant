from typing import Dict, Optional
import pandas as pd
import numpy as np
from src.strategies.base_strategy import BaseStrategy, Signal
from src.utils.config import config
from src.utils.strategy_logger import strategy_logger
from src.indicators.technical import calculate_atr, calculate_adx
from src.utils.sr_zones_15m import create_sr_zones, find_nearest_zone, calculate_stop_loss_from_zone


class BreakRetestStrategy(BaseStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è #5: Break & Retest
    
    –õ–æ–≥–∏–∫–∞ –ø–æ –º–∞–Ω—É–∞–ª—É:
    - –ü—Ä–æ–±–æ–π —Å close ‚â•0.25 ATR –∏ –æ–±—ä—ë–º–æ–º >1.5‚Äì2√ó
    - –ó–æ–Ω–∞ —Ä–µ—Ç–µ—Å—Ç–∞ = —ç–∫—Å—Ç—Ä–µ–º—É–º¬±0.2‚Äì0.3 ATR ‚à© AVWAP(–±–∞—Ä –ø—Ä–æ–±–æ—è)
    - –¢—Ä–∏–≥–≥–µ—Ä: 50% –ª–∏–º–∏—Ç–æ–º –≤ –∑–æ–Ω–µ, 50% ‚Äî –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    - –°—Ç–æ–ø: –∑–∞ —Å–≤–∏–Ω–≥-—Ä–µ–∞–∫—Ü–∏–µ–π +0.2‚Äì0.3 ATR
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: CVD flip, imbalance flip/refill, OI –Ω–µ –ø–∞–¥–∞–µ—Ç
    """
    
    def __init__(self):
        strategy_config = config.get('strategies.retest', {})
        super().__init__("Break & Retest", strategy_config)
        
        self.breakout_atr = strategy_config.get('breakout_atr', 0.25)
        self.zone_atr = strategy_config.get('zone_atr', [0.2, 0.3])
        self.volume_threshold = strategy_config.get('volume_threshold', 1.5)
        self.split_ratio = strategy_config.get('split_ratio', 0.5)  # 50/50
        self.timeframe = '15m'
        self.breakout_lookback = 20  # –ò—â–µ–º –ø—Ä–æ–±–æ–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞—Ä–æ–≤
        
        # –§–ê–ó–ê 1: –†–∞–∑–Ω—ã–µ ADX –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.adx_threshold_trend = config.get('market_detector.trend.adx_threshold_trend', 25)  # –°—Ç—Ä–æ–∂–µ –¥–ª—è TREND
        self.adx_threshold_squeeze = config.get('market_detector.trend.adx_threshold_squeeze', 15)  # –ú—è–≥—á–µ –¥–ª—è SQUEEZE
        self.adx_threshold_default = config.get('market_detector.trend.adx_threshold', 20)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –§–ê–ó–ê 1: –†–∞–∑–Ω—ã–µ volume —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
        self.volume_threshold_trend = config.get('strategies.retest.volume_threshold_trend', 1.8)  # –°—Ç—Ä–æ–∂–µ –¥–ª—è TREND
        self.volume_threshold_squeeze = config.get('strategies.retest.volume_threshold_squeeze', 1.2)  # –ú—è–≥—á–µ –¥–ª—è SQUEEZE
        
        # –§–ê–ó–ê 1: ATR-based TP/SL –æ–ø—Ü–∏—è
        self.use_atr_based_tp_sl = strategy_config.get('use_atr_based_tp_sl', True)
        self.atr_tp1_multiplier = strategy_config.get('atr_tp1_multiplier', 1.5)
        self.atr_tp2_multiplier = strategy_config.get('atr_tp2_multiplier', 2.5)
        self.atr_sl_multiplier = strategy_config.get('atr_sl_multiplier', 1.0)
        
        # –§–ê–ó–ê 1: –§–∏–ª—å—Ç—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.require_pin_bar_or_engulfing = strategy_config.get('require_pin_bar_or_engulfing', False)
        self.htf_ema200_check = strategy_config.get('htf_ema200_check', True)
    
    def get_timeframe(self) -> str:
        return self.timeframe
    
    def get_category(self) -> str:
        return "pullback"
    
    def _find_swing_high_low(self, df: pd.DataFrame, end_pos: int, lookback: int = 20, buffer: int = 3) -> Dict:
        """–ù–∞–π—Ç–∏ swing high/low —Å –±—É—Ñ–µ—Ä–æ–º N –±–∞—Ä–æ–≤
        Args:
            end_pos: –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô –∏–Ω–¥–µ–∫—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        start_pos = max(buffer, end_pos - lookback)
        
        swing_high = None
        swing_high_idx = None
        swing_low = None
        swing_low_idx = None
        
        # –ò—â–µ–º swing high (–ø–∏–∫ —Å buffer –±–∞—Ä–æ–≤ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
        for i in range(start_pos, end_pos - buffer):
            if i < buffer or i + buffer >= len(df):
                continue
            
            high_val = df['high'].iloc[i]
            is_swing_high = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            for j in range(i - buffer, i + buffer + 1):
                if j != i and df['high'].iloc[j] >= high_val:
                    is_swing_high = False
                    break
            
            if is_swing_high:
                swing_high = high_val
                swing_high_idx = i
        
        # –ò—â–µ–º swing low (–≤–ø–∞–¥–∏–Ω–∞ —Å buffer –±–∞—Ä–æ–≤ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
        for i in range(start_pos, end_pos - buffer):
            if i < buffer or i + buffer >= len(df):
                continue
            
            low_val = df['low'].iloc[i]
            is_swing_low = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            for j in range(i - buffer, i + buffer + 1):
                if j != i and df['low'].iloc[j] <= low_val:
                    is_swing_low = False
                    break
            
            if is_swing_low:
                swing_low = low_val
                swing_low_idx = i
        
        return {
            'swing_high': swing_high,
            'swing_high_idx': swing_high_idx,
            'swing_low': swing_low,
            'swing_low_idx': swing_low_idx
        }
    
    def _check_higher_timeframe_trend(self, df_1h: Optional[pd.DataFrame], df_4h: Optional[pd.DataFrame], 
                                      direction: str) -> tuple[bool, bool]:
        """
        –§–ê–ó–ê 1: Higher Timeframe Confirmation (–ò–°–ü–†–ê–í–õ–ï–ù–û - graceful degradation)
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–Ω–¥ –Ω–∞ 1H –∏ 4H —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É—è EMA200 (–∏–ª–∏ –º–µ–Ω—å—à–∏–π –ø–µ—Ä–∏–æ–¥ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –µ—Å—Ç—å_–¥–∞–Ω–Ω—ã–µ)
        """
        from src.indicators.technical import calculate_ema
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Graceful degradation - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1H: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º EMA200, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º EMA50 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ
        if df_1h is None or len(df_1h) < 50:
            strategy_logger.debug(f"    ‚ö†Ô∏è Higher TF: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1H (–º–∏–Ω–∏–º—É–º 50 –±–∞—Ä–æ–≤, –µ—Å—Ç—å {len(df_1h) if df_1h is not None else 0})")
            return (False, False)  # –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        
        ema_period_1h = 200 if len(df_1h) >= 200 else 50
        if ema_period_1h == 50:
            strategy_logger.debug(f"    üìä HTF 1H: –∏—Å–ø–æ–ª—å–∑—É–µ–º EMA50 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA200, –µ—Å—Ç—å {len(df_1h)} –±–∞—Ä–æ–≤)")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è 4H —Ç–∞–∫–∂–µ graceful degradation
        if df_4h is None or len(df_4h) < 50:
            strategy_logger.debug(f"    ‚ö†Ô∏è Higher TF: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö 4H (–º–∏–Ω–∏–º—É–º 50 –±–∞—Ä–æ–≤, –µ—Å—Ç—å {len(df_4h) if df_4h is not None else 0})")
            return (False, False)  # –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        
        ema_period_4h = 200 if len(df_4h) >= 200 else 50
        if ema_period_4h == 50:
            strategy_logger.debug(f"    üìä HTF 4H: –∏—Å–ø–æ–ª—å–∑—É–µ–º EMA50 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA200, –µ—Å—Ç—å {len(df_4h)} –±–∞—Ä–æ–≤)")
        
        # –†–∞—Å—á—ë—Ç EMA —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        ema_1h = calculate_ema(df_1h['close'], period=ema_period_1h)
        price_1h = df_1h['close'].iloc[-1]
        
        ema_4h = calculate_ema(df_4h['close'], period=ema_period_4h)
        price_4h = df_4h['close'].iloc[-1]
        
        if direction == 'LONG':
            trend_1h = price_1h > ema_1h.iloc[-1]
            trend_4h = price_4h > ema_4h.iloc[-1]
            confirmed = trend_1h and trend_4h
            strategy_logger.debug(f"    üìä HTF Check: 1H={'‚úÖ' if trend_1h else '‚ùå'} (price={price_1h:.2f} vs EMA{ema_period_1h}={ema_1h.iloc[-1]:.2f}), "
                                f"4H={'‚úÖ' if trend_4h else '‚ùå'} (price={price_4h:.2f} vs EMA{ema_period_4h}={ema_4h.iloc[-1]:.2f})")
            return (confirmed, True)
        else:  # SHORT
            trend_1h = price_1h < ema_1h.iloc[-1]
            trend_4h = price_4h < ema_4h.iloc[-1]
            confirmed = trend_1h and trend_4h
            strategy_logger.debug(f"    üìä HTF Check: 1H={'‚úÖ' if trend_1h else '‚ùå'} (price={price_1h:.2f} vs EMA{ema_period_1h}={ema_1h.iloc[-1]:.2f}), "
                                f"4H={'‚úÖ' if trend_4h else '‚ùå'} (price={price_4h:.2f} vs EMA{ema_period_4h}={ema_4h.iloc[-1]:.2f})")
            return (confirmed, True)
    
    def _check_bollinger_position(self, df: pd.DataFrame, direction: str) -> bool:
        """
        –§–ê–ó–ê 2: Bollinger Bands —Ñ–∏–ª—å—Ç—Ä
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ü–µ–Ω–∞ —É –≤–Ω–µ—à–Ω–µ–π –ø–æ–ª–æ—Å—ã (—Å–∏–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å)
        """
        from src.indicators.technical import calculate_bollinger_bands
        
        bb_upper, bb_middle, bb_lower = calculate_bollinger_bands(df['close'], period=20, std=2.0)
        current_close = df['close'].iloc[-1]
        
        if direction == 'LONG':
            # –î–ª—è LONG: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ
            distance_to_upper = (bb_upper.iloc[-1] - current_close) / bb_upper.iloc[-1]
            return distance_to_upper <= 0.02  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 2% –æ—Ç –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã
        else:  # SHORT
            # –î–ª—è SHORT: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å–µ
            distance_to_lower = (current_close - bb_lower.iloc[-1]) / current_close
            return distance_to_lower <= 0.02  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 2% –æ—Ç –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã
    
    def _check_pin_bar(self, bar: Dict, direction: str) -> bool:
        """
        –§–ê–ó–ê 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Pin Bar –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        Pin Bar = –¥–ª–∏–Ω–Ω—ã–π —Ö–≤–æ—Å—Ç (—Ç–µ–Ω—å) + –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ
        """
        body_size = abs(bar['close'] - bar['open'])
        
        if direction == 'LONG':
            # Bullish Pin Bar: –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∂–Ω–∏–π —Ö–≤–æ—Å—Ç
            lower_wick = min(bar['open'], bar['close']) - bar['low']
            upper_wick = bar['high'] - max(bar['open'], bar['close'])
            
            # –£—Å–ª–æ–≤–∏—è: –Ω–∏–∂–Ω–∏–π —Ö–≤–æ—Å—Ç > 2√ó —Ç–µ–ª–∞ –ò > –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ö–≤–æ—Å—Ç–∞
            if body_size > 0 and lower_wick > body_size * 2.0 and lower_wick > upper_wick * 1.5:
                return True
                
        else:  # SHORT
            # Bearish Pin Bar: –¥–ª–∏–Ω–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Ö–≤–æ—Å—Ç
            upper_wick = bar['high'] - max(bar['open'], bar['close'])
            lower_wick = min(bar['open'], bar['close']) - bar['low']
            
            # –£—Å–ª–æ–≤–∏—è: –≤–µ—Ä—Ö–Ω–∏–π —Ö–≤–æ—Å—Ç > 2√ó —Ç–µ–ª–∞ –ò > –Ω–∏–∂–Ω–µ–≥–æ —Ö–≤–æ—Å—Ç–∞
            if body_size > 0 and upper_wick > body_size * 2.0 and upper_wick > lower_wick * 1.5:
                return True
        
        return False
    
    def _check_engulfing(self, prev_bar: Dict, current_bar: Dict, direction: str) -> bool:
        """
        –§–ê–ó–ê 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Engulfing (–ø–æ–≥–ª–æ—â–∞—é—â–µ–π) —Å–≤–µ—á–∏
        –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–ª–æ—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é
        """
        if direction == 'LONG':
            # Bullish Engulfing: —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –ø–æ–≥–ª–æ—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–µ–¥–≤–µ–∂—å—é
            prev_bearish = prev_bar['close'] < prev_bar['open']
            current_bullish = current_bar['close'] > current_bar['open']
            
            engulfs = (current_bar['close'] > prev_bar['open'] and 
                      current_bar['open'] < prev_bar['close'])
            
            return prev_bearish and current_bullish and engulfs
            
        else:  # SHORT
            # Bearish Engulfing: —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –ø–æ–≥–ª–æ—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –±—ã—á—å—é
            prev_bullish = prev_bar['close'] > prev_bar['open']
            current_bearish = current_bar['close'] < current_bar['open']
            
            engulfs = (current_bar['close'] < prev_bar['open'] and 
                      current_bar['open'] > prev_bar['close'])
            
            return prev_bullish and current_bearish and engulfs
        
        return False
    
    def _check_retest_quality(self, breakout: Dict, retest_bars: list, breakout_level: float) -> float:
        """
        –§–ê–ó–ê 1+2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—Ç–µ—Å—Ç–∞ (–£–õ–£–ß–®–ï–ù–û)
        –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ Pin Bar –∏ Engulfing patterns
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ 0-1 (0=–ø–ª–æ—Ö–æ, 1=–æ—Ç–ª–∏—á–Ω–æ)
        """
        if not retest_bars or len(retest_bars) == 0:
            return 0.0
        
        quality_score = 1.0
        direction = breakout['direction']
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª—É–±–∏–Ω—ã –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è
        max_penetration = 0
        for bar in retest_bars:
            if direction == 'LONG':
                # –î–ª—è LONG: –Ω–∞—Å–∫–æ–ª—å–∫–æ –Ω–∏–∑–∫–æ —É—à–ª–∏ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
                penetration = (breakout_level - bar['low']) / breakout['atr']
                if penetration > max_penetration:
                    max_penetration = penetration
            else:  # SHORT
                penetration = (bar['high'] - breakout_level) / breakout['atr']
                if penetration > max_penetration:
                    max_penetration = penetration
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –≥–ª—É–±–æ–∫–æ–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ (>0.3 ATR –ø–ª–æ—Ö–æ)
        if max_penetration > 0.3:
            quality_score -= 0.3
        
        # 2. –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ Pin Bar pattern (–°–ò–õ–¨–ù–´–ô —Å–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        has_pin_bar = False
        for bar in retest_bars:
            if self._check_pin_bar(bar, direction):
                has_pin_bar = True
                quality_score += 0.3  # –ë–û–ù–£–° –∑–∞ Pin Bar!
                strategy_logger.debug(f"    ‚úÖ Pin Bar –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ —Ä–µ—Ç–µ—Å—Ç–µ!")
                break
        
        # 3. –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ Engulfing pattern (–µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–≤–µ—á–∏)
        has_engulfing = False
        if len(retest_bars) >= 2:
            for i in range(1, len(retest_bars)):
                if self._check_engulfing(retest_bars[i-1], retest_bars[i], direction):
                    has_engulfing = True
                    quality_score += 0.3  # –ë–û–ù–£–° –∑–∞ Engulfing!
                    strategy_logger.debug(f"    ‚úÖ Engulfing pattern –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ —Ä–µ—Ç–µ—Å—Ç–µ!")
                    break
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ rejection (–µ—Å–ª–∏ –Ω–µ—Ç Pin Bar / Engulfing)
        if not has_pin_bar and not has_engulfing:
            has_rejection = False
            for bar in retest_bars:
                if direction == 'LONG':
                    wick_size = min(bar['open'], bar['close']) - bar['low']
                    body_size = abs(bar['close'] - bar['open'])
                    if wick_size > body_size * 0.5:
                        has_rejection = True
                        break
                else:
                    wick_size = bar['high'] - max(bar['open'], bar['close'])
                    body_size = abs(bar['close'] - bar['open'])
                    if wick_size > body_size * 0.5:
                        has_rejection = True
                        break
            
            if not has_rejection:
                quality_score -= 0.3  # –®–¢–†–ê–§ –µ—Å–ª–∏ –Ω–µ—Ç –ù–ò–ö–ê–ö–ò–• –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ rejection
        
        return max(0.0, min(1.5, quality_score))  # –ú–∞–∫—Å 1.5 –µ—Å–ª–∏ –µ—Å—Ç—å Pin Bar + Engulfing
    
    def _calculate_improved_score(self, base_score: float, breakout: Dict, regime: str, 
                                   bias: str, retest_quality: float, 
                                   bb_good: bool, htf_confirmed: bool, htf_has_data: bool,
                                   rsi_confirmed: bool = True,
                                   market_structure_good: bool = True) -> float:
        """
        –§–ê–ó–ê 2+3: –£–ª—É—á—à–µ–Ω–Ω–∞—è score —Å–∏—Å—Ç–µ–º–∞
        """
        score = base_score
        
        # –§–ê–ó–ê 2: –ë–æ–Ω—É—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if regime == 'TREND':
            # ADX –±–æ–Ω—É—Å—ã (–¥–ª—è TREND)
            adx = breakout.get('adx', 0)
            if adx > 30:
                score += 1.0  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
            elif adx > 25:
                score += 0.5  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
            
            # ADX rising –±–æ–Ω—É—Å (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ _find_recent_breakout)
            score += 0.5
            
            # Volume –±–æ–Ω—É—Å—ã
            vol_ratio = breakout.get('volume_ratio', 1.0)
            if vol_ratio > 2.0:
                score += 1.0  # –ú–æ—â–Ω—ã–π –æ–±—ä–µ–º
            elif vol_ratio > 1.5:
                score += 0.5
            
            # Higher TF confirmation
            if htf_has_data:
                if htf_confirmed:
                    score += 1.0  # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ check_signal
            else:
                score -= 0.5  # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
            # Bollinger position
            if bb_good:
                score += 0.5
            
            # Retest quality
            score += retest_quality * 0.5
            
        elif regime == 'SQUEEZE':
            # SQUEEZE –±–æ–Ω—É—Å—ã (–º—è–≥—á–µ)
            if breakout.get('volume_ratio', 1.0) > 1.5:
                score += 0.5
            
            score += retest_quality * 0.3
        
        # –§–ê–ó–ê 3: RSI –∏ Market Structure –±–æ–Ω—É—Å—ã
        if rsi_confirmed:
            score += 0.5
        
        if market_structure_good:
            score += 0.5
        
        # Bias –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã
        if bias.lower() == 'neutral':
            score += 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π bias –ª—É—á—à–µ
        elif bias.lower() == 'bearish':
            score -= 0.5  # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ (–æ—Å–Ω–æ–≤–Ω–æ–π —É–∂–µ –≤ check_signal –¥–ª—è TREND)
        
        return score
    
    def _check_rsi_confirmation(self, df: pd.DataFrame, direction: str) -> bool:
        """
        –§–ê–ó–ê 3: RSI —Ñ–∏–ª—å—Ç—Ä
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø—É–ª—å—Å —á–µ—Ä–µ–∑ RSI
        """
        from src.indicators.technical import calculate_rsi
        
        rsi = calculate_rsi(df['close'], period=14)
        current_rsi = rsi.iloc[-1]
        
        if direction == 'LONG':
            return current_rsi > 45  # –°–ª–∞–±—ã–π –∏–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö
        else:  # SHORT
            return current_rsi < 55  # –°–ª–∞–±—ã–π –∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑
    
    def _check_market_structure(self, df: pd.DataFrame, direction: str) -> bool:
        """
        –§–ê–ó–ê 3: Market Structure –ø—Ä–æ–≤–µ—Ä–∫–∞
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Higher Highs / Lower Lows
        """
        if len(df) < 10:
            return True  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        
        highs = df['high'].tail(6).values
        lows = df['low'].tail(6).values
        
        if direction == 'LONG':
            # –î–ª—è LONG: Higher Highs –∏ Higher Lows
            hh = highs[-1] >= highs[-3] >= highs[-5]
            hl = lows[-1] >= lows[-3] >= lows[-5]
            return hh or hl  # –•–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ
        else:  # SHORT
            # –î–ª—è SHORT: Lower Lows –∏ Lower Highs
            ll = lows[-1] <= lows[-3] <= lows[-5]
            lh = highs[-1] <= highs[-3] <= highs[-5]
            return ll or lh
    
    def _find_recent_breakout(self, df: pd.DataFrame, atr: pd.Series, vwap: pd.Series, adx: pd.Series, 
                              regime: str, adx_threshold: float, volume_threshold: float) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –ø—Ä–æ–±–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º swing levels –∏ ADX —Ñ–∏–ª—å—Ç—Ä–æ–º"""
        df_len = len(df)
        
        for i in range(-self.breakout_lookback, -1):  # –î–æ -1, —á—Ç–æ–±—ã –Ω–µ –≤–∫–ª—é—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞—Ä
            if abs(i) >= df_len:
                continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            pos_idx = df_len + i
            
            bar_close = df['close'].iloc[i]
            bar_high = df['high'].iloc[i]
            bar_low = df['low'].iloc[i]
            bar_volume = df['volume'].iloc[i]
            bar_atr = atr.iloc[i]
            bar_vwap = vwap.iloc[i] if vwap is not None and i < len(vwap) else None
            bar_adx = adx.iloc[i]
            
            # –ù–∞–π—Ç–∏ swing high/low –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –±–∞—Ä–æ–º (–ø–µ—Ä–µ–¥–∞–µ–º –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô –∏–Ω–¥–µ–∫—Å!)
            swings = self._find_swing_high_low(df, pos_idx, lookback=20, buffer=3)
            
            if swings['swing_high'] is None and swings['swing_low'] is None:
                continue
            
            # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
            if i - 20 < -len(df):
                continue
            avg_vol = df['volume'].iloc[i-20:i].mean()
            vol_ratio = bar_volume / avg_vol if avg_vol > 0 else 0
            
            # ADX —Ñ–∏–ª—å—Ç—Ä: ADX > threshold –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ breakout (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞)
            if bar_adx < adx_threshold:
                strategy_logger.debug(f"    ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–±–æ—è –Ω–∞ –±–∞—Ä–µ {i}: ADX —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π ({bar_adx:.1f} < {adx_threshold})")
                continue
            
            # –§–ê–ó–ê 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ ADX —Ä–∞—Å—Ç–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è TREND —Ä–µ–∂–∏–º–∞)
            # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ADX[-1] > ADX[-3] (—Ç–µ–∫—É—â–∏–π ADX –≤—ã—à–µ —á–µ–º 2 –±–∞—Ä–∞ –Ω–∞–∑–∞–¥)
            if regime == 'TREND' and abs(i) >= 3:
                adx_prev_2 = adx.iloc[i - 2]  # 2 –±–∞—Ä–∞ –Ω–∞–∑–∞–¥
                adx_rising = bar_adx > adx_prev_2
                if not adx_rising:
                    strategy_logger.debug(f"    ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–±–æ—è –Ω–∞ –±–∞—Ä–µ {i}: ADX –ø–∞–¥–∞–µ—Ç ({bar_adx:.1f} <= {adx_prev_2:.1f}) –≤ TREND")
                    continue
            
            # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö (—á–µ—Ä–µ–∑ swing high) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π volume_threshold
            if (swings['swing_high'] is not None and 
                bar_close > swings['swing_high'] and 
                (bar_close - swings['swing_high']) >= self.breakout_atr * bar_atr and
                vol_ratio >= volume_threshold):
                strategy_logger.debug(f"    ‚úÖ –ü—Ä–æ–±–æ–π LONG –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∞—Ä–µ {i}: ADX={bar_adx:.1f}, volume {vol_ratio:.1f}x (–ø–æ—Ä–æ–≥ {volume_threshold}x –¥–ª—è {regime})")
                return {
                    'direction': 'LONG',
                    'level': swings['swing_high'],
                    'bar_index': i,
                    'atr': bar_atr,
                    'vwap': bar_vwap,
                    'adx': bar_adx,
                    'volume_ratio': vol_ratio  # –§–ê–ó–ê 2: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è score
                }
            
            # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑ (—á–µ—Ä–µ–∑ swing low) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π volume_threshold
            elif (swings['swing_low'] is not None and 
                  bar_close < swings['swing_low'] and 
                  (swings['swing_low'] - bar_close) >= self.breakout_atr * bar_atr and
                  vol_ratio >= volume_threshold):
                strategy_logger.debug(f"    ‚úÖ –ü—Ä–æ–±–æ–π SHORT –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∞—Ä–µ {i}: ADX={bar_adx:.1f}, volume {vol_ratio:.1f}x (–ø–æ—Ä–æ–≥ {volume_threshold}x –¥–ª—è {regime})")
                return {
                    'direction': 'SHORT',
                    'level': swings['swing_low'],
                    'bar_index': i,
                    'atr': bar_atr,
                    'vwap': bar_vwap,
                    'adx': bar_adx,
                    'volume_ratio': vol_ratio  # –§–ê–ó–ê 2: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è score
                }
        
        return None
    
    def check_signal(self, symbol: str, df: pd.DataFrame, 
                     regime: str, bias: str, 
                     indicators: Dict) -> Optional[Signal]:
        
        if len(df) < 50:
            strategy_logger.debug(f"    ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} –±–∞—Ä–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è 50")
            return None
        
        # –§–ê–ó–ê 1: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ bearish bias –≤ TREND —Ä–µ–∂–∏–º–µ
        if regime == 'TREND' and bias.lower() == 'bearish':
            strategy_logger.debug(f"    ‚ùå TREND + bearish bias = –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —É–±—ã—Ç–æ—á–Ω–æ (WR 12.5%)")
            return None
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR, ADX –∏ VWAP
        atr = calculate_atr(df['high'], df['low'], df['close'], period=14)
        current_atr = atr.iloc[-1]
        
        adx = calculate_adx(df['high'], df['low'], df['close'], period=14)
        current_adx = adx.iloc[-1]
        
        # –ü–æ–ª—É—á–∏—Ç—å VWAP –∏–∑ indicators –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
        vwap = indicators.get('vwap', None)
        
        # –í—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ADX –ø–æ—Ä–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if regime == 'TREND':
            adx_threshold = self.adx_threshold_trend  # 25 –¥–ª—è TREND
        elif regime == 'SQUEEZE':
            adx_threshold = self.adx_threshold_squeeze  # 15 –¥–ª—è SQUEEZE
        else:
            adx_threshold = self.adx_threshold_default  # 20 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –í—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π volume –ø–æ—Ä–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if regime == 'TREND':
            volume_threshold = self.volume_threshold_trend  # 1.8 –¥–ª—è TREND
        elif regime == 'SQUEEZE':
            volume_threshold = self.volume_threshold_squeeze  # 1.2 –¥–ª—è SQUEEZE
        else:
            volume_threshold = self.volume_threshold  # 1.5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ù–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –ø—Ä–æ–±–æ–π —Å ADX —Ñ–∏–ª—å—Ç—Ä–æ–º (–ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º –∏ –ø–æ—Ä–æ–≥–∏)
        breakout = self._find_recent_breakout(df, atr, vwap, adx, regime, adx_threshold, volume_threshold)
        if breakout is None:
            strategy_logger.debug(f"    ‚ùå –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –ø—Ä–æ–±–æ—è swing level (ADX>{adx_threshold}, vol>{volume_threshold}x –¥–ª—è —Ä–µ–∂–∏–º–∞ {regime})")
            return None
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
        strategy_logger.debug(f"    üìä –ü—Ä–æ–±–æ–π {breakout['direction']} —Å ADX={breakout.get('adx', 0):.1f}, —É—Ä–æ–≤–µ–Ω—å {breakout['level']:.4f}")
        
        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_close = df['close'].iloc[-1]
        current_high = df['high'].iloc[-1]
        current_low = df['low'].iloc[-1]
        
        # –ó–æ–Ω–∞ —Ä–µ—Ç–µ—Å—Ç–∞ = —ç–∫—Å—Ç—Ä–µ–º—É–º ¬± 0.2-0.3 ATR (–∏—Å–ø–æ–ª—å–∑—É–µ–º ATR —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–æ–±–æ—è!)
        breakout_level = breakout['level']
        breakout_atr = breakout['atr']
        breakout_vwap = breakout.get('vwap')
        
        retest_zone_upper = breakout_level + self.zone_atr[1] * breakout_atr
        retest_zone_lower = breakout_level - self.zone_atr[1] * breakout_atr
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å VWAP, —É—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (–ø–æ –º–∞–Ω—É–∞–ª—É)
        if breakout_vwap is not None:
            retest_zone_upper = min(retest_zone_upper, breakout_vwap + 0.1 * breakout_atr)
            retest_zone_lower = max(retest_zone_lower, breakout_vwap - 0.1 * breakout_atr)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è debug
        strategy_logger.debug(f"    üìä –ü—Ä–æ–±–æ–π –Ω–∞–π–¥–µ–Ω: {breakout['direction']} –Ω–∞ —É—Ä–æ–≤–Ω–µ {breakout_level:.4f}, ATR={breakout_atr:.4f}")
        strategy_logger.debug(f"    üìä –ó–æ–Ω–∞ —Ä–µ—Ç–µ—Å—Ç–∞: [{retest_zone_lower:.4f}, {retest_zone_upper:.4f}], —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_close:.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∞–Ω–∏—è –∑–æ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞—Ä–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π)
        lookback_retest = 5
        touched_zone = False
        reclaimed_level = False
        
        # LONG retest (–ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è –≤–≤–µ—Ä—Ö)
        if breakout['direction'] == 'LONG':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–Ω–∞ –∫–∞—Å–∞–ª–∞—Å—å –∑–æ–Ω—ã —Ä–µ—Ç–µ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –±–∞—Ä–æ–≤
            for i in range(-lookback_retest, 0):
                if abs(i) >= len(df):
                    continue
                bar_low = df['low'].iloc[i]
                bar_close = df['close'].iloc[i]
                
                # –ö–∞—Å–∞–Ω–∏–µ –∑–æ–Ω—ã
                if retest_zone_lower <= bar_low <= retest_zone_upper:
                    touched_zone = True
                
                # –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è (close –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ—è)
                if bar_low <= breakout_level and bar_close > breakout_level:
                    reclaimed_level = True
            
            # –¢–µ–∫—É—â–∏–π –±–∞—Ä —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è
            if touched_zone and reclaimed_level and current_close > breakout_level:
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ H4 bias
                    if bias == 'Bearish':
                        strategy_logger.debug(f"    ‚ùå LONG —Ä–µ—Ç–µ—Å—Ç –µ—Å—Ç—å, –Ω–æ H4 bias {bias}")
                        return None
                    
                    # –§–ê–ó–ê 1: Higher Timeframe Confirmation (—Ç–æ–ª—å–∫–æ –¥–ª—è TREND)
                    htf_confirmed = True
                    htf_has_data = False
                    if regime == 'TREND':
                        df_1h = indicators.get('1h')
                        df_4h = indicators.get('4h')
                        htf_confirmed, htf_has_data = self._check_higher_timeframe_trend(df_1h, df_4h, 'LONG')
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è - –±–ª–æ–∫–∏—Ä—É–µ–º
                        if htf_has_data and not htf_confirmed:
                            strategy_logger.debug(f"    ‚ùå LONG —Ä–µ—Ç–µ—Å—Ç OK, –Ω–æ Higher TF –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç—Ä–µ–Ω–¥ (1H/4H EMA200)")
                            return None  # –°—Ç—Ä–æ–≥–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è TREND —Ä–µ–∂–∏–º–∞
                        
                        if htf_confirmed:
                            strategy_logger.debug(f"    ‚úÖ Higher TF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç LONG —Ç—Ä–µ–Ω–¥ (1H+4H > EMA200)")
                        else:
                            strategy_logger.debug(f"    ‚ö†Ô∏è Higher TF: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ EMA200 (—à—Ç—Ä–∞—Ñ –∫ score)")
                    
                    # –§–ê–ó–ê 2: Bollinger Bands —Ñ–∏–ª—å—Ç—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è TREND)
                    bb_good = True
                    if regime == 'TREND':
                        bb_good = self._check_bollinger_position(df, 'LONG')
                        if not bb_good:
                            strategy_logger.debug(f"    ‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ —É –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã Bollinger (—Å–ª–∞–±—ã–π –∏–º–ø—É–ª—å—Å)")
                            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω–∏–∂–∞–µ–º score
                    
                    # –§–ê–ó–ê 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—Ç–µ—Å—Ç–∞
                    retest_bars_data = []
                    for i in range(-lookback_retest, 0):
                        if abs(i) < len(df):
                            retest_bars_data.append({
                                'low': df['low'].iloc[i],
                                'high': df['high'].iloc[i],
                                'open': df['open'].iloc[i],
                                'close': df['close'].iloc[i]
                            })
                    retest_quality = self._check_retest_quality(breakout, retest_bars_data, breakout_level)
                    strategy_logger.debug(f"    üìä –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—Ç–µ—Å—Ç–∞: {retest_quality:.2f}/1.0")
                    
                    # –§–ê–ó–ê 3: RSI Confirmation
                    rsi_confirmed = True
                    if regime == 'TREND':
                        rsi_confirmed = self._check_rsi_confirmation(df, 'LONG')
                        if not rsi_confirmed:
                            strategy_logger.debug(f"    ‚ö†Ô∏è RSI –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö")
                    
                    # –§–ê–ó–ê 3: Market Structure
                    market_structure_good = True
                    if regime == 'TREND':
                        market_structure_good = self._check_market_structure(df, 'LONG')
                        if not market_structure_good:
                            strategy_logger.debug(f"    ‚ö†Ô∏è Market structure –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç Higher Highs/Lows")
                    
                    entry = current_close
                    
                    # –§–ê–ó–ê 1: –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—á—ë—Ç–∞ TP/SL
                    if self.use_atr_based_tp_sl:
                        # ATR-based TP/SL (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
                        stop_loss = entry - (current_atr * self.atr_sl_multiplier)
                        tp1 = entry + (current_atr * self.atr_tp1_multiplier)
                        tp2 = entry + (current_atr * self.atr_tp2_multiplier)
                        strategy_logger.debug(f"    üìä ATR-based TP/SL: SL={self.atr_sl_multiplier}√óATR, TP1={self.atr_tp1_multiplier}√óATR, TP2={self.atr_tp2_multiplier}√óATR")
                    else:
                        # SR-based TP/SL (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ - —Ç–æ—á–Ω—ã–µ –∑–æ–Ω—ã S/R)
                        sr_zones = create_sr_zones(df, current_atr, buffer_mult=0.25)
                        nearest_zone = find_nearest_zone(entry, sr_zones, 'LONG')
                        stop_loss = calculate_stop_loss_from_zone(entry, nearest_zone, current_atr, 'LONG', fallback_mult=2.0)
                        
                        # –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç–µ–π–∫–æ–≤ 1R –∏ 2R
                        atr_distance = abs(entry - stop_loss)
                        tp1 = entry + atr_distance * 1.0  # 1R
                        tp2 = entry + atr_distance * 2.0  # 2R
                        strategy_logger.debug(f"    üìä SR-based TP/SL: SL –∏–∑ S/R –∑–æ–Ω—ã, TP1=1R, TP2=2R")
                    
                    # –§–ê–ó–ê 2+3: –£–ª—É—á—à–µ–Ω–Ω–∞—è score —Å–∏—Å—Ç–µ–º–∞
                    base_score = 2.5
                    improved_score = self._calculate_improved_score(
                        base_score, breakout, regime, bias, retest_quality,
                        bb_good, htf_confirmed, htf_has_data, rsi_confirmed, market_structure_good
                    )
                    
                    strategy_logger.debug(f"    üíØ Score: {base_score:.1f} ‚Üí {improved_score:.1f} (—Ä–µ–∂–∏–º {regime})")
                    
                    # –ü–æ–ª—É—á–∏—Ç—å CVD –∏ OI –∏–∑ indicators
                    cvd_val = indicators.get(self.timeframe, {}).get('cvd', 0)
                    # –ï—Å–ª–∏ cvd_val - —ç—Ç–æ Series, –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if hasattr(cvd_val, 'iloc'):
                        cvd_val = float(cvd_val.iloc[-1]) if len(cvd_val) > 0 else 0
                    cvd_direction = 'Bullish' if cvd_val > 0 else ('Bearish' if cvd_val < 0 else 'Neutral')
                    oi_delta_pct = indicators.get('doi_pct', 0.0)
                    
                    signal = Signal(
                        strategy_name=self.name,
                        symbol=symbol,
                        direction='LONG',
                        timestamp=pd.Timestamp.now(),
                        timeframe=self.timeframe,
                        entry_price=float(entry),
                        stop_loss=float(stop_loss),
                        take_profit_1=float(tp1),
                        take_profit_2=float(tp2),
                        regime=regime,
                        bias=bias,
                        base_score=improved_score,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π score
                        volume_ratio=float(breakout.get('volume_ratio', 1.0)),  # –ò–ó BREAKOUT
                        cvd_direction=cvd_direction,  # –ò–ó INDICATORS
                        oi_delta_percent=float(oi_delta_pct),  # –ò–ó INDICATORS
                        metadata={
                            'breakout_level': float(breakout_level),
                            'retest_zone_upper': float(retest_zone_upper),
                            'retest_zone_lower': float(retest_zone_lower),
                            'breakout_bar_index': int(breakout['bar_index']),
                            'adx': float(breakout.get('adx', 0)),
                            'volume_ratio': float(breakout.get('volume_ratio', 1.0)),
                            'retest_quality': float(retest_quality),
                            'htf_confirmed': htf_confirmed,
                            'bb_good': bb_good,
                            'rsi_confirmed': rsi_confirmed,
                            'market_structure_good': market_structure_good
                        }
                    )
                    return signal
        
        # SHORT retest (–ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è –≤–Ω–∏–∑)
        elif breakout['direction'] == 'SHORT':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–Ω–∞ –∫–∞—Å–∞–ª–∞—Å—å –∑–æ–Ω—ã —Ä–µ—Ç–µ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –±–∞—Ä–æ–≤
            for i in range(-lookback_retest, 0):
                if abs(i) >= len(df):
                    continue
                bar_high = df['high'].iloc[i]
                bar_close = df['close'].iloc[i]
                
                # –ö–∞—Å–∞–Ω–∏–µ –∑–æ–Ω—ã
                if retest_zone_lower <= bar_high <= retest_zone_upper:
                    touched_zone = True
                
                # –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è (close –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ—è)
                if bar_high >= breakout_level and bar_close < breakout_level:
                    reclaimed_level = True
            
            # –¢–µ–∫—É—â–∏–π –±–∞—Ä —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
            if touched_zone and reclaimed_level and current_close < breakout_level:
                    
                    if bias == 'Bullish':
                        strategy_logger.debug(f"    ‚ùå SHORT —Ä–µ—Ç–µ—Å—Ç –µ—Å—Ç—å, –Ω–æ H4 bias {bias}")
                        return None
                    
                    # –§–ê–ó–ê 1: Higher Timeframe Confirmation (—Ç–æ–ª—å–∫–æ –¥–ª—è TREND)
                    htf_confirmed = True
                    htf_has_data = False
                    if regime == 'TREND':
                        df_1h = indicators.get('1h')
                        df_4h = indicators.get('4h')
                        htf_confirmed, htf_has_data = self._check_higher_timeframe_trend(df_1h, df_4h, 'SHORT')
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è - –±–ª–æ–∫–∏—Ä—É–µ–º
                        if htf_has_data and not htf_confirmed:
                            strategy_logger.debug(f"    ‚ùå SHORT —Ä–µ—Ç–µ—Å—Ç OK, –Ω–æ Higher TF –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç—Ä–µ–Ω–¥ (1H/4H EMA200)")
                            return None  # –°—Ç—Ä–æ–≥–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è TREND —Ä–µ–∂–∏–º–∞
                        
                        if htf_confirmed:
                            strategy_logger.debug(f"    ‚úÖ Higher TF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç SHORT —Ç—Ä–µ–Ω–¥ (1H+4H < EMA200)")
                        else:
                            strategy_logger.debug(f"    ‚ö†Ô∏è Higher TF: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ EMA200 (—à—Ç—Ä–∞—Ñ –∫ score)")
                    
                    # –§–ê–ó–ê 2: Bollinger Bands —Ñ–∏–ª—å—Ç—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è TREND)
                    bb_good = True
                    if regime == 'TREND':
                        bb_good = self._check_bollinger_position(df, 'SHORT')
                        if not bb_good:
                            strategy_logger.debug(f"    ‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ —É –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã Bollinger (—Å–ª–∞–±—ã–π –∏–º–ø—É–ª—å—Å)")
                            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω–∏–∂–∞–µ–º score
                    
                    # –§–ê–ó–ê 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—Ç–µ—Å—Ç–∞
                    retest_bars_data = []
                    for i in range(-lookback_retest, 0):
                        if abs(i) < len(df):
                            retest_bars_data.append({
                                'low': df['low'].iloc[i],
                                'high': df['high'].iloc[i],
                                'open': df['open'].iloc[i],
                                'close': df['close'].iloc[i]
                            })
                    retest_quality = self._check_retest_quality(breakout, retest_bars_data, breakout_level)
                    strategy_logger.debug(f"    üìä –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—Ç–µ—Å—Ç–∞: {retest_quality:.2f}/1.0")
                    
                    # –§–ê–ó–ê 3: RSI Confirmation
                    rsi_confirmed = True
                    if regime == 'TREND':
                        rsi_confirmed = self._check_rsi_confirmation(df, 'SHORT')
                        if not rsi_confirmed:
                            strategy_logger.debug(f"    ‚ö†Ô∏è RSI –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑")
                    
                    # –§–ê–ó–ê 3: Market Structure
                    market_structure_good = True
                    if regime == 'TREND':
                        market_structure_good = self._check_market_structure(df, 'SHORT')
                        if not market_structure_good:
                            strategy_logger.debug(f"    ‚ö†Ô∏è Market structure –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç Lower Lows/Highs")
                    
                    entry = current_close
                    
                    # –§–ê–ó–ê 1: –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—á—ë—Ç–∞ TP/SL
                    if self.use_atr_based_tp_sl:
                        # ATR-based TP/SL (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
                        stop_loss = entry + (current_atr * self.atr_sl_multiplier)
                        tp1 = entry - (current_atr * self.atr_tp1_multiplier)
                        tp2 = entry - (current_atr * self.atr_tp2_multiplier)
                        strategy_logger.debug(f"    üìä ATR-based TP/SL: SL={self.atr_sl_multiplier}√óATR, TP1={self.atr_tp1_multiplier}√óATR, TP2={self.atr_tp2_multiplier}√óATR")
                    else:
                        # SR-based TP/SL (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ - —Ç–æ—á–Ω—ã–µ –∑–æ–Ω—ã S/R)
                        sr_zones = create_sr_zones(df, current_atr, buffer_mult=0.25)
                        nearest_zone = find_nearest_zone(entry, sr_zones, 'SHORT')
                        stop_loss = calculate_stop_loss_from_zone(entry, nearest_zone, current_atr, 'SHORT', fallback_mult=2.0)
                        
                        # –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç–µ–π–∫–æ–≤ 1R –∏ 2R
                        atr_distance = abs(stop_loss - entry)
                        tp1 = entry - atr_distance * 1.0  # 1R
                        tp2 = entry - atr_distance * 2.0  # 2R
                        strategy_logger.debug(f"    üìä SR-based TP/SL: SL –∏–∑ S/R –∑–æ–Ω—ã, TP1=1R, TP2=2R")
                    
                    # –§–ê–ó–ê 2+3: –£–ª—É—á—à–µ–Ω–Ω–∞—è score —Å–∏—Å—Ç–µ–º–∞
                    base_score = 2.5
                    improved_score = self._calculate_improved_score(
                        base_score, breakout, regime, bias, retest_quality,
                        bb_good, htf_confirmed, htf_has_data, rsi_confirmed, market_structure_good
                    )
                    
                    strategy_logger.debug(f"    üíØ Score: {base_score:.1f} ‚Üí {improved_score:.1f} (—Ä–µ–∂–∏–º {regime})")
                    
                    # –ü–æ–ª—É—á–∏—Ç—å CVD –∏ OI –∏–∑ indicators
                    cvd_val = indicators.get(self.timeframe, {}).get('cvd', 0)
                    # –ï—Å–ª–∏ cvd_val - —ç—Ç–æ Series, –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if hasattr(cvd_val, 'iloc'):
                        cvd_val = float(cvd_val.iloc[-1]) if len(cvd_val) > 0 else 0
                    cvd_direction = 'Bullish' if cvd_val > 0 else ('Bearish' if cvd_val < 0 else 'Neutral')
                    oi_delta_pct = indicators.get('doi_pct', 0.0)
                    
                    signal = Signal(
                        strategy_name=self.name,
                        symbol=symbol,
                        direction='SHORT',
                        timestamp=pd.Timestamp.now(),
                        timeframe=self.timeframe,
                        entry_price=float(entry),
                        stop_loss=float(stop_loss),
                        take_profit_1=float(tp1),
                        take_profit_2=float(tp2),
                        regime=regime,
                        bias=bias,
                        base_score=improved_score,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π score
                        volume_ratio=float(breakout.get('volume_ratio', 1.0)),  # –ò–ó BREAKOUT
                        cvd_direction=cvd_direction,  # –ò–ó INDICATORS
                        oi_delta_percent=float(oi_delta_pct),  # –ò–ó INDICATORS
                        metadata={
                            'breakout_level': float(breakout_level),
                            'retest_zone_upper': float(retest_zone_upper),
                            'retest_zone_lower': float(retest_zone_lower),
                            'breakout_bar_index': int(breakout['bar_index']),
                            'adx': float(breakout.get('adx', 0)),
                            'volume_ratio': float(breakout.get('volume_ratio', 1.0)),
                            'retest_quality': float(retest_quality),
                            'htf_confirmed': htf_confirmed,
                            'bb_good': bb_good,
                            'rsi_confirmed': rsi_confirmed,
                            'market_structure_good': market_structure_good
                        }
                    )
                    return signal
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        if not touched_zone:
            strategy_logger.debug(f"    ‚ùå –¶–µ–Ω–∞ –ù–ï –∫–∞—Å–∞–ª–∞—Å—å –∑–æ–Ω—ã —Ä–µ—Ç–µ—Å—Ç–∞ [{retest_zone_lower:.4f}, {retest_zone_upper:.4f}] –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lookback_retest} –±–∞—Ä–æ–≤")
        elif not reclaimed_level:
            if breakout['direction'] == 'LONG':
                strategy_logger.debug(f"    ‚ùå –ó–æ–Ω–∞ –∫–∞—Å–∞–ª–∞—Å—å, –Ω–æ –ù–ï–¢ rejection: –Ω—É–∂–µ–Ω close –í–´–®–ï {breakout_level:.4f} –ø–æ—Å–ª–µ –∫–∞—Å–∞–Ω–∏—è —Å–Ω–∏–∑—É")
            else:
                strategy_logger.debug(f"    ‚ùå –ó–æ–Ω–∞ –∫–∞—Å–∞–ª–∞—Å—å, –Ω–æ –ù–ï–¢ rejection: –Ω—É–∂–µ–Ω close –ù–ò–ñ–ï {breakout_level:.4f} –ø–æ—Å–ª–µ –∫–∞—Å–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É")
        else:
            strategy_logger.debug(f"    ‚ùå –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {current_close:.4f} –Ω–µ {'–≤—ã—à–µ' if breakout['direction'] == 'LONG' else '–Ω–∏–∂–µ'} —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ—è {breakout_level:.4f}")
        return None
