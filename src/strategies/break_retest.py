from typing import Dict, Optional
import pandas as pd
import numpy as np
from src.strategies.base_strategy import BaseStrategy, Signal
from src.utils.config import config
from src.utils.strategy_logger import strategy_logger
from src.indicators.technical import calculate_atr, calculate_adx
from src.utils.sr_zones_15m import create_sr_zones, find_nearest_zone, calculate_stop_loss_from_zone


class BreakRetestStrategy(BaseStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è #5: Break & Retest
    
    –õ–æ–≥–∏–∫–∞ –ø–æ –º–∞–Ω—É–∞–ª—É:
    - –ü—Ä–æ–±–æ–π —Å close ‚â•0.25 ATR –∏ –æ–±—ä—ë–º–æ–º >1.5‚Äì2√ó
    - –ó–æ–Ω–∞ —Ä–µ—Ç–µ—Å—Ç–∞ = —ç–∫—Å—Ç—Ä–µ–º—É–º¬±0.2‚Äì0.3 ATR ‚à© AVWAP(–±–∞—Ä –ø—Ä–æ–±–æ—è)
    - –¢—Ä–∏–≥–≥–µ—Ä: 50% –ª–∏–º–∏—Ç–æ–º –≤ –∑–æ–Ω–µ, 50% ‚Äî –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    - –°—Ç–æ–ø: –∑–∞ —Å–≤–∏–Ω–≥-—Ä–µ–∞–∫—Ü–∏–µ–π +0.2‚Äì0.3 ATR
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: CVD flip, imbalance flip/refill, OI –Ω–µ –ø–∞–¥–∞–µ—Ç
    """
    
    def __init__(self):
        strategy_config = config.get('strategies.retest', {})
        super().__init__("Break & Retest", strategy_config)
        
        self.breakout_atr = strategy_config.get('breakout_atr', 0.25)
        self.zone_atr = strategy_config.get('zone_atr', [0.2, 0.3])
        self.volume_threshold = strategy_config.get('volume_threshold', 1.5)
        self.split_ratio = strategy_config.get('split_ratio', 0.5)  # 50/50
        self.timeframe = '15m'
        self.breakout_lookback = 20  # –ò—â–µ–º –ø—Ä–æ–±–æ–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞—Ä–æ–≤
        self.adx_threshold = config.get('market_detector.trend.adx_threshold', 20)
    
    def get_timeframe(self) -> str:
        return self.timeframe
    
    def get_category(self) -> str:
        return "pullback"
    
    def _find_swing_high_low(self, df: pd.DataFrame, end_pos: int, lookback: int = 20, buffer: int = 3) -> Dict:
        """–ù–∞–π—Ç–∏ swing high/low —Å –±—É—Ñ–µ—Ä–æ–º N –±–∞—Ä–æ–≤
        Args:
            end_pos: –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô –∏–Ω–¥–µ–∫—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        start_pos = max(buffer, end_pos - lookback)
        
        swing_high = None
        swing_high_idx = None
        swing_low = None
        swing_low_idx = None
        
        # –ò—â–µ–º swing high (–ø–∏–∫ —Å buffer –±–∞—Ä–æ–≤ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
        for i in range(start_pos, end_pos - buffer):
            if i < buffer or i + buffer >= len(df):
                continue
            
            high_val = df['high'].iloc[i]
            is_swing_high = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            for j in range(i - buffer, i + buffer + 1):
                if j != i and df['high'].iloc[j] >= high_val:
                    is_swing_high = False
                    break
            
            if is_swing_high:
                swing_high = high_val
                swing_high_idx = i
        
        # –ò—â–µ–º swing low (–≤–ø–∞–¥–∏–Ω–∞ —Å buffer –±–∞—Ä–æ–≤ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
        for i in range(start_pos, end_pos - buffer):
            if i < buffer or i + buffer >= len(df):
                continue
            
            low_val = df['low'].iloc[i]
            is_swing_low = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            for j in range(i - buffer, i + buffer + 1):
                if j != i and df['low'].iloc[j] <= low_val:
                    is_swing_low = False
                    break
            
            if is_swing_low:
                swing_low = low_val
                swing_low_idx = i
        
        return {
            'swing_high': swing_high,
            'swing_high_idx': swing_high_idx,
            'swing_low': swing_low,
            'swing_low_idx': swing_low_idx
        }
    
    def _find_recent_breakout(self, df: pd.DataFrame, atr: pd.Series, vwap: pd.Series, adx: pd.Series) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –ø—Ä–æ–±–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º swing levels –∏ ADX —Ñ–∏–ª—å—Ç—Ä–æ–º"""
        df_len = len(df)
        
        for i in range(-self.breakout_lookback, -1):  # –î–æ -1, —á—Ç–æ–±—ã –Ω–µ –≤–∫–ª—é—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞—Ä
            if abs(i) >= df_len:
                continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            pos_idx = df_len + i
            
            bar_close = df['close'].iloc[i]
            bar_high = df['high'].iloc[i]
            bar_low = df['low'].iloc[i]
            bar_volume = df['volume'].iloc[i]
            bar_atr = atr.iloc[i]
            bar_vwap = vwap.iloc[i] if vwap is not None and i < len(vwap) else None
            bar_adx = adx.iloc[i]
            
            # –ù–∞–π—Ç–∏ swing high/low –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –±–∞—Ä–æ–º (–ø–µ—Ä–µ–¥–∞–µ–º –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô –∏–Ω–¥–µ–∫—Å!)
            swings = self._find_swing_high_low(df, pos_idx, lookback=20, buffer=3)
            
            if swings['swing_high'] is None and swings['swing_low'] is None:
                continue
            
            # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º
            if i - 20 < -len(df):
                continue
            avg_vol = df['volume'].iloc[i-20:i].mean()
            vol_ratio = bar_volume / avg_vol if avg_vol > 0 else 0
            
            # ADX —Ñ–∏–ª—å—Ç—Ä: ADX > threshold –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ breakout
            if bar_adx < self.adx_threshold:
                strategy_logger.debug(f"    ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–±–æ—è –Ω–∞ –±–∞—Ä–µ {i}: ADX —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π ({bar_adx:.1f} < {self.adx_threshold})")
                continue
            
            # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö (—á–µ—Ä–µ–∑ swing high)
            if (swings['swing_high'] is not None and 
                bar_close > swings['swing_high'] and 
                (bar_close - swings['swing_high']) >= self.breakout_atr * bar_atr and
                vol_ratio >= self.volume_threshold):
                strategy_logger.debug(f"    ‚úÖ –ü—Ä–æ–±–æ–π LONG –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∞—Ä–µ {i}: ADX={bar_adx:.1f}, volume {vol_ratio:.1f}x")
                return {
                    'direction': 'LONG',
                    'level': swings['swing_high'],
                    'bar_index': i,
                    'atr': bar_atr,
                    'vwap': bar_vwap,
                    'adx': bar_adx
                }
            
            # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑ (—á–µ—Ä–µ–∑ swing low)
            elif (swings['swing_low'] is not None and 
                  bar_close < swings['swing_low'] and 
                  (swings['swing_low'] - bar_close) >= self.breakout_atr * bar_atr and
                  vol_ratio >= self.volume_threshold):
                strategy_logger.debug(f"    ‚úÖ –ü—Ä–æ–±–æ–π SHORT –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∞—Ä–µ {i}: ADX={bar_adx:.1f}, volume {vol_ratio:.1f}x")
                return {
                    'direction': 'SHORT',
                    'level': swings['swing_low'],
                    'bar_index': i,
                    'atr': bar_atr,
                    'vwap': bar_vwap,
                    'adx': bar_adx
                }
        
        return None
    
    def check_signal(self, symbol: str, df: pd.DataFrame, 
                     regime: str, bias: str, 
                     indicators: Dict) -> Optional[Signal]:
        
        if len(df) < 50:
            strategy_logger.debug(f"    ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} –±–∞—Ä–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è 50")
            return None
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR, ADX –∏ VWAP
        atr = calculate_atr(df['high'], df['low'], df['close'], period=14)
        current_atr = atr.iloc[-1]
        
        adx = calculate_adx(df['high'], df['low'], df['close'], period=14)
        current_adx = adx.iloc[-1]
        
        # –ü–æ–ª—É—á–∏—Ç—å VWAP –∏–∑ indicators –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
        vwap = indicators.get('vwap', None)
        
        # –ù–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–∏–π –ø—Ä–æ–±–æ–π —Å ADX —Ñ–∏–ª—å—Ç—Ä–æ–º
        breakout = self._find_recent_breakout(df, atr, vwap, adx)
        if breakout is None:
            strategy_logger.debug(f"    ‚ùå –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –ø—Ä–æ–±–æ—è swing level —Å –æ–±—ä–µ–º–æ–º >{self.volume_threshold}x, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º ‚â•{self.breakout_atr} ATR –∏ ADX > 20")
            return None
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–±–æ—è
        strategy_logger.debug(f"    üìä –ü—Ä–æ–±–æ–π {breakout['direction']} —Å ADX={breakout.get('adx', 0):.1f}, —É—Ä–æ–≤–µ–Ω—å {breakout['level']:.4f}")
        
        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_close = df['close'].iloc[-1]
        current_high = df['high'].iloc[-1]
        current_low = df['low'].iloc[-1]
        
        # –ó–æ–Ω–∞ —Ä–µ—Ç–µ—Å—Ç–∞ = —ç–∫—Å—Ç—Ä–µ–º—É–º ¬± 0.2-0.3 ATR (–∏—Å–ø–æ–ª—å–∑—É–µ–º ATR —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–æ–±–æ—è!)
        breakout_level = breakout['level']
        breakout_atr = breakout['atr']
        breakout_vwap = breakout.get('vwap')
        
        retest_zone_upper = breakout_level + self.zone_atr[1] * breakout_atr
        retest_zone_lower = breakout_level - self.zone_atr[1] * breakout_atr
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å VWAP, —É—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (–ø–æ –º–∞–Ω—É–∞–ª—É)
        if breakout_vwap is not None:
            retest_zone_upper = min(retest_zone_upper, breakout_vwap + 0.1 * breakout_atr)
            retest_zone_lower = max(retest_zone_lower, breakout_vwap - 0.1 * breakout_atr)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è debug
        strategy_logger.debug(f"    üìä –ü—Ä–æ–±–æ–π –Ω–∞–π–¥–µ–Ω: {breakout['direction']} –Ω–∞ —É—Ä–æ–≤–Ω–µ {breakout_level:.4f}, ATR={breakout_atr:.4f}")
        strategy_logger.debug(f"    üìä –ó–æ–Ω–∞ —Ä–µ—Ç–µ—Å—Ç–∞: [{retest_zone_lower:.4f}, {retest_zone_upper:.4f}], —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_close:.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∞–Ω–∏—è –∑–æ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞—Ä–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π)
        lookback_retest = 5
        touched_zone = False
        reclaimed_level = False
        
        # LONG retest (–ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è –≤–≤–µ—Ä—Ö)
        if breakout['direction'] == 'LONG':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–Ω–∞ –∫–∞—Å–∞–ª–∞—Å—å –∑–æ–Ω—ã —Ä–µ—Ç–µ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –±–∞—Ä–æ–≤
            for i in range(-lookback_retest, 0):
                if abs(i) >= len(df):
                    continue
                bar_low = df['low'].iloc[i]
                bar_close = df['close'].iloc[i]
                
                # –ö–∞—Å–∞–Ω–∏–µ –∑–æ–Ω—ã
                if retest_zone_lower <= bar_low <= retest_zone_upper:
                    touched_zone = True
                
                # –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è (close –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ—è)
                if bar_low <= breakout_level and bar_close > breakout_level:
                    reclaimed_level = True
            
            # –¢–µ–∫—É—â–∏–π –±–∞—Ä —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è
            if touched_zone and reclaimed_level and current_close > breakout_level:
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ H4 bias
                    if bias == 'Bearish':
                        strategy_logger.debug(f"    ‚ùå LONG —Ä–µ—Ç–µ—Å—Ç –µ—Å—Ç—å, –Ω–æ H4 bias {bias}")
                        return None
                    
                    entry = current_close
                    
                    # –†–∞—Å—á–µ—Ç –∑–æ–Ω S/R –Ω–∞ 15m –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
                    sr_zones = create_sr_zones(df, current_atr, buffer_mult=0.25)
                    nearest_zone = find_nearest_zone(entry, sr_zones, 'LONG')
                    stop_loss = calculate_stop_loss_from_zone(entry, nearest_zone, current_atr, 'LONG', fallback_mult=2.0)
                    
                    # –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç–µ–π–∫–æ–≤ 1R –∏ 2R
                    atr_distance = abs(entry - stop_loss)
                    tp1 = entry + atr_distance * 1.0  # 1R
                    tp2 = entry + atr_distance * 2.0  # 2R
                    
                    signal = Signal(
                        strategy_name=self.name,
                        symbol=symbol,
                        direction='LONG',
                        timestamp=pd.Timestamp.now(),
                        timeframe=self.timeframe,
                        entry_price=float(entry),
                        stop_loss=float(stop_loss),
                        take_profit_1=float(tp1),
                        take_profit_2=float(tp2),
                        regime=regime,
                        bias=bias,
                        base_score=1.0,
                        metadata={
                            'breakout_level': float(breakout_level),
                            'retest_zone_upper': float(retest_zone_upper),
                            'retest_zone_lower': float(retest_zone_lower),
                            'breakout_bar_index': int(breakout['bar_index'])
                        }
                    )
                    return signal
        
        # SHORT retest (–ø–æ—Å–ª–µ –ø—Ä–æ–±–æ—è –≤–Ω–∏–∑)
        elif breakout['direction'] == 'SHORT':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–Ω–∞ –∫–∞—Å–∞–ª–∞—Å—å –∑–æ–Ω—ã —Ä–µ—Ç–µ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –±–∞—Ä–æ–≤
            for i in range(-lookback_retest, 0):
                if abs(i) >= len(df):
                    continue
                bar_high = df['high'].iloc[i]
                bar_close = df['close'].iloc[i]
                
                # –ö–∞—Å–∞–Ω–∏–µ –∑–æ–Ω—ã
                if retest_zone_lower <= bar_high <= retest_zone_upper:
                    touched_zone = True
                
                # –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è (close –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ—è)
                if bar_high >= breakout_level and bar_close < breakout_level:
                    reclaimed_level = True
            
            # –¢–µ–∫—É—â–∏–π –±–∞—Ä —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è
            if touched_zone and reclaimed_level and current_close < breakout_level:
                    
                    if bias == 'Bullish':
                        strategy_logger.debug(f"    ‚ùå SHORT —Ä–µ—Ç–µ—Å—Ç –µ—Å—Ç—å, –Ω–æ H4 bias {bias}")
                        return None
                    
                    entry = current_close
                    
                    # –†–∞—Å—á–µ—Ç –∑–æ–Ω S/R –Ω–∞ 15m –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
                    sr_zones = create_sr_zones(df, current_atr, buffer_mult=0.25)
                    nearest_zone = find_nearest_zone(entry, sr_zones, 'SHORT')
                    stop_loss = calculate_stop_loss_from_zone(entry, nearest_zone, current_atr, 'SHORT', fallback_mult=2.0)
                    
                    # –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç–µ–π–∫–æ–≤ 1R –∏ 2R
                    atr_distance = abs(stop_loss - entry)
                    tp1 = entry - atr_distance * 1.0  # 1R
                    tp2 = entry - atr_distance * 2.0  # 2R
                    
                    signal = Signal(
                        strategy_name=self.name,
                        symbol=symbol,
                        direction='SHORT',
                        timestamp=pd.Timestamp.now(),
                        timeframe=self.timeframe,
                        entry_price=float(entry),
                        stop_loss=float(stop_loss),
                        take_profit_1=float(tp1),
                        take_profit_2=float(tp2),
                        regime=regime,
                        bias=bias,
                        base_score=1.0,
                        metadata={
                            'breakout_level': float(breakout_level),
                            'retest_zone_upper': float(retest_zone_upper),
                            'retest_zone_lower': float(retest_zone_lower),
                            'breakout_bar_index': int(breakout['bar_index'])
                        }
                    )
                    return signal
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        if not touched_zone:
            strategy_logger.debug(f"    ‚ùå –¶–µ–Ω–∞ –ù–ï –∫–∞—Å–∞–ª–∞—Å—å –∑–æ–Ω—ã —Ä–µ—Ç–µ—Å—Ç–∞ [{retest_zone_lower:.4f}, {retest_zone_upper:.4f}] –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lookback_retest} –±–∞—Ä–æ–≤")
        elif not reclaimed_level:
            if breakout['direction'] == 'LONG':
                strategy_logger.debug(f"    ‚ùå –ó–æ–Ω–∞ –∫–∞—Å–∞–ª–∞—Å—å, –Ω–æ –ù–ï–¢ rejection: –Ω—É–∂–µ–Ω close –í–´–®–ï {breakout_level:.4f} –ø–æ—Å–ª–µ –∫–∞—Å–∞–Ω–∏—è —Å–Ω–∏–∑—É")
            else:
                strategy_logger.debug(f"    ‚ùå –ó–æ–Ω–∞ –∫–∞—Å–∞–ª–∞—Å—å, –Ω–æ –ù–ï–¢ rejection: –Ω—É–∂–µ–Ω close –ù–ò–ñ–ï {breakout_level:.4f} –ø–æ—Å–ª–µ –∫–∞—Å–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É")
        else:
            strategy_logger.debug(f"    ‚ùå –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {current_close:.4f} –Ω–µ {'–≤—ã—à–µ' if breakout['direction'] == 'LONG' else '–Ω–∏–∂–µ'} —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ—è {breakout_level:.4f}")
        return None
