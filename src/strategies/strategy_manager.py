from typing import Dict, List, Optional
import pandas as pd
from datetime import datetime
from src.strategies.base_strategy import BaseStrategy, Signal
from src.utils.logger import logger
from src.utils.strategy_logger import strategy_logger
from src.utils.config import config


class StrategyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
    
    def __init__(self, binance_client=None):
        self.strategies: List[BaseStrategy] = []
        self.enabled_strategy_ids = config.get('strategies.enabled', [])
        self.binance_client = binance_client
        
    def register_strategy(self, strategy: BaseStrategy):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        self.strategies.append(strategy)
        logger.info(f"Registered strategy: {strategy.name}")
    
    def register_all(self, strategies: List[BaseStrategy]):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ä–∞–∑—É"""
        for strategy in strategies:
            self.register_strategy(strategy)
    
    async def check_all_signals(self, symbol: str, timeframe_data: Dict[str, pd.DataFrame],
                         regime: str, bias: str, indicators: Dict) -> List[Signal]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            timeframe_data: –°–ª–æ–≤–∞—Ä—å {timeframe: DataFrame}
            regime: –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            bias: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ H4
            indicators: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        signals = []
        checked_count = 0
        skipped_count = 0
        
        for strategy in self.strategies:
            if not strategy.is_enabled():
                strategy_logger.debug(f"  ‚è≠Ô∏è  {strategy.name} - –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                skipped_count += 1
                continue
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            tf = strategy.get_timeframe()
            df = timeframe_data.get(tf)
            
            if df is None or len(df) < 50:
                strategy_logger.debug(f"  ‚è≠Ô∏è  {strategy.name} ({tf}) - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                skipped_count += 1
                continue
            
            try:
                strategy_logger.debug(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {strategy.name} ({tf})")
                checked_count += 1
                
                signal = strategy.check_signal(symbol, df, regime, bias, indicators)
                if signal:
                    # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å offset'—ã –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π entry_price
                    signal = strategy.calculate_risk_offsets(signal)
                    
                    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—É—é –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    entry_type, target_price, timeout = strategy.determine_entry_type(
                        signal.entry_price, df, signal.direction
                    )
                    signal.entry_type = entry_type
                    signal.entry_timeout = timeout
                    
                    # –î–ª—è MARKET –æ—Ä–¥–µ—Ä–æ–≤: –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
                    if entry_type == "MARKET" and self.binance_client:
                        try:
                            mark_data = await self.binance_client.get_mark_price(symbol)
                            current_mark_price = float(mark_data.get('markPrice', signal.entry_price))
                            
                            # –û–±–Ω–æ–≤–∏—Ç—å entry_price –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é mark price
                            strategy_logger.debug(
                                f"    üíπ Updated entry: {signal.entry_price:.4f} ‚Üí {current_mark_price:.4f} "
                                f"(mark price)"
                            )
                            signal.entry_price = current_mark_price
                            
                            # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å SL/TP —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É—è offset'—ã
                            if signal.direction == "LONG":
                                signal.stop_loss = current_mark_price - (signal.stop_offset or 0)
                                signal.take_profit_1 = current_mark_price + (signal.tp1_offset or 0)
                                if signal.tp2_offset:
                                    signal.take_profit_2 = current_mark_price + signal.tp2_offset
                            else:  # SHORT
                                signal.stop_loss = current_mark_price + (signal.stop_offset or 0)
                                signal.take_profit_1 = current_mark_price - (signal.tp1_offset or 0)
                                if signal.tp2_offset:
                                    signal.take_profit_2 = current_mark_price - signal.tp2_offset
                        except Exception as e:
                            strategy_logger.warning(f"    ‚ö†Ô∏è  Could not get mark price: {e}, using close price")
                    
                    # –î–ª—è LIMIT orders: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å SL/TP
                    if entry_type == "LIMIT":
                        signal.target_entry_price = target_price  # –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ —Å offset
                        current_price = float(df['close'].iloc[-1])
                        
                        # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å SL/TP –æ—Ç target_entry_price –∏—Å–ø–æ–ª—å–∑—É—è offset'—ã
                        # –≠—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç R:R –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ entry
                        if signal.direction == "LONG":
                            signal.stop_loss = signal.target_entry_price - (signal.stop_offset or 0)
                            signal.take_profit_1 = signal.target_entry_price + (signal.tp1_offset or 0)
                            if signal.tp2_offset:
                                signal.take_profit_2 = signal.target_entry_price + signal.tp2_offset
                        else:  # SHORT
                            signal.stop_loss = signal.target_entry_price + (signal.stop_offset or 0)
                            signal.take_profit_1 = signal.target_entry_price - (signal.tp1_offset or 0)
                            if signal.tp2_offset:
                                signal.take_profit_2 = signal.target_entry_price - signal.tp2_offset
                        
                        signal.entry_price = current_price  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        
                        strategy_logger.info(
                            f"  üìç LIMIT entry: target={signal.target_entry_price:.4f}, "
                            f"current={signal.entry_price:.4f}, SL={signal.stop_loss:.4f}, "
                            f"TP1={signal.take_profit_1:.4f}, timeout={timeout} bars"
                        )
                    
                    strategy.increment_signal_count()
                    signals.append(signal)
                    logger.info(
                        f"Signal generated: {signal.strategy_name} | "
                        f"{signal.symbol} {signal.direction} | Score: {signal.base_score} | "
                        f"Entry: {entry_type}"
                    )
                    strategy_logger.info(
                        f"  ‚úÖ {strategy.name} ‚Üí –°–ò–ì–ù–ê–õ! {signal.direction} | "
                        f"Entry: {signal.entry_price:.4f} | SL: {signal.stop_loss:.4f} | "
                        f"TP1: {signal.take_profit_1:.4f}"
                    )
                else:
                    strategy_logger.debug(f"  ‚ö™ {strategy.name} ‚Üí –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞")
            except Exception as e:
                logger.error(f"Error in strategy {strategy.name}: {e}", exc_info=True)
                strategy_logger.error(f"  ‚ùå {strategy.name} ‚Üí –û–®–ò–ë–ö–ê: {e}")
        
        strategy_logger.info(f"üìà –ò—Ç–æ–≥–æ: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}, —Å–∏–≥–Ω–∞–ª–æ–≤ {len(signals)}")
        
        return signals
    
    def get_strategy(self, name: str) -> Optional[BaseStrategy]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –∏–º–µ–Ω–∏"""
        for strategy in self.strategies:
            if strategy.name == name:
                return strategy
        return None
    
    def enable_strategy(self, name: str):
        """–í–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        strategy = self.get_strategy(name)
        if strategy:
            strategy.enable()
    
    def disable_strategy(self, name: str):
        """–í—ã–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        strategy = self.get_strategy(name)
        if strategy:
            strategy.disable()
    
    def get_all_stats(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return [s.get_stats() for s in self.strategies]
    
    def get_enabled_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return sum(1 for s in self.strategies if s.is_enabled())
    
    def get_total_signals_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return sum(s.signals_generated for s in self.strategies)
    
    def get_strategies_status(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        enabled_strategies = []
        disabled_strategies = []
        
        for strategy in self.strategies:
            if strategy.is_enabled():
                enabled_strategies.append(strategy.name)
            else:
                disabled_strategies.append(strategy.name)
        
        status_lines = []
        status_lines.append(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.strategies)}")
        status_lines.append(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {len(enabled_strategies)}")
        status_lines.append(f"‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ: {len(disabled_strategies)}")
        
        if enabled_strategies:
            status_lines.append(f"\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
            for name in enabled_strategies:
                status_lines.append(f"  - {name}")
        
        if disabled_strategies:
            status_lines.append(f"\nüî¥ –í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
            for name in disabled_strategies:
                status_lines.append(f"  - {name}")
        
        return "\n".join(status_lines)
