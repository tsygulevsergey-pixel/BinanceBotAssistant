from typing import Dict, Optional
import pandas as pd
import numpy as np
from src.strategies.base_strategy import BaseStrategy, Signal
from src.utils.config import config
from src.utils.strategy_logger import strategy_logger
from src.indicators.technical import calculate_atr, calculate_ema, calculate_adx
from src.utils.time_of_day import get_adaptive_volume_threshold
from src.utils.sr_zones_15m import create_sr_zones, find_nearest_zone, calculate_stop_loss_from_zone


class ATRMomentumStrategy(BaseStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è #6: ATR Momentum (–ø—Ä–æ—Ç—è–∂–∫–∞)
    
    –õ–æ–≥–∏–∫–∞ –ø–æ –º–∞–Ω—É–∞–ª—É:
    - –ò–º–ø—É–ª—å—Å-–±–∞—Ä ‚â•1.4√ó ATR, close –≤ –≤–µ—Ä—Ö–Ω.20%
    - Follow-through; H4 —Ç—Ä–µ–Ω–¥; –¥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ‚â•1.5 ATR
    - –¢—Ä–∏–≥–≥–µ—Ä: –ø—Ä–æ–±–æ–π high –∏–º–ø—É–ª—å—Å–∞/—Ñ–ª–∞–≥–∞ ‚â•0.2‚Äì0.3 ATR –∏–ª–∏ micro-pullback –∫ EMA9/20
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: –æ–±—ä—ë–º>2√ó, CVD dir, ŒîOI +1‚Ä¶+3%
    - –¢–∞–π–º-—Å—Ç–æ–ø: 6‚Äì8 –±–∞—Ä–æ–≤ –±–µ–∑ 0.5 ATR –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    
    def __init__(self):
        strategy_config = config.get('strategies.momentum', {})
        super().__init__("ATR Momentum", strategy_config)
        
        self.impulse_atr = strategy_config.get('impulse_atr', 1.4)
        self.close_percentile = strategy_config.get('close_percentile', 20)  # top 20%
        self.min_distance_resistance = strategy_config.get('min_distance_resistance', 2.0)  # –£–õ–£–ß–®–ï–ù–û: 2.0 ATR
        self.pullback_ema = strategy_config.get('pullback_ema', [9, 20])
        self.volume_threshold = strategy_config.get('volume_threshold', 2.0)
        self.breakout_atr_min = 0.2
        self.breakout_atr_max = 0.3
        self.timeframe = '15m'  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–º–ø—É–ª—å—Å–æ–≤
        
        # –ù–û–í–´–ï –§–ò–õ–¨–¢–†–´ 2025:
        self.htf_ema200_check = strategy_config.get('htf_ema200_check', True)
        self.prefer_pin_bar = strategy_config.get('prefer_pin_bar', True)
        self.rsi_overextension_filter = strategy_config.get('rsi_overextension_filter', True)
    
    def get_timeframe(self) -> str:
        return self.timeframe
    
    def get_category(self) -> str:
        return "breakout"
    
    def _check_higher_timeframe_trend(self, df_1h: Optional[pd.DataFrame], df_4h: Optional[pd.DataFrame], 
                                      direction: str) -> tuple[bool, bool]:
        """
        –ù–û–í–û–ï 2025: Higher Timeframe Confirmation
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–Ω–¥ –Ω–∞ 1H –∏ 4H —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É—è EMA200 (–∏–ª–∏ EMA50 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ)
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –µ—Å—Ç—å_–¥–∞–Ω–Ω—ã–µ)
        """
        from src.indicators.technical import calculate_ema
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1H
        if df_1h is None or len(df_1h) < 50:
            strategy_logger.debug(f"    ‚ö†Ô∏è HTF: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1H (–º–∏–Ω–∏–º—É–º 50 –±–∞—Ä–æ–≤)")
            return (False, False)
        
        ema_period_1h = 200 if len(df_1h) >= 200 else 50
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4H
        if df_4h is None or len(df_4h) < 50:
            strategy_logger.debug(f"    ‚ö†Ô∏è HTF: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö 4H (–º–∏–Ω–∏–º—É–º 50 –±–∞—Ä–æ–≤)")
            return (False, False)
        
        ema_period_4h = 200 if len(df_4h) >= 200 else 50
        
        # –†–∞—Å—á—ë—Ç EMA
        ema_1h = calculate_ema(df_1h['close'], period=ema_period_1h)
        price_1h = df_1h['close'].iloc[-1]
        
        ema_4h = calculate_ema(df_4h['close'], period=ema_period_4h)
        price_4h = df_4h['close'].iloc[-1]
        
        if direction == 'LONG':
            trend_1h = price_1h > ema_1h.iloc[-1]
            trend_4h = price_4h > ema_4h.iloc[-1]
            confirmed = trend_1h and trend_4h
            strategy_logger.debug(f"    üìä HTF Check LONG: 1H={'‚úÖ' if trend_1h else '‚ùå'}, 4H={'‚úÖ' if trend_4h else '‚ùå'}")
            return (confirmed, True)
        else:  # SHORT
            trend_1h = price_1h < ema_1h.iloc[-1]
            trend_4h = price_4h < ema_4h.iloc[-1]
            confirmed = trend_1h and trend_4h
            strategy_logger.debug(f"    üìä HTF Check SHORT: 1H={'‚úÖ' if trend_1h else '‚ùå'}, 4H={'‚úÖ' if trend_4h else '‚ùå'}")
            return (confirmed, True)
    
    def _check_pin_bar(self, bar_data: Dict, direction: str) -> bool:
        """
        –ù–û–í–û–ï 2025: –ü—Ä–æ–≤–µ—Ä–∫–∞ Pin Bar –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        Pin Bar = –¥–ª–∏–Ω–Ω—ã–π —Ö–≤–æ—Å—Ç (—Ç–µ–Ω—å) + –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ
        """
        body_size = abs(bar_data['close'] - bar_data['open'])
        
        if direction == 'LONG':
            # Bullish Pin Bar: –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∂–Ω–∏–π —Ö–≤–æ—Å—Ç
            lower_wick = min(bar_data['open'], bar_data['close']) - bar_data['low']
            upper_wick = bar_data['high'] - max(bar_data['open'], bar_data['close'])
            
            # –£—Å–ª–æ–≤–∏—è: –Ω–∏–∂–Ω–∏–π —Ö–≤–æ—Å—Ç > 2√ó —Ç–µ–ª–∞ –ò > –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ö–≤–æ—Å—Ç–∞
            if body_size > 0 and lower_wick > body_size * 2.0 and lower_wick > upper_wick * 1.5:
                return True
                
        else:  # SHORT
            # Bearish Pin Bar: –¥–ª–∏–Ω–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Ö–≤–æ—Å—Ç
            upper_wick = bar_data['high'] - max(bar_data['open'], bar_data['close'])
            lower_wick = min(bar_data['open'], bar_data['close']) - bar_data['low']
            
            # –£—Å–ª–æ–≤–∏—è: –≤–µ—Ä—Ö–Ω–∏–π —Ö–≤–æ—Å—Ç > 2√ó —Ç–µ–ª–∞ –ò > –Ω–∏–∂–Ω–µ–≥–æ —Ö–≤–æ—Å—Ç–∞
            if body_size > 0 and upper_wick > body_size * 2.0 and upper_wick > lower_wick * 1.5:
                return True
        
        return False
    
    def check_signal(self, symbol: str, df: pd.DataFrame, 
                     regime: str, bias: str, 
                     indicators: Dict) -> Optional[Signal]:
        
        # –†–∞–±–æ—Ç–∞–µ—Ç –≤ TREND —Ä–µ–∂–∏–º–µ
        if regime != 'TREND':
            strategy_logger.debug(f"    ‚ùå –†–µ–∂–∏–º {regime}, —Ç—Ä–µ–±—É–µ—Ç—Å—è TREND")
            return None
        
        if len(df) < 100:
            strategy_logger.debug(f"    ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} –±–∞—Ä–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è 100")
            return None
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        atr = calculate_atr(df['high'], df['low'], df['close'], period=14)
        ema9 = calculate_ema(df['close'], period=9)
        ema20 = calculate_ema(df['close'], period=20)
        ema200 = calculate_ema(df['close'], period=200)
        adx = calculate_adx(df['high'], df['low'], df['close'], period=14)
        
        # Rolling median ATR –¥–ª—è expansion —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        atr_median = atr.rolling(window=20).median().iloc[-1]
        
        # –¢–µ–∫—É—â–∏–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_close = df['close'].iloc[-1]
        current_high = df['high'].iloc[-1]
        current_low = df['low'].iloc[-1]
        current_atr = atr.iloc[-1]
        current_ema200 = ema200.iloc[-1] if ema200 is not None and not pd.isna(ema200.iloc[-1]) else current_close
        current_adx = adx.iloc[-1] if adx is not None and not pd.isna(adx.iloc[-1]) else 0
        
        # ADX —Ñ–∏–ª—å—Ç—Ä: ADX > 25 –¥–ª—è momentum
        if current_adx <= 25:
            strategy_logger.debug(f"    ‚ùå ADX —Å–ª–∞–±—ã–π –¥–ª—è momentum: {current_adx:.1f} <= 25")
            return None
        
        # –ù–∞–π—Ç–∏ –∏–º–ø—É–ª—å—Å-–±–∞—Ä (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –±–∞—Ä–æ–≤)
        impulse_bar_idx = None
        for i in range(-5, 0):
            bar_range = df['high'].iloc[i] - df['low'].iloc[i]
            bar_close = df['close'].iloc[i]
            bar_low = df['low'].iloc[i]
            bar_high = df['high'].iloc[i]
            bar_atr_median = atr.rolling(window=20).median().iloc[i]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –±–∞—Ä ‚â•1.4√ó median ATR (–Ω–µ current ATR)
            if bar_range >= self.impulse_atr * bar_atr_median:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞: close –≤ –≤–µ—Ä—Ö–Ω.20% (–¥–ª—è LONG)
                bar_position = (bar_close - bar_low) / bar_range if bar_range > 0 else 0
                if bar_position >= 0.80:  # top 20% = > 80% –æ—Ç low
                    impulse_bar_idx = i
                    break
        
        if impulse_bar_idx is None:
            strategy_logger.debug(f"    ‚ùå –ù–µ—Ç –∏–º–ø—É–ª—å—Å-–±–∞—Ä–∞ ‚â•{self.impulse_atr}√ó median ATR —Å close –≤ –≤–µ—Ä—Ö–Ω.20%")
            return None
        
        impulse_high = df['high'].iloc[impulse_bar_idx]
        impulse_low = df['low'].iloc[impulse_bar_idx]
        
        # –ù–û–í–û–ï 2025: –ü—Ä–æ–≤–µ—Ä–∫–∞ Pin Bar –Ω–∞ impulse bar (–±–æ–Ω—É—Å –∫ score)
        impulse_bar_data = {
            'high': df['high'].iloc[impulse_bar_idx],
            'low': df['low'].iloc[impulse_bar_idx],
            'open': df['open'].iloc[impulse_bar_idx],
            'close': df['close'].iloc[impulse_bar_idx]
        }
        has_pin_bar = False
        if self.prefer_pin_bar:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º LONG Pin Bar –Ω–∞ impulse bar
            has_pin_bar = self._check_pin_bar(impulse_bar_data, 'LONG')
            if has_pin_bar:
                strategy_logger.debug(f"    ‚úÖ Pin Bar –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ –∏–º–ø—É–ª—å—Å-–±–∞—Ä–µ {impulse_bar_idx}!")
        
        # –û–±—ä—ë–º
        avg_volume = df['volume'].rolling(20).mean().iloc[-1]
        current_volume = df['volume'].iloc[-1]
        volume_ratio = current_volume / avg_volume if avg_volume > 0 else 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—ë–º–∞
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        adaptive_volume_threshold = get_adaptive_volume_threshold(df['open_time'].iloc[-1], self.volume_threshold)
        
        if volume_ratio < adaptive_volume_threshold:
            strategy_logger.debug(f"    ‚ùå –û–±—ä–µ–º –Ω–∏–∑–∫–∏–π: {volume_ratio:.2f}x < {adaptive_volume_threshold:.2f}x (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ)
        # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ = –Ω–µ–¥–∞–≤–Ω–∏–π –º–∞–∫—Å–∏–º—É–º
        resistance = df['high'].tail(50).max()
        distance_to_resistance = (resistance - current_close) / current_atr
        
        if distance_to_resistance < self.min_distance_resistance:
            strategy_logger.debug(f"    ‚ùå –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é: {distance_to_resistance:.2f} ATR < {self.min_distance_resistance} ATR")
            return None
        
        # –ù–û–í–û–ï 2025: RSI Overextension Filter
        if self.rsi_overextension_filter:
            rsi_14 = indicators.get('15m', {}).get('rsi_14') if isinstance(indicators.get('15m'), dict) else None
            
            # –ï—Å–ª–∏ RSI –Ω–µ –≤ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö, –≤—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
            if rsi_14 is None:
                from src.indicators.technical import calculate_rsi
                rsi_14 = calculate_rsi(df['close'], period=14)
            
            if rsi_14 is not None and len(rsi_14) > 0:
                current_rsi = rsi_14.iloc[-1]
                
                # –î–ª—è LONG: –∏–∑–±–µ–≥–∞—Ç—å overbought (RSI > 70)
                if bias != 'Bearish' and current_rsi > 70:
                    strategy_logger.debug(f"    ‚ùå RSI overbought: {current_rsi:.1f} > 70 (–∏–∑–±–µ–≥–∞–µ–º –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞—Ö)")
                    return None
                
                # –î–ª—è SHORT: –∏–∑–±–µ–≥–∞—Ç—å oversold (RSI < 30)
                if bias == 'Bearish' and current_rsi < 30:
                    strategy_logger.debug(f"    ‚ùå RSI oversold: {current_rsi:.1f} < 30 (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–¥–∞–∂ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞—Ö)")
                    return None
                
                strategy_logger.debug(f"    ‚úÖ RSI –≤ –Ω–æ—Ä–º–µ: {current_rsi:.1f} (30-70 –¥–∏–∞–ø–∞–∑–æ–Ω)")
        
        # –ù–û–í–û–ï 2025: HTF Trend Confirmation
        if self.htf_ema200_check:
            df_1h = indicators.get('1h')  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
            df_4h = indicators.get('4h')  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
            htf_confirmed, htf_data_available = self._check_higher_timeframe_trend(df_1h, df_4h, 'LONG')
            
            if htf_data_available and not htf_confirmed:
                strategy_logger.debug(f"    ‚ùå LONG –∏–º–ø—É–ª—å—Å OK, –Ω–æ Higher TF –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç—Ä–µ–Ω–¥ (1H/4H EMA200)")
                return None
            
            if htf_confirmed:
                strategy_logger.debug(f"    ‚úÖ Higher TF –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç LONG —Ç—Ä–µ–Ω–¥ (1H+4H > EMA200)")
        
        # LONG: –ø—Ä–æ–±–æ–π high –∏–º–ø—É–ª—å—Å–∞ –∏–ª–∏ pullback –∫ EMA9/20
        if bias != 'Bearish':
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä–æ–±–æ–π high –∏–º–ø—É–ª—å—Å–∞ ‚â•0.2-0.3 ATR
            if (current_high > impulse_high and 
                (current_high - impulse_high) >= self.breakout_atr_min * current_atr):
                
                entry = current_close
                
                # –†–∞—Å—á–µ—Ç –∑–æ–Ω S/R –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
                sr_zones = create_sr_zones(df, current_atr, buffer_mult=0.25)
                nearest_zone = find_nearest_zone(entry, sr_zones, 'LONG')
                stop_loss = calculate_stop_loss_from_zone(entry, nearest_zone, current_atr, 'LONG', fallback_mult=2.0, max_distance_atr=5.0)
                
                # –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç–µ–π–∫–æ–≤ 1R –∏ 2R
                atr_distance = abs(entry - stop_loss)
                tp1 = entry + atr_distance * 1.0  # 1R
                tp2 = entry + atr_distance * 2.0  # 2R
                
                base_score = 1.0
                confirmations = []
                
                # –ù–û–í–û–ï 2025: Pin Bar –±–æ–Ω—É—Å
                if has_pin_bar:
                    base_score += 0.5
                    confirmations.append('pin_bar_impulse')
                    strategy_logger.debug(f"    ‚úÖ Pin Bar –Ω–∞ –∏–º–ø—É–ª—å—Å–µ - –±–æ–Ω—É—Å +0.5 –∫ score")
                
                cvd_change = indicators.get('cvd_change')
                doi_pct = indicators.get('doi_pct')
                depth_imbalance = indicators.get('depth_imbalance')
                cvd_valid = indicators.get('cvd_valid', False)
                oi_valid = indicators.get('oi_valid', False)
                depth_valid = indicators.get('depth_valid', False)
                
                if cvd_valid and cvd_change is not None and cvd_change > 0:
                    base_score += 0.5
                    confirmations.append('cvd_direction')
                
                if oi_valid and doi_pct is not None and doi_pct > 5:
                    base_score += 0.5
                    confirmations.append('doi_growth')
                
                if depth_valid and depth_imbalance is not None and depth_imbalance > 0:
                    base_score += 0.5
                    confirmations.append('bid_pressure')
                
                signal = Signal(
                    strategy_name=self.name,
                    symbol=symbol,
                    direction='LONG',
                    timestamp=pd.Timestamp.now(),
                    timeframe=self.timeframe,
                    entry_price=float(entry),
                    stop_loss=float(stop_loss),
                    take_profit_1=float(tp1),
                    take_profit_2=float(tp2),
                    regime=regime,
                    bias=bias,
                    base_score=base_score,
                    volume_ratio=float(volume_ratio),
                    metadata={
                        'impulse_high': float(impulse_high),
                        'impulse_low': float(impulse_low),
                        'impulse_bar_index': int(impulse_bar_idx),
                        'ema200': float(current_ema200),
                        'adx': float(current_adx),
                        'atr_median': float(atr_median),
                        'distance_to_resistance_atr': float(distance_to_resistance),
                        'entry_type': 'breakout',
                        'confirmations': confirmations,
                        'has_pin_bar': has_pin_bar,  # –ù–û–í–û–ï 2025
                        'htf_check_enabled': self.htf_ema200_check,  # –ù–û–í–û–ï 2025
                        'cvd_change': float(cvd_change) if cvd_change is not None else None,
                        'doi_pct': float(doi_pct) if doi_pct is not None else None,
                        'depth_imbalance': float(depth_imbalance) if depth_imbalance is not None else None
                    }
                )
                return signal
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: micro-pullback –∫ EMA9/20
            ema9_val = ema9.iloc[-1]
            ema20_val = ema20.iloc[-1]
            
            if (current_low <= ema20_val and current_close > ema20_val):
                entry = current_close
                
                # –†–∞—Å—á–µ—Ç –∑–æ–Ω S/R –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
                sr_zones = create_sr_zones(df, current_atr, buffer_mult=0.25)
                nearest_zone = find_nearest_zone(entry, sr_zones, 'LONG')
                stop_loss = calculate_stop_loss_from_zone(entry, nearest_zone, current_atr, 'LONG', fallback_mult=2.0, max_distance_atr=5.0)
                
                # –†–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ —Ç–µ–π–∫–æ–≤ 1R –∏ 2R
                atr_distance = abs(entry - stop_loss)
                tp1 = entry + atr_distance * 1.0  # 1R
                tp2 = entry + atr_distance * 2.0  # 2R
                
                base_score = 1.0
                confirmations = []
                
                # –ù–û–í–û–ï 2025: Pin Bar –±–æ–Ω—É—Å
                if has_pin_bar:
                    base_score += 0.5
                    confirmations.append('pin_bar_impulse')
                    strategy_logger.debug(f"    ‚úÖ Pin Bar –Ω–∞ –∏–º–ø—É–ª—å—Å–µ - –±–æ–Ω—É—Å +0.5 –∫ score")
                
                cvd_change = indicators.get('cvd_change')
                doi_pct = indicators.get('doi_pct')
                depth_imbalance = indicators.get('depth_imbalance')
                cvd_valid = indicators.get('cvd_valid', False)
                oi_valid = indicators.get('oi_valid', False)
                depth_valid = indicators.get('depth_valid', False)
                
                if cvd_valid and cvd_change is not None and cvd_change > 0:
                    base_score += 0.5
                    confirmations.append('cvd_direction')
                
                if oi_valid and doi_pct is not None and doi_pct > 5:
                    base_score += 0.5
                    confirmations.append('doi_growth')
                
                if depth_valid and depth_imbalance is not None and depth_imbalance > 0:
                    base_score += 0.5
                    confirmations.append('bid_pressure')
                
                signal = Signal(
                    strategy_name=self.name,
                    symbol=symbol,
                    direction='LONG',
                    timestamp=pd.Timestamp.now(),
                    timeframe=self.timeframe,
                    entry_price=float(entry),
                    stop_loss=float(stop_loss),
                    take_profit_1=float(tp1),
                    take_profit_2=float(tp2),
                    regime=regime,
                    bias=bias,
                    base_score=base_score,
                    volume_ratio=float(volume_ratio),
                    metadata={
                        'impulse_high': float(impulse_high),
                        'impulse_low': float(impulse_low),
                        'ema9': float(ema9_val),
                        'ema20': float(ema20_val),
                        'ema200': float(current_ema200),
                        'adx': float(current_adx),
                        'atr_median': float(atr_median),
                        'entry_type': 'pullback',
                        'confirmations': confirmations,
                        'has_pin_bar': has_pin_bar,  # –ù–û–í–û–ï 2025
                        'htf_check_enabled': self.htf_ema200_check,  # –ù–û–í–û–ï 2025
                        'cvd_change': float(cvd_change) if cvd_change is not None else None,
                        'doi_pct': float(doi_pct) if doi_pct is not None else None,
                        'depth_imbalance': float(depth_imbalance) if depth_imbalance is not None else None
                    }
                )
                return signal
        
        strategy_logger.debug(f"    ‚ùå –ù–µ—Ç –ø—Ä–æ–±–æ—è high –∏–º–ø—É–ª—å—Å–∞ –∏–ª–∏ pullback –∫ EMA9/20 –ø—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–º bias")
        return None
