"""
Multi-Factor Confirmation System - –§–ê–ó–ê 3
–¢—Ä–µ–±—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 80%+ Win Rate

6 –§–∞–∫—Ç–æ—Ä–æ–≤ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
1. ‚úÖ Strategy Signal (–±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
2. HTF Trend Alignment (Higher Timeframe —Ç—Ä–µ–Ω–¥)
3. Volume Confirmation (–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä—ë–º)
4. CVD/DOI Confirmation (–¥–µ–ª—å—Ç–∞ –æ–±—ä—ë–º–∞/OI)
5. Price Action Patterns (Pin Bar, Engulfing)
6. S/R Zone Confluence (—Ü–µ–Ω–∞ —É –≤–∞–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è)

–ú–∏–Ω–∏–º—É–º: 3/6 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–∏–≥–Ω–∞–ª–∞
"""

from typing import Dict, List, Optional, Tuple, Any
import pandas as pd
from dataclasses import dataclass
from src.utils.logger import logger as strategy_logger
from src.indicators.technical import calculate_ema


@dataclass
class ConfirmationFactors:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    strategy_signal: bool = True  # –í—Å–µ–≥–¥–∞ True (–±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª)
    htf_alignment: bool = False
    volume_confirmation: bool = False
    cvd_doi_confirmation: bool = False
    price_action_pattern: bool = False
    sr_zone_confluence: bool = False
    
    def count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        return sum([
            self.strategy_signal,
            self.htf_alignment,
            self.volume_confirmation,
            self.cvd_doi_confirmation,
            self.price_action_pattern,
            self.sr_zone_confluence
        ])
    
    def get_confirmed_list(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        confirmed = []
        if self.strategy_signal:
            confirmed.append("Strategy")
        if self.htf_alignment:
            confirmed.append("HTF")
        if self.volume_confirmation:
            confirmed.append("Volume")
        if self.cvd_doi_confirmation:
            confirmed.append("CVD/DOI")
        if self.price_action_pattern:
            confirmed.append("PriceAction")
        if self.sr_zone_confluence:
            confirmed.append("S/R")
        return confirmed


class MultiFactorConfirmation:
    """
    Multi-Factor Confirmation System
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è Win Rate
    """
    
    def __init__(self, config: Any):
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–∏–≥–Ω–∞–ª–∞
        self.min_factors = config.get('multi_factor.min_confirmation_factors', 3)
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
        self.volume_multiplier = config.get('multi_factor.volume_multiplier', 1.5)
        self.cvd_threshold = config.get('multi_factor.cvd_threshold', 0)  # CVD > 0 –¥–ª—è LONG, < 0 –¥–ª—è SHORT
        self.sr_zone_atr_distance = config.get('multi_factor.sr_zone_atr_distance', 0.5)  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ S/R –∑–æ–Ω—ã
        
        strategy_logger.info(
            f"üéØ Multi-Factor Confirmation System initialized: "
            f"min_factors={self.min_factors}, volume_mult={self.volume_multiplier}x"
        )
    
    def check_factors(
        self,
        symbol: str,
        direction: str,
        df: pd.DataFrame,
        df_1h: Optional[pd.DataFrame],
        df_4h: Optional[pd.DataFrame],
        indicators: Dict,
        regime: str
    ) -> Tuple[bool, ConfirmationFactors]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        
        Returns:
            (approved, factors): approved=True –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        """
        factors = ConfirmationFactors()
        
        # –§–ê–ö–¢–û–† 1: Strategy Signal - –≤—Å–µ–≥–¥–∞ True (–±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å)
        factors.strategy_signal = True
        
        # –§–ê–ö–¢–û–† 2: HTF Trend Alignment
        factors.htf_alignment = self._check_htf_alignment(direction, df_1h, df_4h, regime)
        
        # –§–ê–ö–¢–û–† 3: Volume Confirmation
        factors.volume_confirmation = self._check_volume(df, self.volume_multiplier)
        
        # –§–ê–ö–¢–û–† 4: CVD/DOI Confirmation
        factors.cvd_doi_confirmation = self._check_cvd_doi(direction, indicators)
        
        # –§–ê–ö–¢–û–† 5: Price Action Patterns
        factors.price_action_pattern = self._check_price_action(direction, df)
        
        # –§–ê–ö–¢–û–† 6: S/R Zone Confluence
        factors.sr_zone_confluence = self._check_sr_zone(df, indicators)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        confirmed_count = factors.count()
        approved = confirmed_count >= self.min_factors
        
        confirmed_list = factors.get_confirmed_list()
        strategy_logger.debug(
            f"    üìä Multi-Factor: {confirmed_count}/{6} confirmed: {', '.join(confirmed_list)} "
            f"‚Üí {'‚úÖ APPROVED' if approved else f'‚ùå REJECTED (need {self.min_factors})'}"
        )
        
        return (approved, factors)
    
    def _check_htf_alignment(
        self, 
        direction: str, 
        df_1h: Optional[pd.DataFrame],
        df_4h: Optional[pd.DataFrame],
        regime: str
    ) -> bool:
        """
        –§–ê–ö–¢–û–† 2: Higher Timeframe Trend Alignment
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å HTF —Ç—Ä–µ–Ω–¥–æ–º
        """
        # HTF –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ TREND —Ä–µ–∂–∏–º–µ
        if regime != 'TREND':
            strategy_logger.debug(f"      HTF: skip (regime={regime}, –Ω–µ TREND)")
            return True  # –í non-TREND —Ä–µ–∂–∏–º–∞—Ö HTF –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 1H –∏ 4H
        if df_1h is None or len(df_1h) < 50:
            strategy_logger.debug(f"      HTF: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1H")
            return False
        
        if df_4h is None or len(df_4h) < 50:
            strategy_logger.debug(f"      HTF: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö 4H")
            return False
        
        # EMA50 –Ω–∞ –æ–±–æ–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
        ema50_1h = calculate_ema(pd.Series(df_1h['close']), period=50)
        ema50_4h = calculate_ema(pd.Series(df_4h['close']), period=50)
        
        price_1h = df_1h['close'].iloc[-1]
        price_4h = df_4h['close'].iloc[-1]
        
        if direction == 'LONG':
            # –î–ª—è LONG –Ω—É–∂–µ–Ω uptrend –Ω–∞ HTF
            htf_1h_up = price_1h > ema50_1h.iloc[-1]
            htf_4h_up = price_4h > ema50_4h.iloc[-1]
            aligned = htf_1h_up and htf_4h_up
            strategy_logger.debug(
                f"      HTF: 1H={'UP' if htf_1h_up else 'DOWN'}, "
                f"4H={'UP' if htf_4h_up else 'DOWN'} ‚Üí {'‚úÖ' if aligned else '‚ùå'}"
            )
            return aligned
        else:  # SHORT
            # –î–ª—è SHORT –Ω—É–∂–µ–Ω downtrend –Ω–∞ HTF
            htf_1h_down = price_1h < ema50_1h.iloc[-1]
            htf_4h_down = price_4h < ema50_4h.iloc[-1]
            aligned = htf_1h_down and htf_4h_down
            strategy_logger.debug(
                f"      HTF: 1H={'DOWN' if htf_1h_down else 'UP'}, "
                f"4H={'DOWN' if htf_4h_down else 'UP'} ‚Üí {'‚úÖ' if aligned else '‚ùå'}"
            )
            return aligned
    
    def _check_volume(self, df: pd.DataFrame, multiplier: float) -> bool:
        """
        –§–ê–ö–¢–û–† 3: Volume Confirmation
        
        –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        """
        current_volume = df['volume'].iloc[-1]
        avg_volume = df['volume'].tail(20).mean()
        
        confirmed = current_volume > multiplier * avg_volume
        ratio = current_volume / avg_volume
        
        strategy_logger.debug(
            f"      Volume: {ratio:.1f}x avg (need >{multiplier}x) ‚Üí {'‚úÖ' if confirmed else '‚ùå'}"
        )
        return confirmed
    
    def _check_cvd_doi(self, direction: str, indicators: Dict) -> bool:
        """
        –§–ê–ö–¢–û–† 4: CVD/DOI Confirmation
        
        Cumulative Volume Delta –∏ Delta OI –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        """
        cvd = indicators.get('cvd', 0)
        doi_pct = indicators.get('doi_pct', 0)
        
        if direction == 'LONG':
            # –î–ª—è LONG –Ω—É–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π CVD (–ø–æ–∫—É–ø–∫–∏)
            cvd_ok = cvd > self.cvd_threshold
            doi_ok = doi_pct > 0  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–ª—å—Ç–∞ OI
            confirmed = cvd_ok or doi_ok  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–≤—É—Ö
            strategy_logger.debug(
                f"      CVD/DOI: CVD={cvd:.1f} {'‚úÖ' if cvd_ok else '‚ùå'}, "
                f"DOI={doi_pct:.1f}% {'‚úÖ' if doi_ok else '‚ùå'} ‚Üí {'‚úÖ' if confirmed else '‚ùå'}"
            )
            return confirmed
        else:  # SHORT
            # –î–ª—è SHORT –Ω—É–∂–µ–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π CVD (–ø—Ä–æ–¥–∞–∂–∏)
            cvd_ok = cvd < -self.cvd_threshold
            doi_ok = doi_pct < 0  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–ª—å—Ç–∞ OI
            confirmed = cvd_ok or doi_ok
            strategy_logger.debug(
                f"      CVD/DOI: CVD={cvd:.1f} {'‚úÖ' if cvd_ok else '‚ùå'}, "
                f"DOI={doi_pct:.1f}% {'‚úÖ' if doi_ok else '‚ùå'} ‚Üí {'‚úÖ' if confirmed else '‚ùå'}"
            )
            return confirmed
    
    def _check_price_action(self, direction: str, df: pd.DataFrame) -> bool:
        """
        –§–ê–ö–¢–û–† 5: Price Action Patterns
        
        Pin Bar –∏–ª–∏ Engulfing –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç reversal/continuation
        """
        if len(df) < 2:
            return False
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∏
        prev = df.iloc[-2]
        curr = df.iloc[-1]
        
        # Pin Bar detection
        body = abs(curr['close'] - curr['open'])
        total_range = curr['high'] - curr['low']
        
        if total_range == 0:
            return False
        
        body_pct = body / total_range
        
        # Pin Bar: –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ (<30% –æ—Ç range) + –¥–ª–∏–Ω–Ω—ã–π —Ö–≤–æ—Å—Ç
        is_pin_bar = body_pct < 0.3
        
        if direction == 'LONG':
            # Bullish Pin Bar: –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∂–Ω–∏–π —Ö–≤–æ—Å—Ç
            lower_wick = curr['open'] - curr['low'] if curr['close'] > curr['open'] else curr['close'] - curr['low']
            lower_wick_pct = lower_wick / total_range
            pin_bar_bullish = is_pin_bar and lower_wick_pct > 0.6
            
            # Bullish Engulfing
            engulfing = (
                prev['close'] < prev['open'] and  # Prev bearish
                curr['close'] > curr['open'] and  # Curr bullish
                curr['close'] > prev['open'] and  # Engulfs prev high
                curr['open'] < prev['close']      # Engulfs prev low
            )
            
            confirmed = pin_bar_bullish or engulfing
            pattern = "PinBar" if pin_bar_bullish else ("Engulfing" if engulfing else "None")
            strategy_logger.debug(f"      PriceAction: {pattern} ‚Üí {'‚úÖ' if confirmed else '‚ùå'}")
            return confirmed
        
        else:  # SHORT
            # Bearish Pin Bar: –¥–ª–∏–Ω–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Ö–≤–æ—Å—Ç
            upper_wick = curr['high'] - curr['open'] if curr['close'] < curr['open'] else curr['high'] - curr['close']
            upper_wick_pct = upper_wick / total_range
            pin_bar_bearish = is_pin_bar and upper_wick_pct > 0.6
            
            # Bearish Engulfing
            engulfing = (
                prev['close'] > prev['open'] and  # Prev bullish
                curr['close'] < curr['open'] and  # Curr bearish
                curr['close'] < prev['open'] and  # Engulfs prev low
                curr['open'] > prev['close']      # Engulfs prev high
            )
            
            confirmed = pin_bar_bearish or engulfing
            pattern = "PinBar" if pin_bar_bearish else ("Engulfing" if engulfing else "None")
            strategy_logger.debug(f"      PriceAction: {pattern} ‚Üí {'‚úÖ' if confirmed else '‚ùå'}")
            return confirmed
    
    def _check_sr_zone(self, df: pd.DataFrame, indicators: Dict) -> bool:
        """
        –§–ê–ö–¢–û–† 6: S/R Zone Confluence
        
        –¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –≤–∞–∂–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º Support/Resistance
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç POC (Point of Control) –∏–∑ Volume Profile –∫–∞–∫ key level
        """
        current_price = df['close'].iloc[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º POC –∏–∑ indicators (–µ—Å–ª–∏ –µ—Å—Ç—å)
        poc = indicators.get('poc')
        if poc is None:
            strategy_logger.debug(f"      S/R: –Ω–µ—Ç POC –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ POC
        atr = indicators.get('atr', df['close'].iloc[-1] * 0.01)  # Fallback 1% –µ—Å–ª–∏ –Ω–µ—Ç ATR
        distance_to_poc = abs(current_price - poc)
        distance_in_atr = distance_to_poc / atr
        
        # Confluence –µ—Å–ª–∏ —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–æ –∫ POC (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö sr_zone_atr_distance ATR)
        confirmed = distance_in_atr <= self.sr_zone_atr_distance
        
        strategy_logger.debug(
            f"      S/R: price={current_price:.2f}, POC={poc:.2f}, "
            f"dist={distance_in_atr:.2f}√óATR (need ‚â§{self.sr_zone_atr_distance}) ‚Üí {'‚úÖ' if confirmed else '‚ùå'}"
        )
        return confirmed
    
    def calculate_factor_bonus(self, factors: ConfirmationFactors) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç score –±–æ–Ω—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        
        3 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ = +0.5
        4 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ = +1.0
        5 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ = +1.5
        6 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ = +2.5
        """
        count = factors.count()
        
        if count >= 6:
            return 2.5
        elif count >= 5:
            return 1.5
        elif count >= 4:
            return 1.0
        elif count >= 3:
            return 0.5
        else:
            return 0.0
