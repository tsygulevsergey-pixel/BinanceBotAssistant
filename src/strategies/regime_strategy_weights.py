"""
Regime-Based Strategy Weighting - –§–ê–ó–ê 3
–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞

–õ–æ–≥–∏–∫–∞:
- TREND: Break & Retest (breakout), MA/VWAP Pullback —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ
- RANGE: Volume Profile (rejection), Liquidity Sweep (fade) —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ
- SQUEEZE: Order Flow (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ breakout) —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ

–ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–ª—É—á–∞–µ—Ç weight multiplier –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
"""

from typing import Dict, Any
from src.utils.logger import logger


class RegimeStrategyWeights:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
    
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç multiplier –∫ score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∂–∏–º—É
    """
    
    def __init__(self, config: Any):
        # –í–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ config)
        default_weights = {
            'TREND': {
                'Break & Retest': 1.5,      # Breakout —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è TREND
                'MA/VWAP Pullback': 1.3,    # Pullback –≤ —Ç—Ä–µ–Ω–¥–µ - —Ö–æ—Ä–æ—à–æ
                'Volume Profile': 0.8,      # Rejection –º–µ–Ω–µ–µ –Ω–∞–¥—ë–∂–µ–Ω –≤ TREND
                'Liquidity Sweep': 0.9,     # Fade –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞ - —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ
                'Order Flow': 1.0,          # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
            },
            'RANGE': {
                'Break & Retest': 0.8,      # Breakout —á–∞—Å—Ç–æ –ª–æ–∂–Ω—ã–π –≤ RANGE
                'MA/VWAP Pullback': 0.9,    # Pullback —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö—É–∂–µ –≤ RANGE
                'Volume Profile': 1.5,      # Rejection –æ—Ç –≥—Ä–∞–Ω–∏—Ü - –æ—Ç–ª–∏—á–Ω–æ
                'Liquidity Sweep': 1.3,     # Fade sweep - —Ö–æ—Ä–æ—à–æ –¥–ª—è RANGE
                'Order Flow': 1.0,          # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
            },
            'SQUEEZE': {
                'Break & Retest': 1.2,      # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ breakout
                'MA/VWAP Pullback': 0.9,    # –ú–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤ —Å–∂–∞—Ç–∏–∏
                'Volume Profile': 1.0,      # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
                'Liquidity Sweep': 1.0,     # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
                'Order Flow': 1.5,          # Smart money –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ - –æ—Ç–ª–∏—á–Ω–æ
            }
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ –∏–∑ config (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º default
        self.weights = config.get('regime_weights', default_weights)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.min_weight_threshold = config.get('regime_weights.min_threshold', 0.5)
        
        logger.info(
            f"üìä Regime Strategy Weights initialized: "
            f"min_threshold={self.min_weight_threshold}"
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
        for regime, strategy_weights in self.weights.items():
            logger.info(f"  {regime}: {strategy_weights}")
    
    def get_weight(self, strategy_name: str, regime: str) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å weight multiplier –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ
        
        Args:
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            regime: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ (TREND/RANGE/SQUEEZE)
        
        Returns:
            Weight multiplier (–æ–±—ã—á–Ω–æ 0.5-1.5)
        """
        regime_weights = self.weights.get(regime, {})
        weight = regime_weights.get(strategy_name, 1.0)  # Default 1.0 –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        
        return weight
    
    def is_suitable(self, strategy_name: str, regime: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        
        Args:
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            regime: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
        
        Returns:
            True –µ—Å–ª–∏ –≤–µ—Å >= min_weight_threshold
        """
        weight = self.get_weight(strategy_name, regime)
        suitable = weight >= self.min_weight_threshold
        
        if not suitable:
            logger.debug(
                f"    ‚ö†Ô∏è Strategy '{strategy_name}' BLOCKED in {regime} "
                f"(weight {weight} < {self.min_weight_threshold})"
            )
        
        return suitable
    
    def apply_weight(self, strategy_name: str, regime: str, base_score: float) -> float:
        """
        –ü—Ä–∏–º–µ–Ω–∏—Ç—å weight multiplier –∫ –±–∞–∑–æ–≤–æ–º—É score
        
        Args:
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            regime: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            base_score: –ë–∞–∑–æ–≤—ã–π score —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Returns:
            Adjusted score —Å —É—á—ë—Ç–æ–º –≤–µ—Å–∞
        """
        weight = self.get_weight(strategy_name, regime)
        adjusted_score = base_score * weight
        
        logger.debug(
            f"    üìä Regime Weight: {strategy_name} in {regime}: "
            f"{base_score:.1f} √ó {weight} = {adjusted_score:.1f}"
        )
        
        return adjusted_score
    
    def get_best_strategies(self, regime: str, top_n: int = 3) -> list[tuple[str, float]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-N –ª—É—á—à–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Ä–µ–∂–∏–º–∞
        
        Args:
            regime: –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            top_n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ (strategy_name, weight) –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Å–∞
        """
        regime_weights = self.weights.get(regime, {})
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_strategies = sorted(
            regime_weights.items(),
            key=lambda x: x[1],
            reverse=True
        )
        
        return sorted_strategies[:top_n]
    
    def get_regime_recommendation(self, regime: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –ª—É—á—à–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –¥–ª—è —Ä–µ–∂–∏–º–∞
        
        Args:
            regime: –†–µ–∂–∏–º —Ä—ã–Ω–∫–∞
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
        """
        best = self.get_best_strategies(regime, top_n=3)
        
        if not best:
            return f"No strategy weights configured for {regime}"
        
        recommendation = f"Best strategies for {regime}: "
        strategy_list = [f"{name} ({weight}x)" for name, weight in best]
        recommendation += ", ".join(strategy_list)
        
        return recommendation
