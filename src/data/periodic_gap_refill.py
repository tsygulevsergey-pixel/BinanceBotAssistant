"""
Periodic Gap Refill - –±—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –¥–æ–∫–∞—á–∫–∞ gaps –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Set
import pytz
from sqlalchemy.orm import Session

from src.database.db import db
from src.database.models import Candle
from src.binance.data_loader import DataLoader
from src.utils.logger import logger


class PeriodicGapRefill:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –±—ã—Å—Ç—Ä–∞—è –¥–æ–∫–∞—á–∫–∞ gaps –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    """
    
    def __init__(self, data_loader: DataLoader, config: dict, timezone_str: str = "Europe/Kyiv"):
        self.data_loader = data_loader
        self.config = config.get('periodic_gap_refill', {})
        self.enabled = self.config.get('enabled', True)
        self.max_parallel = self.config.get('max_parallel', 8)
        self.lookback_minutes = self.config.get('lookback_minutes', 120)  # 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        self.timezone = pytz.timezone(timezone_str)
        self.startup_time = datetime.now(pytz.UTC)  # –ó–∞–ø–æ–º–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        self.min_startup_delay_minutes = 15  # –ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–µ 15 –º–∏–Ω—É—Ç
        self.max_rate_usage_percent = 30  # –ó–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ rate < 30%
        
        # –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.timeframe_map = {
            '15m': ['15m'],
            '1h': ['15m', '1h'],
            '4h': ['15m', '1h', '4h'],
            '1d': ['15m', '1h', '4h', '1d']
        }
    
    async def determine_timeframes_to_check(self) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        now = datetime.now(pytz.UTC)
        minute = now.minute
        hour = now.hour
        
        # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 - –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        if hour == 0 and minute < 15:
            return self.timeframe_map['1d']
        
        # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (00, 04, 08, 12, 16, 20) - 15m, 1h, 4h
        if hour % 4 == 0 and minute < 15:
            return self.timeframe_map['4h']
        
        # –ö–∞–∂–¥—ã–π —á–∞—Å –≤ XX:00 - 15m, 1h
        if minute < 15:
            return self.timeframe_map['1h']
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - —Ç–æ–ª—å–∫–æ 15m
        return self.timeframe_map['15m']
    
    async def find_recent_gaps(self, symbols: List[str], timeframes: List[str]) -> Dict[str, Dict[str, dict]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç gaps –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        Returns:
            {symbol: {timeframe: {'start': datetime, 'end': datetime, 'count': int}}}
        """
        gaps = {}
        now = datetime.now(pytz.UTC)
        lookback_start = now - timedelta(minutes=self.lookback_minutes)
        
        session = db.get_session()
        try:
            for symbol in symbols:
                symbol_gaps = {}
                
                for tf in timeframes:
                    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
                    last_candle = session.query(Candle).filter(
                        Candle.symbol == symbol,
                        Candle.timeframe == tf
                    ).order_by(Candle.open_time.desc()).first()
                    
                    if not last_candle:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å gap –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–æ–π –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                    last_time = last_candle.open_time.replace(tzinfo=pytz.UTC)
                    
                    # –í—ã—á–∏—Å–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    interval_minutes = {
                        '15m': 15,
                        '1h': 60,
                        '4h': 240,
                        '1d': 1440
                    }.get(tf, 15)
                    
                    expected_next = last_time + timedelta(minutes=interval_minutes)
                    
                    # –ï—Å–ª–∏ gap –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –¥–æ–±–∞–≤–∏—Ç—å
                    if expected_next < now - timedelta(minutes=interval_minutes):
                        # –î–æ–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ recent gaps (–ø–æ—Å–ª–µ–¥–Ω–∏–µ lookback_minutes)
                        gap_start = max(expected_next, lookback_start)
                        gap_end = now
                        
                        if gap_start < gap_end:
                            gap_count = int((gap_end - gap_start).total_seconds() / 60 / interval_minutes)
                            
                            symbol_gaps[tf] = {
                                'start': gap_start,
                                'end': gap_end,
                                'count': gap_count
                            }
                
                if symbol_gaps:
                    gaps[symbol] = symbol_gaps
        finally:
            session.close()
        
        return gaps
    
    def calculate_request_weight(self, gaps: Dict[str, Dict[str, dict]]) -> int:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–∫–∞—á–∫–∏ –≤—Å–µ—Ö gaps
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (weight)
        """
        total_requests = 0
        for symbol, timeframe_gaps in gaps.items():
            # –ö–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º = 1 –∑–∞–ø—Ä–æ—Å (download_historical_klines)
            total_requests += len(timeframe_gaps)
        
        return total_requests
    
    def get_available_capacity(self) -> int:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π capacity –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ –ø–æ—Ä–æ–≥–∞ 55%
        """
        if not hasattr(self.data_loader, 'client') or not hasattr(self.data_loader.client, 'rate_limiter'):
            return 0
        
        usage = self.data_loader.client.rate_limiter.get_current_usage()
        current_count = usage.get('used', 0)
        max_count = usage.get('limit', 2400)
        safe_threshold = 0.55  # 55%
        
        safe_count = int(max_count * safe_threshold)
        available = safe_count - current_count
        
        return max(0, available)
    
    async def refill_gaps(self, gaps: Dict[str, Dict[str, dict]]) -> Dict[str, int]:
        """
        –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–æ–∫–∞—á–∫–∞ gaps —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –≤–µ—Å–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Returns:
            {'success': count, 'failed': count}
        """
        if not gaps:
            return {'success': 0, 'failed': 0}
        
        # 1. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Å –∑–∞–ø—Ä–æ—Å–æ–≤
        total_requests = self.calculate_request_weight(gaps)
        total_symbols = len(gaps)
        
        # 2. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π capacity
        available_capacity = self.get_available_capacity()
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å MIN_BATCH_SIZE
        MIN_BATCH_SIZE = 50
        if available_capacity < MIN_BATCH_SIZE:
            logger.info(
                f"‚è∏Ô∏è Gap refill skipped: capacity too low\n"
                f"  üìä Available: {available_capacity} requests\n"
                f"  ‚ö†Ô∏è Minimum: {MIN_BATCH_SIZE} requests"
            )
            return {'success': 0, 'failed': 0}
        
        logger.info(
            f"‚ö° PERIODIC GAP REFILL starting:\n"
            f"  üìä Symbols: {total_symbols}\n"
            f"  üìà Total requests: {total_requests}\n"
            f"  üíæ Available capacity: {available_capacity}\n"
            f"  üéØ Strategy: {'Single batch' if total_requests <= available_capacity else 'Multiple batches with wait'}"
        )
        
        # 4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        symbols_list = list(gaps.items())  # FIFO –ø–æ—Ä—è–¥–æ–∫
        
        if total_requests <= available_capacity:
            # ‚úÖ –í—Å—ë –≤–ª–µ–∑–∞–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ (–±–∞—Ç—á–∞–º–∏ –¥–ª—è safety)
            return await self._execute_batch(symbols_list, batch_num=1, total_batches=1)
        else:
            # ‚ö†Ô∏è –ù–µ –≤–ª–µ–∑–∞–µ—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            return await self._execute_with_wait(symbols_list, available_capacity)
    
    async def _execute_batch(self, symbols_list: List[tuple], batch_num: int, total_batches: int) -> Dict[str, int]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–∫–∞—á–∫—É –æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–±–∞—Ç—á–∞–º–∏ –ø–æ 20 –¥–ª—è safety)
        """
        BATCH_SIZE = 20
        BATCH_PAUSE = 1.0
        
        success_count = 0
        failed_count = 0
        
        total_mini_batches = (len(symbols_list) + BATCH_SIZE - 1) // BATCH_SIZE
        
        for mini_batch_num in range(total_mini_batches):
            start_idx = mini_batch_num * BATCH_SIZE
            end_idx = min(start_idx + BATCH_SIZE, len(symbols_list))
            mini_batch = symbols_list[start_idx:end_idx]
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∏–Ω–∏-–±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (max 4 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
            semaphore = asyncio.Semaphore(4)
            tasks = []
            
            for symbol, timeframe_gaps in mini_batch:
                task = self._refill_symbol_gaps(symbol, timeframe_gaps, semaphore)
                tasks.append(task)
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            batch_success = sum(1 for r in results if r is True)
            batch_failed = len(results) - batch_success
            
            success_count += batch_success
            failed_count += batch_failed
            
            if total_batches == -1:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º)
                logger.info(
                    f"  üì¶ Batch {batch_num} - Mini {mini_batch_num+1}/{total_mini_batches}: "
                    f"‚úÖ {batch_success} / ‚ùå {batch_failed}"
                )
            elif total_batches > 1:
                # –ò–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
                logger.info(
                    f"  üì¶ Batch {batch_num}/{total_batches} - Mini {mini_batch_num+1}/{total_mini_batches}: "
                    f"‚úÖ {batch_success} / ‚ùå {batch_failed}"
                )
            else:
                # –û–¥–∏–Ω –±–∞—Ç—á
                logger.info(
                    f"  üì¶ Mini-batch {mini_batch_num+1}/{total_mini_batches}: "
                    f"‚úÖ {batch_success} / ‚ùå {batch_failed}"
                )
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–∏–Ω–∏-–±–∞—Ç—á–∞–º–∏
            if mini_batch_num < total_mini_batches - 1:
                await asyncio.sleep(BATCH_PAUSE)
        
        return {'success': success_count, 'failed': failed_count}
    
    async def _execute_with_wait(self, symbols_list: List[tuple], available_capacity: int) -> Dict[str, int]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–∫–∞—á–∫—É —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Å–±—Ä–æ—Å–∞ rate limit
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–ß–ù–´–ô —Ä–∞—Å—á–µ—Ç –≤–µ—Å–∞ –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ wait –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """
        total_success = 0
        total_failed = 0
        remaining_symbols = symbols_list.copy()
        batch_num = 0
        
        while remaining_symbols:
            batch_num += 1
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å available capacity –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –±–∞—Ç—á–µ–º
            current_capacity = self.get_available_capacity()
            
            if current_capacity < 10:  # Safety –º–∏–Ω–∏–º—É–º
                logger.warning(
                    f"  ‚ö†Ô∏è Capacity too low ({current_capacity}), waiting 60s for rate reset..."
                )
                await asyncio.sleep(60)
                continue
            
            # –ê–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–≥–æ –ø–æ–¥ capacity (–¢–û–ß–ù–´–ô –≤–µ—Å)
            batch_symbols = []
            accumulated_weight = 0
            
            for symbol, timeframe_gaps in remaining_symbols:
                symbol_weight = len(timeframe_gaps)  # –¢–æ—á–Ω—ã–π –≤–µ—Å: 1-4 requests
                
                if accumulated_weight + symbol_weight <= current_capacity:
                    batch_symbols.append((symbol, timeframe_gaps))
                    accumulated_weight += symbol_weight
                else:
                    # –ü—Ä–µ–≤—ã—Å–∏–º capacity - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫—É–º—É–ª—è—Ü–∏—é
                    break
            
            if not batch_symbols:
                # –ù–∏ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –Ω–µ –≤–ª–µ–∑ - –∂–¥—ë–º reset
                logger.warning(
                    f"  ‚ö†Ô∏è No symbols fit in capacity ({current_capacity}), waiting 60s..."
                )
                await asyncio.sleep(60)
                continue
            
            # –£–±—Ä–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ remaining
            remaining_symbols = remaining_symbols[len(batch_symbols):]
            
            logger.info(
                f"  üîÑ Batch {batch_num}:\n"
                f"    Symbols: {len(batch_symbols)}\n"
                f"    Weight: {accumulated_weight} requests\n"
                f"    Capacity: {current_capacity}\n"
                f"    Remaining: {len(remaining_symbols)} symbols"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞—Ç—á (total_batches=-1 –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ")
            result = await self._execute_batch(batch_symbols, batch_num=batch_num, total_batches=-1)
            total_success += result['success']
            total_failed += result['failed']
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Å–∏–º–≤–æ–ª—ã - –∂–¥–∞—Ç—å reset –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º
            if remaining_symbols:
                logger.info(
                    f"  ‚è≥ Waiting 60s for rate limit reset before next batch..."
                )
                await asyncio.sleep(60)
        
        logger.info(
            f"‚ö° PERIODIC GAP REFILL complete:\n"
            f"  ‚úÖ Success: {total_success} symbols\n"
            f"  ‚ùå Failed: {total_failed} symbols\n"
            f"  üì¶ Total batches: {batch_num}"
        )
        
        return {'success': total_success, 'failed': total_failed}
    
    async def _refill_symbol_gaps(self, symbol: str, gaps: Dict[str, dict], semaphore) -> bool:
        """
        –î–æ–∫–∞—á–∏–≤–∞–µ—Ç gaps –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã)
        """
        async with semaphore:
            try:
                for tf, gap_info in gaps.items():
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (90% –ø–æ—Ä–æ–≥)
                    if hasattr(self.data_loader, 'client') and hasattr(self.data_loader.client, 'rate_limiter'):
                        usage = self.data_loader.client.rate_limiter.get_current_usage()
                        if usage.get('is_near_limit', False):
                            logger.info(
                                f"‚è∏Ô∏è Pausing gap refill: rate limit at "
                                f"{usage['percent_of_safe']:.1f}% of safe threshold"
                            )
                            # –ü–æ–¥–æ–∂–¥–∞—Ç—å —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
                            await self.data_loader.client.rate_limiter.wait_if_near_limit(weight=5)
                    
                    # –ó–∞–≥—Ä—É–∑–∏—Ç—å gap
                    df = await self.data_loader.download_historical_klines(
                        symbol, tf,
                        start_date=gap_info['start'],
                        end_date=gap_info['end']
                    )
                    
                    if df is not None and len(df) > 0:
                        logger.debug(
                            f"  ‚úÖ {symbol} {tf}: +{len(df)} candles "
                            f"({gap_info['start'].strftime('%H:%M')} ‚Üí {gap_info['end'].strftime('%H:%M')})"
                        )
                
                return True
                
            except Exception as e:
                logger.error(f"  ‚ùå {symbol} refill failed: {e}")
                return False
    
    async def run_periodic_check(self, symbols: List[str]):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–∫–∞—á–∫–∏ gaps
        """
        if not self.enabled:
            return
        
        now = datetime.now(pytz.UTC)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–µ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (burst catchup –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω)
        time_since_startup = (now - self.startup_time).total_seconds() / 60
        if time_since_startup < self.min_startup_delay_minutes:
            logger.info(
                f"‚è∏Ô∏è Gap refill skipped: bot running only {time_since_startup:.1f}min "
                f"(waiting {self.min_startup_delay_minutes}min after startup)"
            )
            return
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate usage - –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ < 30%
        if hasattr(self.data_loader, 'client') and hasattr(self.data_loader.client, 'rate_limiter'):
            usage = self.data_loader.client.rate_limiter.get_current_usage()
            current_percent = usage.get('percent', 0)
            
            if current_percent > self.max_rate_usage_percent:
                logger.info(
                    f"‚è∏Ô∏è Gap refill skipped: rate usage too high "
                    f"({current_percent:.1f}% > {self.max_rate_usage_percent}%)"
                )
                return
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        timeframes = await self.determine_timeframes_to_check()
        
        logger.info(
            f"üîÑ Periodic gap check started:\n"
            f"  üïê Time: {now.strftime('%H:%M UTC')}\n"
            f"  üìä Timeframes to check: {', '.join(timeframes)}\n"
            f"  üìà Symbols: {len(symbols)}"
        )
        
        # –ù–∞–π—Ç–∏ gaps
        gaps = await self.find_recent_gaps(symbols, timeframes)
        
        if gaps:
            logger.info(f"  üìä Found {len(gaps)} symbols with gaps")
            # –î–æ–∫–∞—á–∞—Ç—å gaps –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await self.refill_gaps(gaps)
        else:
            logger.info("  ‚úÖ No gaps found")
