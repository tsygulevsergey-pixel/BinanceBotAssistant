"""
Periodic Gap Refill - –±—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –¥–æ–∫–∞—á–∫–∞ gaps –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Set
import pytz
from sqlalchemy.orm import Session

from src.database.db import db
from src.database.models import Candle
from src.binance.data_loader import DataLoader
from src.utils.logger import logger


class PeriodicGapRefill:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –±—ã—Å—Ç—Ä–∞—è –¥–æ–∫–∞—á–∫–∞ gaps –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    """
    
    def __init__(self, data_loader: DataLoader, config: dict, timezone_str: str = "Europe/Kyiv"):
        self.data_loader = data_loader
        self.config = config.get('periodic_gap_refill', {})
        self.enabled = self.config.get('enabled', True)
        self.max_parallel = self.config.get('max_parallel', 8)
        self.lookback_minutes = self.config.get('lookback_minutes', 120)  # 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        self.timezone = pytz.timezone(timezone_str)
        
        # –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.timeframe_map = {
            '15m': ['15m'],
            '1h': ['15m', '1h'],
            '4h': ['15m', '1h', '4h'],
            '1d': ['15m', '1h', '4h', '1d']
        }
    
    async def determine_timeframes_to_check(self) -> List[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        now = datetime.now(pytz.UTC)
        minute = now.minute
        hour = now.hour
        
        # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 - –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        if hour == 0 and minute < 15:
            return self.timeframe_map['1d']
        
        # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (00, 04, 08, 12, 16, 20) - 15m, 1h, 4h
        if hour % 4 == 0 and minute < 15:
            return self.timeframe_map['4h']
        
        # –ö–∞–∂–¥—ã–π —á–∞—Å –≤ XX:00 - 15m, 1h
        if minute < 15:
            return self.timeframe_map['1h']
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - —Ç–æ–ª—å–∫–æ 15m
        return self.timeframe_map['15m']
    
    async def find_recent_gaps(self, symbols: List[str], timeframes: List[str]) -> Dict[str, Dict[str, dict]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç gaps –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        Returns:
            {symbol: {timeframe: {'start': datetime, 'end': datetime, 'count': int}}}
        """
        gaps = {}
        now = datetime.now(pytz.UTC)
        lookback_start = now - timedelta(minutes=self.lookback_minutes)
        
        session = db.get_session()
        try:
            for symbol in symbols:
                symbol_gaps = {}
                
                for tf in timeframes:
                    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
                    last_candle = session.query(Candle).filter(
                        Candle.symbol == symbol,
                        Candle.timeframe == tf
                    ).order_by(Candle.open_time.desc()).first()
                    
                    if not last_candle:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å gap –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–æ–π –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                    last_time = last_candle.open_time.replace(tzinfo=pytz.UTC)
                    
                    # –í—ã—á–∏—Å–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    interval_minutes = {
                        '15m': 15,
                        '1h': 60,
                        '4h': 240,
                        '1d': 1440
                    }.get(tf, 15)
                    
                    expected_next = last_time + timedelta(minutes=interval_minutes)
                    
                    # –ï—Å–ª–∏ gap –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –¥–æ–±–∞–≤–∏—Ç—å
                    if expected_next < now - timedelta(minutes=interval_minutes):
                        # –î–æ–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ recent gaps (–ø–æ—Å–ª–µ–¥–Ω–∏–µ lookback_minutes)
                        gap_start = max(expected_next, lookback_start)
                        gap_end = now
                        
                        if gap_start < gap_end:
                            gap_count = int((gap_end - gap_start).total_seconds() / 60 / interval_minutes)
                            
                            symbol_gaps[tf] = {
                                'start': gap_start,
                                'end': gap_end,
                                'count': gap_count
                            }
                
                if symbol_gaps:
                    gaps[symbol] = symbol_gaps
        finally:
            session.close()
        
        return gaps
    
    async def refill_gaps(self, gaps: Dict[str, Dict[str, dict]]) -> Dict[str, int]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –¥–æ–∫–∞—á–∫–∞ gaps
        
        Returns:
            {'success': count, 'failed': count}
        """
        if not gaps:
            return {'success': 0, 'failed': 0}
        
        total_gaps = sum(len(tfs) for tfs in gaps.values())
        
        # –í—ã—á–∏—Å–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
        optimal_parallel = min(self.max_parallel, max(4, total_gaps // 5))
        
        logger.info(
            f"‚ö° PERIODIC GAP REFILL starting:\n"
            f"  üìä Symbols: {len(gaps)}\n"
            f"  üìà Total gaps: {total_gaps}\n"
            f"  üîÑ Parallel workers: {optimal_parallel}"
        )
        
        semaphore = asyncio.Semaphore(optimal_parallel)
        tasks = []
        
        for symbol, timeframe_gaps in gaps.items():
            task = self._refill_symbol_gaps(symbol, timeframe_gaps, semaphore)
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        success = sum(1 for r in results if r is True)
        failed = len(results) - success
        
        logger.info(
            f"‚ö° PERIODIC GAP REFILL complete:\n"
            f"  ‚úÖ Success: {success} symbols\n"
            f"  ‚ùå Failed: {failed} symbols"
        )
        
        return {'success': success, 'failed': failed}
    
    async def _refill_symbol_gaps(self, symbol: str, gaps: Dict[str, dict], semaphore) -> bool:
        """
        –î–æ–∫–∞—á–∏–≤–∞–µ—Ç gaps –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã)
        """
        async with semaphore:
            try:
                for tf, gap_info in gaps.items():
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (90% –ø–æ—Ä–æ–≥)
                    if hasattr(self.data_loader, 'client') and hasattr(self.data_loader.client, 'rate_limiter'):
                        usage = self.data_loader.client.rate_limiter.get_current_usage()
                        if usage.get('is_near_limit', False):
                            logger.info(
                                f"‚è∏Ô∏è Pausing gap refill: rate limit at "
                                f"{usage['percent_of_safe']:.1f}% of safe threshold"
                            )
                            # –ü–æ–¥–æ–∂–¥–∞—Ç—å —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
                            await self.data_loader.client.rate_limiter.wait_if_near_limit(weight=5)
                    
                    # –ó–∞–≥—Ä—É–∑–∏—Ç—å gap
                    df = await self.data_loader.download_historical_klines(
                        symbol, tf,
                        start_date=gap_info['start'],
                        end_date=gap_info['end']
                    )
                    
                    if df is not None and len(df) > 0:
                        logger.debug(
                            f"  ‚úÖ {symbol} {tf}: +{len(df)} candles "
                            f"({gap_info['start'].strftime('%H:%M')} ‚Üí {gap_info['end'].strftime('%H:%M')})"
                        )
                
                return True
                
            except Exception as e:
                logger.error(f"  ‚ùå {symbol} refill failed: {e}")
                return False
    
    async def run_periodic_check(self, symbols: List[str]):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–∫–∞—á–∫–∏ gaps
        """
        if not self.enabled:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        timeframes = await self.determine_timeframes_to_check()
        
        now = datetime.now(pytz.UTC)
        logger.info(
            f"üîÑ Periodic gap check started:\n"
            f"  üïê Time: {now.strftime('%H:%M UTC')}\n"
            f"  üìä Timeframes to check: {', '.join(timeframes)}\n"
            f"  üìà Symbols: {len(symbols)}"
        )
        
        # –ù–∞–π—Ç–∏ gaps
        gaps = await self.find_recent_gaps(symbols, timeframes)
        
        if gaps:
            logger.info(f"  üìä Found {len(gaps)} symbols with gaps")
            # –î–æ–∫–∞—á–∞—Ç—å gaps –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await self.refill_gaps(gaps)
        else:
            logger.info("  ‚úÖ No gaps found")
