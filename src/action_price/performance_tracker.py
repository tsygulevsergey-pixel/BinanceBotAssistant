"""
Performance Tracker –¥–ª—è Action Price —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import asyncio
from typing import Dict, Optional, List
from datetime import datetime, timedelta
import pytz
import logging

from src.database.models import ActionPriceSignal
from src.database.db import db
from src.binance.client import BinanceClient

logger = logging.getLogger(__name__)


class ActionPricePerformanceTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Action Price —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –≤—ã—Ö–æ–¥–∞–º–∏"""
    
    def __init__(self, binance_client: BinanceClient, db,
                 check_interval: int = 60, on_signal_closed_callback=None):
        """
        Args:
            binance_client: Binance –∫–ª–∏–µ–Ω—Ç
            db: Database —ç–∫–∑–µ–º–ø–ª—è—Ä
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            on_signal_closed_callback: Callback –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞
        """
        self.binance_client = binance_client
        self.db = db
        self.check_interval = check_interval
        self.running = False
        self.on_signal_closed_callback = on_signal_closed_callback
        
        # MFE/MAE tracking (–≤ –ø–∞–º—è—Ç–∏)
        self.signal_mfe_mae = {}  # {signal_id: {'mfe_r': float, 'mae_r': float}}
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ç—Ä–µ–∫–∏–Ω–≥–∞"""
        self.running = True
        logger.info("üéØ Action Price Performance Tracker started")
        
        while self.running:
            try:
                await self._check_active_signals()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"Error in AP tracker: {e}", exc_info=True)
                await asyncio.sleep(self.check_interval)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä"""
        self.running = False
        logger.info("Action Price Performance Tracker stopped")
    
    async def _check_active_signals(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Action Price —Å–∏–≥–Ω–∞–ª—ã"""
        session = self.db.get_session()
        try:
            active_signals = session.query(ActionPriceSignal).filter(
                ActionPriceSignal.status.in_(['PENDING', 'ACTIVE'])
            ).all()
            
            if not active_signals:
                return
            
            logger.debug(f"Checking {len(active_signals)} active AP signals")
            
            for signal in active_signals:
                try:
                    await self._check_signal(signal, session)
                except Exception as e:
                    logger.error(f"Error checking AP signal {signal.id}: {e}", exc_info=True)
            
            session.commit()
            
        except Exception as e:
            session.rollback()
            logger.error(f"Error checking active AP signals: {e}", exc_info=True)
        finally:
            session.close()
    
    async def _check_signal(self, signal: ActionPriceSignal, session):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥ —Å MFE/MAE tracking"""
        try:
            symbol_str = str(signal.symbol)
            price_data = await self.binance_client.get_mark_price(symbol_str)
            current_price = float(price_data['markPrice'])
            
            # –û–±–Ω–æ–≤–∏—Ç—å MFE/MAE
            self._update_mfe_mae(signal, current_price)
            
            exit_result = await self._check_exit_conditions(signal, current_price)
            
            if exit_result:
                signal.exit_price = exit_result['exit_price']
                signal.exit_reason = exit_result['reason']
                signal.pnl = exit_result.get('pnl', 0.0)
                signal.pnl_percent = exit_result.get('pnl_percent', 0.0)
                signal.status = exit_result['status']
                signal.closed_at = datetime.now(pytz.UTC)
                
                # –ü–æ–ª—É—á–∏—Ç—å MFE/MAE –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                mfe_mae = self.signal_mfe_mae.get(signal.id, {'mfe_r': 0.0, 'mae_r': 0.0})
                
                # –ó–∞–ø–∏—Å–∞—Ç—å –≤ JSONL –ª–æ–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å signal_id –≤ context_hash)
                await self._log_signal_exit(signal, mfe_mae)
                
                # –£–¥–∞–ª–∏—Ç—å –∏–∑ tracking
                if signal.id in self.signal_mfe_mae:
                    del self.signal_mfe_mae[signal.id]
                
                logger.info(f"üéØ AP Signal closed: {signal.symbol} {signal.pattern_type} "
                          f"{signal.direction} | Reason: {exit_result['reason']} | "
                          f"PnL: {exit_result.get('pnl_percent', 0):.2f}% | "
                          f"MFE: {mfe_mae['mfe_r']:.2f}R | MAE: {mfe_mae['mae_r']:.2f}R")
                
                # Callback –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞
                if self.on_signal_closed_callback:
                    try:
                        self.on_signal_closed_callback(signal.symbol)
                    except Exception as e:
                        logger.error(f"Error in AP close callback: {e}")
        
        except Exception as e:
            logger.error(f"Error checking AP signal {signal.id}: {e}", exc_info=True)
    
    def _update_mfe_mae(self, signal: ActionPriceSignal, current_price: float):
        """
        –û–±–Ω–æ–≤–∏—Ç—å Maximum Favorable/Adverse Excursion –≤ R
        
        Args:
            signal: –°–∏–≥–Ω–∞–ª
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        """
        entry = float(signal.entry_price)
        sl = float(signal.stop_loss)
        direction = signal.direction
        risk_r = abs(entry - sl)
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π P&L –≤ R
        if direction == 'LONG':
            current_pnl_r = (current_price - entry) / risk_r
        else:  # SHORT
            current_pnl_r = (entry - current_price) / risk_r
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–æ–≤—ã–π
        if signal.id not in self.signal_mfe_mae:
            self.signal_mfe_mae[signal.id] = {
                'mfe_r': 0.0,
                'mae_r': 0.0
            }
        
        # –û–±–Ω–æ–≤–∏—Ç—å MFE (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è)
        if current_pnl_r > self.signal_mfe_mae[signal.id]['mfe_r']:
            self.signal_mfe_mae[signal.id]['mfe_r'] = current_pnl_r
        
        # –û–±–Ω–æ–≤–∏—Ç—å MAE (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è)
        if current_pnl_r < self.signal_mfe_mae[signal.id]['mae_r']:
            self.signal_mfe_mae[signal.id]['mae_r'] = current_pnl_r
    
    async def _log_signal_exit(self, signal: ActionPriceSignal, mfe_mae: Dict[str, float]):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ —Å–¥–µ–ª–∫–∏ –≤ JSONL –ª–æ–≥
        
        Args:
            signal: –°–∏–≥–Ω–∞–ª
            mfe_mae: Dict —Å mfe_r –∏ mae_r
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º signal_logger
            from .signal_logger import ActionPriceSignalLogger
            
            # –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä logger (—É–ø—Ä–æ—â—ë–Ω–Ω–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å singleton)
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ exit update –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ logger
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å logger —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ singleton
            
            # TODO: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å signal_logger –¥–ª—è update_signal_exit
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –æ–±—ã—á–Ω—ã–π –ª–æ–≥
            logger.debug(f"Signal {signal.id} exit logged - MFE: {mfe_mae['mfe_r']:.2f}R, MAE: {mfe_mae['mae_r']:.2f}R")
            
        except Exception as e:
            logger.error(f"Error logging signal exit: {e}", exc_info=True)
    
    async def _check_exit_conditions(self, signal: ActionPriceSignal, 
                                     current_price: float) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ —Ñ–∏–∫—Å–∞—Ü–∏—è–º–∏
        
        Args:
            signal: ActionPriceSignal
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ None
        """
        direction = signal.direction
        entry = float(signal.entry_price)
        sl = float(signal.stop_loss)
        tp1 = float(signal.take_profit_1) if signal.take_profit_1 else None
        tp2 = float(signal.take_profit_2) if signal.take_profit_2 else None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SL
        if direction == 'LONG' and current_price <= sl:
            # –ï—Å–ª–∏ TP1 —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏ SL = entry (breakeven), —Å—á–∏—Ç–∞–µ–º TP1 PnL
            if signal.partial_exit_1_at and abs(sl - entry) < 0.0001:
                # Breakeven exit - —Å–æ—Ö—Ä–∞–Ω—è–µ–º TP1 –ø—Ä–∏–±—ã–ª—å
                total_pnl = self._calculate_total_pnl(signal, sl, entry, is_breakeven=True)
                return {
                    'exit_price': sl,
                    'reason': 'BREAKEVEN',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN'  # Breakeven —Å—á–∏—Ç–∞–µ—Ç—Å—è WIN (—Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ TP1 –ø—Ä–∏–±—ã–ª—å)
                }
            else:
                # –û–±—ã—á–Ω—ã–π SL
                pnl_pct = ((current_price - entry) / entry) * 100
                return {
                    'exit_price': sl,
                    'reason': 'STOP_LOSS',
                    'pnl_percent': pnl_pct,
                    'pnl': pnl_pct,
                    'status': 'LOSS'
                }
        elif direction == 'SHORT' and current_price >= sl:
            # –ï—Å–ª–∏ TP1 —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏ SL = entry (breakeven), —Å—á–∏—Ç–∞–µ–º TP1 PnL
            if signal.partial_exit_1_at and abs(sl - entry) < 0.0001:
                # Breakeven exit - —Å–æ—Ö—Ä–∞–Ω—è–µ–º TP1 –ø—Ä–∏–±—ã–ª—å
                total_pnl = self._calculate_total_pnl(signal, sl, entry, is_breakeven=True)
                return {
                    'exit_price': sl,
                    'reason': 'BREAKEVEN',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN'  # Breakeven —Å—á–∏—Ç–∞–µ—Ç—Å—è WIN (—Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ TP1 –ø—Ä–∏–±—ã–ª—å)
                }
            else:
                # –û–±—ã—á–Ω—ã–π SL
                pnl_pct = ((entry - current_price) / entry) * 100
                return {
                    'exit_price': sl,
                    'reason': 'STOP_LOSS',
                    'pnl_percent': pnl_pct,
                    'pnl': pnl_pct,
                    'status': 'LOSS'
                }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP1 (—á–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥)
        if tp1 and not signal.partial_exit_1_at:
            if direction == 'LONG' and current_price >= tp1:
                signal.partial_exit_1_at = datetime.now(pytz.UTC)
                signal.partial_exit_1_price = tp1
                # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–Ω–æ—Å–∏–º SL –≤ breakeven (entry price) –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
                signal.stop_loss = entry
                logger.info(f"üéØ AP TP1 hit: {signal.symbol} {signal.pattern_type} at {tp1}, SL moved to breakeven {entry}")
                # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞ TP2
                return None
            elif direction == 'SHORT' and current_price <= tp1:
                signal.partial_exit_1_at = datetime.now(pytz.UTC)
                signal.partial_exit_1_price = tp1
                # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–Ω–æ—Å–∏–º SL –≤ breakeven (entry price) –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
                signal.stop_loss = entry
                logger.info(f"üéØ AP TP1 hit: {signal.symbol} {signal.pattern_type} at {tp1}, SL moved to breakeven {entry}")
                return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP2 (–ø–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥)
        if tp2:
            if direction == 'LONG' and current_price >= tp2:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º TP2 hit –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                signal.partial_exit_2_at = datetime.now(pytz.UTC)
                signal.partial_exit_2_price = tp2
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π PnL —Å —É—á—ë—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
                total_pnl = self._calculate_total_pnl(signal, tp2, entry)
                return {
                    'exit_price': tp2,
                    'reason': 'TAKE_PROFIT_2',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN'
                }
            elif direction == 'SHORT' and current_price <= tp2:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º TP2 hit –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                signal.partial_exit_2_at = datetime.now(pytz.UTC)
                signal.partial_exit_2_price = tp2
                total_pnl = self._calculate_total_pnl(signal, tp2, entry)
                return {
                    'exit_price': tp2,
                    'reason': 'TAKE_PROFIT_2',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN'
                }
        
        # –ï—Å–ª–∏ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–æ –Ω–µ—Ç TP2, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ TP1
        if tp1 and signal.partial_exit_1_at and not tp2:
            total_pnl = self._calculate_total_pnl(signal, tp1, entry)
            return {
                'exit_price': tp1,
                'reason': 'TAKE_PROFIT_1',
                'pnl_percent': total_pnl,
                'pnl': total_pnl,
                'status': 'WIN'
            }
        
        # –ö–†–ò–¢–ò–ß–ù–û: Time stop –ø–æ—Å–ª–µ TP1 (–∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –≤–∏—Å–∏—Ç > 48 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ TP1)
        if signal.partial_exit_1_at:
            hours_since_tp1 = (datetime.now(pytz.UTC) - signal.partial_exit_1_at).total_seconds() / 3600
            if hours_since_tp1 > 48:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ (trailing stop logic)
                total_pnl = self._calculate_total_pnl(signal, current_price, entry)
                return {
                    'exit_price': current_price,
                    'reason': 'TIME_STOP_AFTER_TP1',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN' if total_pnl > 0 else 'LOSS'
                }
        
        # –û–±—ã—á–Ω—ã–π time stop (7 –¥–Ω–µ–π –º–∞–∫—Å–∏–º—É–º –±–µ–∑ TP1)
        hours_since_created = (datetime.now(pytz.UTC) - signal.created_at).total_seconds() / 3600
        if hours_since_created > 168:  # 7 –¥–Ω–µ–π
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
            if direction == 'LONG':
                pnl_pct = ((current_price - entry) / entry) * 100
            else:
                pnl_pct = ((entry - current_price) / entry) * 100
            
            return {
                'exit_price': current_price,
                'reason': 'TIME_STOP',
                'pnl_percent': pnl_pct,
                'pnl': pnl_pct,
                'status': 'WIN' if pnl_pct > 0 else 'LOSS'
            }
        
        return None
    
    def _calculate_total_pnl(self, signal: ActionPriceSignal, 
                            final_exit_price: float, entry: float,
                            is_breakeven: bool = False) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π PnL —Å —É—á—ë—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∏–∫—Å–∞—Ü–∏–π
        
        Args:
            signal: –°–∏–≥–Ω–∞–ª
            final_exit_price: –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
            entry: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            is_breakeven: True –µ—Å–ª–∏ –≤—ã—Ö–æ–¥ –ø–æ breakeven (SL=entry –ø–æ—Å–ª–µ TP1)
            
        Returns:
            –û–±—â–∏–π PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        direction = signal.direction
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥ –Ω–∞ TP1
        if signal.partial_exit_1_at and signal.partial_exit_1_price:
            tp1_price = float(signal.partial_exit_1_price)
            # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: 30% @ TP1, 40% @ TP2, 30% trailing
            tp1_pct = 0.30  # 30% –Ω–∞ TP1
            tp2_pct = 0.70  # 70% –æ—Å—Ç–∞—Ç–æ–∫ (40% –Ω–∞ TP2 + 30% trailing)
            
            if direction == 'LONG':
                pnl_tp1 = ((tp1_price - entry) / entry) * 100 * tp1_pct
                
                # –ï—Å–ª–∏ breakeven - –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç –ø–æ entry (0% PnL)
                if is_breakeven:
                    pnl_remainder = 0.0
                else:
                    pnl_remainder = ((final_exit_price - entry) / entry) * 100 * tp2_pct
            else:  # SHORT
                pnl_tp1 = ((entry - tp1_price) / entry) * 100 * tp1_pct
                
                # –ï—Å–ª–∏ breakeven - –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞–∫—Ä—ã—Ç –ø–æ entry (0% PnL)
                if is_breakeven:
                    pnl_remainder = 0.0
                else:
                    pnl_remainder = ((entry - final_exit_price) / entry) * 100 * tp2_pct
            
            return pnl_tp1 + pnl_remainder
        else:
            # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∏–∫—Å–∞—Ü–∏–π
            if direction == 'LONG':
                return ((final_exit_price - entry) / entry) * 100
            else:
                return ((entry - final_exit_price) / entry) * 100
    
    async def get_performance_stats(self, days: int = 7, 
                                    pattern_type: Optional[str] = None) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Action Price
        
        Args:
            days: –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
            pattern_type: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        session = self.db.get_session()
        try:
            start_date = datetime.now(pytz.UTC) - timedelta(days=days)
            
            query = session.query(ActionPriceSignal).filter(
                ActionPriceSignal.created_at >= start_date
            )
            
            if pattern_type:
                query = query.filter(ActionPriceSignal.pattern_type == pattern_type)
            
            signals = query.all()
            
            if not signals:
                return {
                    'total_signals': 0,
                    'closed_signals': 0,
                    'active_signals': 0,
                    'wins': 0,
                    'losses': 0,
                    'win_rate': 0.0,
                    'avg_pnl': 0.0,
                    'total_pnl': 0.0,
                    'avg_win': 0.0,
                    'avg_loss': 0.0,
                    'tp1_count': 0,
                    'tp2_count': 0,
                    'breakeven_count': 0,
                    'time_stop_count': 0,
                    'time_stop_total_pnl': 0.0,
                    'time_stop_avg_pnl': 0.0
                }
            
            total = len(signals)
            closed = [s for s in signals if s.status in ['WIN', 'LOSS']]
            wins = [s for s in closed if s.status == 'WIN']
            losses = [s for s in closed if s.status == 'LOSS']
            
            # –ü–æ–¥—Å—á–µ—Ç TP1/TP2/Breakeven (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö)
            tp1_count = len([s for s in closed if s.partial_exit_1_at is not None])
            tp2_count = len([s for s in closed if s.partial_exit_2_at is not None])
            breakeven_count = len([s for s in closed if s.exit_reason == 'BREAKEVEN'])
            
            win_rate = (len(wins) / len(closed) * 100) if closed else 0.0
            
            closed_with_pnl = [s for s in closed if s.pnl_percent is not None]
            avg_pnl = sum(float(s.pnl_percent) for s in closed_with_pnl) / len(closed_with_pnl) if closed_with_pnl else 0.0
            total_pnl = sum(float(s.pnl_percent) for s in closed_with_pnl)
            
            wins_with_pnl = [s for s in wins if s.pnl_percent is not None]
            losses_with_pnl = [s for s in losses if s.pnl_percent is not None]
            
            return {
                'total_signals': total,
                'closed_signals': len(closed),
                'active_signals': total - len(closed),
                'wins': len(wins),
                'losses': len(losses),
                'win_rate': round(win_rate, 2),
                'avg_pnl': round(avg_pnl, 2),
                'total_pnl': round(total_pnl, 2),
                'avg_win': round(sum(float(s.pnl_percent) for s in wins_with_pnl) / len(wins_with_pnl), 2) if wins_with_pnl else 0.0,
                'avg_loss': round(sum(float(s.pnl_percent) for s in losses_with_pnl) / len(losses_with_pnl), 2) if losses_with_pnl else 0.0,
                'tp1_count': tp1_count,
                'tp2_count': tp2_count,
                'breakeven_count': breakeven_count,  # ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è! SL=entry –ø–æ—Å–ª–µ TP1
                'time_stop_count': 0,  # AP –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç time_stop
                'time_stop_total_pnl': 0.0,
                'time_stop_avg_pnl': 0.0
            }
            
        finally:
            session.close()
    
    async def get_pattern_breakdown(self, days: int = 7) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        
        Args:
            days: –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
            
        Returns:
            Dict —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
        """
        pattern_types = ['pin_bar', 'engulfing', 'inside_bar', 'fakey', 'ppr']
        breakdown = {}
        
        for pattern in pattern_types:
            stats = await self.get_performance_stats(days, pattern)
            breakdown[pattern] = stats
        
        return breakdown
