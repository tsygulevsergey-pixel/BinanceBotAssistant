"""
Performance Tracker –¥–ª—è Action Price —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import asyncio
from typing import Dict, Optional, List
from datetime import datetime, timedelta
import pytz
import logging

from src.database.models import ActionPriceSignal
from src.database.db import db
from src.binance.client import BinanceClient
from src.action_price.logger import ap_logger

logger = ap_logger  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Action Price logger –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏


class ActionPricePerformanceTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Action Price —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –≤—ã—Ö–æ–¥–∞–º–∏"""
    
    def __init__(self, binance_client: BinanceClient, db,
                 check_interval: int = 60, on_signal_closed_callback=None, signal_logger=None):
        """
        Args:
            binance_client: Binance –∫–ª–∏–µ–Ω—Ç
            db: Database —ç–∫–∑–µ–º–ø–ª—è—Ä
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            on_signal_closed_callback: Callback –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞
            signal_logger: ActionPriceSignalLogger –¥–ª—è JSONL –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.binance_client = binance_client
        self.db = db
        self.check_interval = check_interval
        self.running = False
        self.on_signal_closed_callback = on_signal_closed_callback
        self.signal_logger = signal_logger  # JSONL logger
        
        # MFE/MAE tracking (–≤ –ø–∞–º—è—Ç–∏)
        self.signal_mfe_mae = {}  # {signal_id: {'mfe_r': float, 'mae_r': float}}
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ç—Ä–µ–∫–∏–Ω–≥–∞"""
        self.running = True
        logger.info("üéØ Action Price Performance Tracker started")
        
        while self.running:
            try:
                await self._check_active_signals()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"Error in AP tracker: {e}", exc_info=True)
                await asyncio.sleep(self.check_interval)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä"""
        self.running = False
        logger.info("Action Price Performance Tracker stopped")
    
    async def _check_active_signals(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Action Price —Å–∏–≥–Ω–∞–ª—ã"""
        session = self.db.get_session()
        try:
            active_signals = session.query(ActionPriceSignal).filter(
                ActionPriceSignal.status.in_(['PENDING', 'ACTIVE'])
            ).all()
            
            if not active_signals:
                logger.debug("No active AP signals to check")
                return
            
            logger.info(f"üîç Checking {len(active_signals)} active AP signals for exit conditions")
            
            for signal in active_signals:
                await self._check_signal(signal, session)
            
            session.commit()
            
        except Exception as e:
            session.rollback()
            logger.error(f"Error checking active AP signals: {e}", exc_info=True)
        finally:
            session.close()
    
    async def _check_signal(self, signal: ActionPriceSignal, session):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥ —Å MFE/MAE tracking"""
        try:
            symbol_str = str(signal.symbol)
            price_data = await self.binance_client.get_mark_price(symbol_str)
            current_price = float(price_data['markPrice'])
            
            # –û–±–Ω–æ–≤–∏—Ç—å MFE/MAE
            self._update_mfe_mae(signal, current_price)
            
            exit_result = await self._check_exit_conditions(signal, current_price)
            
            if exit_result:
                signal.exit_price = exit_result['exit_price']
                signal.exit_reason = exit_result['reason']
                signal.pnl = exit_result.get('pnl', 0.0)
                signal.pnl_percent = exit_result.get('pnl_percent', 0.0)
                signal.status = exit_result['status']
                signal.closed_at = datetime.now(pytz.UTC)
                
                # –ü–æ–ª—É—á–∏—Ç—å MFE/MAE –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                mfe_mae = self.signal_mfe_mae.get(signal.id, {'mfe_r': 0.0, 'mae_r': 0.0})
                
                # –ó–∞–ø–∏—Å–∞—Ç—å –≤ JSONL –ª–æ–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å signal_id –≤ context_hash)
                await self._log_signal_exit(signal, mfe_mae)
                
                # –£–¥–∞–ª–∏—Ç—å –∏–∑ tracking
                if signal.id in self.signal_mfe_mae:
                    del self.signal_mfe_mae[signal.id]
                
                logger.info(f"üéØ AP Signal closed: {signal.symbol} {signal.pattern_type} "
                          f"{signal.direction} | Reason: {exit_result['reason']} | "
                          f"PnL: {exit_result.get('pnl_percent', 0):.2f}% | "
                          f"MFE: {mfe_mae['mfe_r']:.2f}R | MAE: {mfe_mae['mae_r']:.2f}R")
                
                # Callback –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞
                if self.on_signal_closed_callback:
                    try:
                        self.on_signal_closed_callback(signal.symbol)
                    except Exception as e:
                        logger.error(f"Error in AP close callback: {e}")
        
        except asyncio.TimeoutError:
            # Network timeout - skip this check cycle, will retry on next iteration
            logger.warning(f"‚è±Ô∏è Timeout checking AP signal {signal.id} ({signal.symbol}) - will retry next cycle")
        except asyncio.CancelledError:
            # Request was cancelled - skip without logging
            logger.debug(f"Request cancelled for AP signal {signal.id}")
        except Exception as e:
            logger.error(f"Error checking AP signal {signal.id}: {e}", exc_info=True)
    
    def _update_mfe_mae(self, signal: ActionPriceSignal, current_price: float):
        """
        –û–±–Ω–æ–≤–∏—Ç—å Maximum Favorable/Adverse Excursion –≤ R
        
        Args:
            signal: –°–∏–≥–Ω–∞–ª
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        """
        entry = float(signal.entry_price)
        sl = float(signal.stop_loss)
        direction = signal.direction.upper() if signal.direction else 'LONG'
        risk_r = abs(entry - sl)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ SL –≤ breakeven (risk_r = 0), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º MFE/MAE update
        if risk_r < 0.0001:
            return
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π P&L –≤ R
        if direction == 'LONG':
            current_pnl_r = (current_price - entry) / risk_r
        else:  # SHORT
            current_pnl_r = (entry - current_price) / risk_r
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–æ–≤—ã–π
        if signal.id not in self.signal_mfe_mae:
            self.signal_mfe_mae[signal.id] = {
                'mfe_r': 0.0,
                'mae_r': 0.0
            }
        
        # –û–±–Ω–æ–≤–∏—Ç—å MFE (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è)
        if current_pnl_r > self.signal_mfe_mae[signal.id]['mfe_r']:
            self.signal_mfe_mae[signal.id]['mfe_r'] = current_pnl_r
        
        # –û–±–Ω–æ–≤–∏—Ç—å MAE (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è)
        if current_pnl_r < self.signal_mfe_mae[signal.id]['mae_r']:
            self.signal_mfe_mae[signal.id]['mae_r'] = current_pnl_r
    
    async def _log_signal_exit(self, signal: ActionPriceSignal, mfe_mae: Dict[str, float]):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥ –∏–∑ —Å–¥–µ–ª–∫–∏ –≤ JSONL –ª–æ–≥
        
        Args:
            signal: –°–∏–≥–Ω–∞–ª
            mfe_mae: Dict —Å mfe_r –∏ mae_r
        """
        try:
            if self.signal_logger:
                # –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–æ–º –≤ JSONL
                self.signal_logger.update_signal_exit(
                    signal_id=signal.id,
                    exit_reason=signal.exit_reason if signal.exit_reason else 'UNKNOWN',
                    timestamp_exit=signal.closed_at if signal.closed_at else datetime.now(pytz.UTC),
                    exit_price=float(signal.exit_price) if signal.exit_price else 0.0,
                    mfe_r=mfe_mae['mfe_r'],
                    mae_r=mfe_mae['mae_r']
                )
                logger.debug(f"‚úÖ JSONL logged exit: {signal.id} - MFE: {mfe_mae['mfe_r']:.2f}R, MAE: {mfe_mae['mae_r']:.2f}R")
            else:
                logger.debug(f"Signal {signal.id} exit logged - MFE: {mfe_mae['mfe_r']:.2f}R, MAE: {mfe_mae['mae_r']:.2f}R (JSONL disabled)")
            
        except Exception as e:
            logger.error(f"Error logging signal exit: {e}", exc_info=True)
    
    async def _check_exit_conditions(self, signal: ActionPriceSignal, 
                                     current_price: float) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ —Ñ–∏–∫—Å–∞—Ü–∏—è–º–∏
        
        Args:
            signal: ActionPriceSignal
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã—Ö–æ–¥–∞ –∏–ª–∏ None
        """
        direction = signal.direction.upper() if signal.direction else 'LONG'
        entry = float(signal.entry_price)
        sl = float(signal.stop_loss)
        tp1 = float(signal.take_profit_1) if signal.take_profit_1 else None
        tp2 = float(signal.take_profit_2) if signal.take_profit_2 else None
        
        # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å–∏–≥–Ω–∞–ª–æ–≤ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
        if len(self.signal_mfe_mae) <= 3:
            logger.debug(f"  [{signal.symbol}] Price: {current_price} | Dir: {direction} | Entry: {entry} | SL: {sl} | TP1: {tp1} | TP2: {tp2} | TP1_hit: {signal.partial_exit_1_at is not None}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SL
        if direction == 'LONG' and current_price <= sl:
            # –ï—Å–ª–∏ TP1 —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏ SL = entry (breakeven), —Å—á–∏—Ç–∞–µ–º TP1 PnL
            if signal.partial_exit_1_at and abs(sl - entry) < 0.0001:
                # Breakeven exit - —Å–æ—Ö—Ä–∞–Ω—è–µ–º TP1 –ø—Ä–∏–±—ã–ª—å
                total_pnl = self._calculate_total_pnl(signal, sl, entry, is_breakeven=True)
                return {
                    'exit_price': sl,
                    'reason': 'BREAKEVEN',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN'  # Breakeven —Å—á–∏—Ç–∞–µ—Ç—Å—è WIN (—Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ TP1 –ø—Ä–∏–±—ã–ª—å)
                }
            else:
                # –û–±—ã—á–Ω—ã–π SL
                pnl_pct = ((current_price - entry) / entry) * 100
                return {
                    'exit_price': sl,
                    'reason': 'STOP_LOSS',
                    'pnl_percent': pnl_pct,
                    'pnl': pnl_pct,
                    'status': 'LOSS'
                }
        elif direction == 'SHORT' and current_price >= sl:
            # –ï—Å–ª–∏ TP1 —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏ SL = entry (breakeven), —Å—á–∏—Ç–∞–µ–º TP1 PnL
            if signal.partial_exit_1_at and abs(sl - entry) < 0.0001:
                # Breakeven exit - —Å–æ—Ö—Ä–∞–Ω—è–µ–º TP1 –ø—Ä–∏–±—ã–ª—å
                total_pnl = self._calculate_total_pnl(signal, sl, entry, is_breakeven=True)
                return {
                    'exit_price': sl,
                    'reason': 'BREAKEVEN',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN'  # Breakeven —Å—á–∏—Ç–∞–µ—Ç—Å—è WIN (—Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ TP1 –ø—Ä–∏–±—ã–ª—å)
                }
            else:
                # –û–±—ã—á–Ω—ã–π SL
                pnl_pct = ((entry - current_price) / entry) * 100
                return {
                    'exit_price': sl,
                    'reason': 'STOP_LOSS',
                    'pnl_percent': pnl_pct,
                    'pnl': pnl_pct,
                    'status': 'LOSS'
                }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP1 (—á–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥)
        if tp1 and not signal.partial_exit_1_at:
            if direction == 'LONG' and current_price >= tp1:
                signal.partial_exit_1_at = datetime.now(pytz.UTC)
                signal.partial_exit_1_price = tp1
                # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–Ω–æ—Å–∏–º SL –≤ breakeven (entry price) –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
                signal.stop_loss = entry
                logger.info(f"üéØ AP TP1 hit: {signal.symbol} {signal.pattern_type} at {tp1}, SL moved to breakeven {entry}")
                # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞ TP2
                return None
            elif direction == 'SHORT' and current_price <= tp1:
                signal.partial_exit_1_at = datetime.now(pytz.UTC)
                signal.partial_exit_1_price = tp1
                # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–Ω–æ—Å–∏–º SL –≤ breakeven (entry price) –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
                signal.stop_loss = entry
                logger.info(f"üéØ AP TP1 hit: {signal.symbol} {signal.pattern_type} at {tp1}, SL moved to breakeven {entry}")
                return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP2 (—á–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥ 40%, –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ trailing)
        if tp2 and not signal.partial_exit_2_at:
            if direction == 'LONG' and current_price >= tp2:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º TP2 hit
                signal.partial_exit_2_at = datetime.now(pytz.UTC)
                signal.partial_exit_2_price = tp2
                logger.info(f"üéØüéØ AP TP2 hit: {signal.symbol} {signal.pattern_type} at {tp2}, trailing stop active for 30% remainder")
                # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª - –æ—Å—Ç–∞—Ç–æ–∫ 30% –Ω–∞ trailing stop
                return None
            elif direction == 'SHORT' and current_price <= tp2:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º TP2 hit
                signal.partial_exit_2_at = datetime.now(pytz.UTC)
                signal.partial_exit_2_price = tp2
                logger.info(f"üéØüéØ AP TP2 hit: {signal.symbol} {signal.pattern_type} at {tp2}, trailing stop active for 30% remainder")
                # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª - –æ—Å—Ç–∞—Ç–æ–∫ 30% –Ω–∞ trailing stop
                return None
        
        # –ù–û–í–û–ï: Trailing stop –ø–æ—Å–ª–µ TP2 (–¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ 30%)
        if signal.partial_exit_2_at:
            # –ü–æ–ª—É—á–∏—Ç—å ATR –∏–∑ meta_data
            atr = None
            if signal.meta_data and 'atr_15m' in signal.meta_data:
                atr = signal.meta_data['atr_15m']
            
            if atr:
                # Trailing distance –∏–∑ config (1.2 ATR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                trail_distance = atr * 1.2  # –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ config –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                
                # –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–î –ø–æ–ª–µ –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                if signal.trailing_peak_price is None:
                    # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ TP2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
                    signal.trailing_peak_price = current_price
                    logger.debug(f"üéØ Trailing stop initialized: {signal.symbol} peak={current_price:.4f}")
                
                if direction == 'LONG':
                    # –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–∫ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î!)
                    if current_price > signal.trailing_peak_price:
                        signal.trailing_peak_price = current_price
                        logger.debug(f"üìà New peak (LONG): {signal.symbol} peak={current_price:.4f}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å trailing stop: –æ—Ç–∫–∞—Ç –æ—Ç –ø–∏–∫–∞ >= trail_distance
                    if signal.trailing_peak_price - current_price >= trail_distance:
                        total_pnl = self._calculate_total_pnl(signal, current_price, entry)
                        logger.info(f"üõë AP Trailing Stop: {signal.symbol} peak {signal.trailing_peak_price:.4f} ‚Üí current {current_price:.4f} (pullback {signal.trailing_peak_price - current_price:.4f} >= {trail_distance:.4f})")
                        return {
                            'exit_price': current_price,
                            'reason': 'TRAILING_STOP',
                            'pnl_percent': total_pnl,
                            'pnl': total_pnl,
                            'status': 'WIN'
                        }
                else:  # SHORT
                    # –û–±–Ω–æ–≤–∏—Ç—å –ø–∏–∫ (–º–∏–Ω–∏–º—É–º –¥–ª—è SHORT) –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î!
                    if current_price < signal.trailing_peak_price:
                        signal.trailing_peak_price = current_price
                        logger.debug(f"üìâ New peak (SHORT): {signal.symbol} peak={current_price:.4f}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å trailing stop: –æ—Ç–∫–∞—Ç –æ—Ç –ø–∏–∫–∞ >= trail_distance
                    if current_price - signal.trailing_peak_price >= trail_distance:
                        total_pnl = self._calculate_total_pnl(signal, current_price, entry)
                        logger.info(f"üõë AP Trailing Stop: {signal.symbol} peak {signal.trailing_peak_price:.4f} ‚Üí current {current_price:.4f} (pullback {current_price - signal.trailing_peak_price:.4f} >= {trail_distance:.4f})")
                        return {
                            'exit_price': current_price,
                            'reason': 'TRAILING_STOP',
                            'pnl_percent': total_pnl,
                            'pnl': total_pnl,
                            'status': 'WIN'
                        }
        
        # –ï—Å–ª–∏ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–æ –Ω–µ—Ç TP2, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ TP1
        if tp1 and signal.partial_exit_1_at and not tp2:
            total_pnl = self._calculate_total_pnl(signal, tp1, entry)
            return {
                'exit_price': tp1,
                'reason': 'TAKE_PROFIT_1',
                'pnl_percent': total_pnl,
                'pnl': total_pnl,
                'status': 'WIN'
            }
        
        # –ö–†–ò–¢–ò–ß–ù–û: Time stop –ø–æ—Å–ª–µ TP2 (–∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –≤–∏—Å–∏—Ç > 72 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ TP2)
        if signal.partial_exit_2_at:
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ partial_exit_2_at –∏–º–µ–µ—Ç timezone
            tp2_time = signal.partial_exit_2_at
            if tp2_time.tzinfo is None:
                tp2_time = pytz.UTC.localize(tp2_time)
            
            hours_since_tp2 = (datetime.now(pytz.UTC) - tp2_time).total_seconds() / 3600
            if hours_since_tp2 > 72:  # 3 –¥–Ω—è –ø–æ—Å–ª–µ TP2
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
                total_pnl = self._calculate_total_pnl(signal, current_price, entry)
                return {
                    'exit_price': current_price,
                    'reason': 'TIME_STOP_AFTER_TP2',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN' if total_pnl > 0 else 'LOSS'
                }
        
        # –ö–†–ò–¢–ò–ß–ù–û: Time stop –ø–æ—Å–ª–µ TP1 (–∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –≤–∏—Å–∏—Ç > 48 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ TP1)
        elif signal.partial_exit_1_at:
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ partial_exit_1_at –∏–º–µ–µ—Ç timezone
            tp1_time = signal.partial_exit_1_at
            if tp1_time.tzinfo is None:
                tp1_time = pytz.UTC.localize(tp1_time)
            
            hours_since_tp1 = (datetime.now(pytz.UTC) - tp1_time).total_seconds() / 3600
            if hours_since_tp1 > 48:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ (–æ—Å—Ç–∞—Ç–æ–∫ 70%)
                total_pnl = self._calculate_total_pnl(signal, current_price, entry)
                return {
                    'exit_price': current_price,
                    'reason': 'TIME_STOP_AFTER_TP1',
                    'pnl_percent': total_pnl,
                    'pnl': total_pnl,
                    'status': 'WIN' if total_pnl > 0 else 'LOSS'
                }
        
        # –û–±—ã—á–Ω—ã–π time stop (7 –¥–Ω–µ–π –º–∞–∫—Å–∏–º—É–º –±–µ–∑ TP1)
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ created_at –∏–º–µ–µ—Ç timezone
        created_time = signal.created_at
        if created_time.tzinfo is None:
            created_time = pytz.UTC.localize(created_time)
        
        hours_since_created = (datetime.now(pytz.UTC) - created_time).total_seconds() / 3600
        if hours_since_created > 168:  # 7 –¥–Ω–µ–π
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
            if direction == 'LONG':
                pnl_pct = ((current_price - entry) / entry) * 100
            else:
                pnl_pct = ((entry - current_price) / entry) * 100
            
            return {
                'exit_price': current_price,
                'reason': 'TIME_STOP',
                'pnl_percent': pnl_pct,
                'pnl': pnl_pct,
                'status': 'WIN' if pnl_pct > 0 else 'LOSS'
            }
        
        return None
    
    def _calculate_total_pnl(self, signal: ActionPriceSignal, 
                            final_exit_price: float, entry: float,
                            is_breakeven: bool = False) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π PnL —Å —É—á—ë—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∏–∫—Å–∞—Ü–∏–π (30/40/30)
        
        Args:
            signal: –°–∏–≥–Ω–∞–ª
            final_exit_price: –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
            entry: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            is_breakeven: True –µ—Å–ª–∏ –≤—ã—Ö–æ–¥ –ø–æ breakeven (SL=entry –ø–æ—Å–ª–µ TP1)
            
        Returns:
            –û–±—â–∏–π PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        """
        direction = signal.direction.upper() if signal.direction else 'LONG'
        
        # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê 30/40/30
        tp1_size = 0.30  # 30% –Ω–∞ TP1
        tp2_size = 0.40  # 40% –Ω–∞ TP2
        trail_size = 0.30  # 30% –Ω–∞ trailing
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
        has_tp1 = signal.partial_exit_1_at and signal.partial_exit_1_price
        has_tp2 = signal.partial_exit_2_at and signal.partial_exit_2_price
        
        if has_tp1:
            tp1_price = float(signal.partial_exit_1_price)
            
            if has_tp2:
                # –í–°–ï 3 –£–†–û–í–ù–Ø: TP1 (30%) + TP2 (40%) + Trail (30%)
                tp2_price = float(signal.partial_exit_2_price)
                
                if direction == 'LONG':
                    pnl_tp1 = ((tp1_price - entry) / entry) * 100 * tp1_size
                    pnl_tp2 = ((tp2_price - entry) / entry) * 100 * tp2_size
                    
                    if is_breakeven:
                        pnl_trail = 0.0  # Breakeven –ø–æ—Å–ª–µ TP2
                    else:
                        pnl_trail = ((final_exit_price - entry) / entry) * 100 * trail_size
                else:  # SHORT
                    pnl_tp1 = ((entry - tp1_price) / entry) * 100 * tp1_size
                    pnl_tp2 = ((entry - tp2_price) / entry) * 100 * tp2_size
                    
                    if is_breakeven:
                        pnl_trail = 0.0
                    else:
                        pnl_trail = ((entry - final_exit_price) / entry) * 100 * trail_size
                
                total_pnl = pnl_tp1 + pnl_tp2 + pnl_trail
                logger.debug(f"PnL calc (3 levels): {signal.symbol} {direction} | TP1: {pnl_tp1:.2f}% (30%) + TP2: {pnl_tp2:.2f}% (40%) + Trail: {pnl_trail:.2f}% (30%) = Total: {total_pnl:.2f}%")
                return total_pnl
            else:
                # –¢–û–õ–¨–ö–û TP1 + –û–°–¢–ê–¢–û–ö (70%): TP1 (30%) + Remainder (70%)
                remainder_size = tp2_size + trail_size  # 70%
                
                if direction == 'LONG':
                    pnl_tp1 = ((tp1_price - entry) / entry) * 100 * tp1_size
                    
                    if is_breakeven:
                        pnl_remainder = 0.0
                    else:
                        pnl_remainder = ((final_exit_price - entry) / entry) * 100 * remainder_size
                else:  # SHORT
                    pnl_tp1 = ((entry - tp1_price) / entry) * 100 * tp1_size
                    
                    if is_breakeven:
                        pnl_remainder = 0.0
                    else:
                        pnl_remainder = ((entry - final_exit_price) / entry) * 100 * remainder_size
                
                total_pnl = pnl_tp1 + pnl_remainder
                logger.debug(f"PnL calc (2 levels): {signal.symbol} {direction} | TP1: {pnl_tp1:.2f}% (30%) + Remainder: {pnl_remainder:.2f}% (70%) = Total: {total_pnl:.2f}%")
                return total_pnl
        else:
            # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–∏–∫—Å–∞—Ü–∏–π (100%)
            if direction == 'LONG':
                return ((final_exit_price - entry) / entry) * 100
            else:
                return ((entry - final_exit_price) / entry) * 100
    
    async def get_performance_stats(self, days: int = 7, 
                                    pattern_type: Optional[str] = None) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Action Price
        
        Args:
            days: –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
            pattern_type: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        session = self.db.get_session()
        try:
            start_date = datetime.now(pytz.UTC) - timedelta(days=days)
            
            query = session.query(ActionPriceSignal).filter(
                ActionPriceSignal.created_at >= start_date
            )
            
            if pattern_type:
                query = query.filter(ActionPriceSignal.pattern_type == pattern_type)
            
            signals = query.all()
            
            if not signals:
                return {
                    'total_signals': 0,
                    'closed_signals': 0,
                    'active_signals': 0,
                    'wins': 0,
                    'losses': 0,
                    'win_rate': 0.0,
                    'avg_pnl': 0.0,
                    'total_pnl': 0.0,
                    'avg_win': 0.0,
                    'avg_loss': 0.0,
                    'tp1_count': 0,
                    'tp2_count': 0,
                    'trailing_stop_count': 0,
                    'breakeven_count': 0,
                    'time_stop_count': 0
                }
            
            total = len(signals)
            closed = [s for s in signals if s.status in ['WIN', 'LOSS']]
            wins = [s for s in closed if s.status == 'WIN']
            losses = [s for s in closed if s.status == 'LOSS']
            
            # –ü–æ–¥—Å—á–µ—Ç exit reasons (–≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ)
            tp1_count = len([s for s in closed if s.exit_reason == 'TAKE_PROFIT_1'])
            tp2_count = len([s for s in closed if s.exit_reason == 'TAKE_PROFIT_2'])
            trailing_stop_count = len([s for s in closed if s.exit_reason == 'TRAILING_STOP'])
            breakeven_count = len([s for s in closed if s.exit_reason == 'BREAKEVEN'])
            time_stop_count = len([s for s in closed if 'TIME_STOP' in (s.exit_reason or '')])
            
            win_rate = (len(wins) / len(closed) * 100) if closed else 0.0
            
            closed_with_pnl = [s for s in closed if s.pnl_percent is not None]
            avg_pnl = sum(float(s.pnl_percent) for s in closed_with_pnl) / len(closed_with_pnl) if closed_with_pnl else 0.0
            total_pnl = sum(float(s.pnl_percent) for s in closed_with_pnl)
            
            wins_with_pnl = [s for s in wins if s.pnl_percent is not None]
            losses_with_pnl = [s for s in losses if s.pnl_percent is not None]
            
            return {
                'total_signals': total,
                'closed_signals': len(closed),
                'active_signals': total - len(closed),
                'wins': len(wins),
                'losses': len(losses),
                'win_rate': round(win_rate, 2),
                'avg_pnl': round(avg_pnl, 2),
                'total_pnl': round(total_pnl, 2),
                'avg_win': round(sum(float(s.pnl_percent) for s in wins_with_pnl) / len(wins_with_pnl), 2) if wins_with_pnl else 0.0,
                'avg_loss': round(sum(float(s.pnl_percent) for s in losses_with_pnl) / len(losses_with_pnl), 2) if losses_with_pnl else 0.0,
                'tp1_count': tp1_count,
                'tp2_count': tp2_count,
                'trailing_stop_count': trailing_stop_count,  # –ù–û–í–û–ï: –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø –¥–ª—è 30% –æ—Å—Ç–∞—Ç–∫–∞
                'breakeven_count': breakeven_count,
                'time_stop_count': time_stop_count
            }
            
        finally:
            session.close()
    
    async def get_pattern_breakdown(self, days: int = 7) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        
        Args:
            days: –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
            
        Returns:
            Dict —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
        """
        pattern_types = ['pin_bar', 'engulfing', 'inside_bar', 'fakey', 'ppr']
        breakdown = {}
        
        for pattern in pattern_types:
            stats = await self.get_performance_stats(days, pattern)
            breakdown[pattern] = stats
        
        return breakdown
