"""
–û—Ç–¥–µ–ª—å–Ω—ã–π logger –¥–ª—è Action Price —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""
import logging
import os
from datetime import datetime
import pytz


def setup_action_price_logger():
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π logger –¥–ª—è Action Price
    
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —Å timestamp
    """
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('logs', exist_ok=True)
    
    # –°–æ–∑–¥–∞—Ç—å logger
    logger = logging.getLogger('action_price')
    logger.setLevel(logging.INFO)
    logger.propagate = False  # –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ root logger
    
    # –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    logger.handlers = []
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
    class KyivFormatter(logging.Formatter):
        def __init__(self, fmt=None, datefmt=None):
            super().__init__(fmt, datefmt)
            self.tz = pytz.timezone('Europe/Kyiv')
        
        def formatTime(self, record, datefmt=None):
            dt = datetime.fromtimestamp(record.created, tz=pytz.UTC)
            dt = dt.astimezone(self.tz)
            return dt.strftime('%Y-%m-%d %H:%M:%S %Z')
    
    formatter = KyivFormatter(
        '%(asctime)s | %(levelname)-8s | %(message)s'
    )
    
    # File handler - –ù–û–í–´–ô –§–ê–ô–õ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    timestamp = datetime.now(tz=pytz.timezone('Europe/Kyiv')).strftime('%Y-%m-%d_%H-%M-%S')
    log_filename = f"logs/action_price_{timestamp}.log"
    
    file_handler = logging.FileHandler(
        log_filename,
        encoding='utf-8'
    )
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    
    # Console handler
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–∏—Ç—å handlers
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    logger.info(f"üéØ Action Price Logger initialized - log file: {log_filename}")
    
    return logger


# Singleton instance
ap_logger = setup_action_price_logger()
