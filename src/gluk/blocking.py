"""
Gluk Symbol Blocker - –ù–ï–ó–ê–í–ò–°–ò–ú–ê–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–æ–Ω–µ—Ç

–ö–†–ò–¢–ò–ß–ù–û:
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç Action Price –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É gluk_blocking –≤ –ë–î
- –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ Action Price
"""
import logging
from typing import Optional
from datetime import datetime
import pytz

from src.gluk.models import GlukBlocking

logger = logging.getLogger(__name__)


class GlukSymbolBlocker:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –º–æ–Ω–µ—Ç –¥–ª—è –ì–ª—é–∫ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, db):
        """
        Args:
            db: Database instance
        """
        self.db = db
        logger.info("‚úÖ Gluk Symbol Blocker initialized (independent from AP)")
    
    def block_symbol(self, symbol: str, direction: str, reason: str = "SIGNAL_ACTIVE"):
        """
        –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—É
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
            direction: LONG/SHORT
            reason: –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        session = self.db.get_session()
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
            existing = session.query(GlukBlocking).filter(
                GlukBlocking.symbol == symbol
            ).first()
            
            if existing:
                # –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                existing.direction = direction
                existing.blocked_at = datetime.now(pytz.UTC)
                existing.reason = reason
                logger.debug(f"üîí Gluk updated block: {symbol} {direction} ({reason})")
            else:
                # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
                block = GlukBlocking(
                    symbol=symbol,
                    direction=direction,
                    blocked_at=datetime.now(pytz.UTC),
                    reason=reason
                )
                session.add(block)
                logger.info(f"üîí Gluk blocked: {symbol} {direction} ({reason})")
            
            session.commit()
            
        except Exception as e:
            session.rollback()
            logger.error(f"Error blocking Gluk symbol {symbol}: {e}", exc_info=True)
        finally:
            session.close()
    
    def unblock_symbol(self, symbol: str):
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç—É
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
        """
        session = self.db.get_session()
        try:
            session.query(GlukBlocking).filter(
                GlukBlocking.symbol == symbol
            ).delete()
            session.commit()
            logger.info(f"üîì Gluk unblocked: {symbol}")
            
        except Exception as e:
            session.rollback()
            logger.error(f"Error unblocking Gluk symbol {symbol}: {e}", exc_info=True)
        finally:
            session.close()
    
    def is_blocked(self, symbol: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –º–æ–Ω–µ—Ç–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        """
        session = self.db.get_session()
        try:
            block = session.query(GlukBlocking).filter(
                GlukBlocking.symbol == symbol
            ).first()
            
            return block is not None
            
        finally:
            session.close()
    
    def get_blocked_symbols(self) -> list:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        """
        session = self.db.get_session()
        try:
            blocks = session.query(GlukBlocking).all()
            return [block.symbol for block in blocks]
            
        finally:
            session.close()
