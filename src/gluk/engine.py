"""
Gluk Engine (Legacy Action Price System)

–ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ –∫–æ–ø–∏—è Action Price –ª–æ–≥–∏–∫–∏ 15-16 –æ–∫—Ç—è–±—Ä—è 2025!
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å—ã -2/-1 (confirm = –ù–ï–ó–ê–ö–†–´–¢–ê–Ø —Å–≤–µ—á–∞ —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!)
- –ù–ï —Ç—Ä–µ–±—É–µ—Ç –æ—Ç—Ä–µ–∑–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –≤ main.py
- EMA200 –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
"""
import pandas as pd
import numpy as np
from typing import Dict, Optional
import hashlib
from datetime import datetime
import pytz
import logging

logger = logging.getLogger('gluk')


class GlukEngine:
    """
    LEGACY Action Price Engine - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
    
    Win Rate –±—ã–ª 82.98% —Å —ç—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π!
    """
    
    def __init__(self, config: dict, binance_client=None):
        """
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ config.yaml['gluk']
            binance_client: BinanceClient –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        """
        self.config = config
        self.enabled = config.get('enabled', True)
        self.client = binance_client
        self.timeframe = config.get('timeframe', '15m')
        
        # TP/SL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π AP)
        self.tp1_rr = config.get('tp1_rr', 1.0)
        self.tp2_rr = config.get('tp2_rr', 2.0)
        
        logger.info(f"üü° Gluk Engine initialized (LEGACY logic with -2/-1 indices, TF={self.timeframe})")
    
    async def analyze(self, symbol: str, df: pd.DataFrame) -> Optional[Dict]:
        """
        LEGACY –∞–Ω–∞–ª–∏–∑ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏
        
        –ö–†–ò–¢–ò–ß–ù–û:
        - df –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Ç–µ–∫—É—â—É—é –ù–ï–ó–ê–ö–†–´–¢–£–Æ —Å–≤–µ—á—É!
        - –ò–Ω–¥–µ–∫—Å—ã -2/-1 (confirm = –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ OHLC!)
        - EMA200 –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º close
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
            df: –î–∞–Ω–Ω—ã–µ 15m –° –ù–ï–ó–ê–ö–†–´–¢–û–ô –ü–û–°–õ–ï–î–ù–ï–ô –°–í–ï–ß–û–ô!
            
        Returns:
            –°–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        if not self.enabled:
            return None
        
        if len(df) < 250:
            logger.debug(f"[Gluk] {symbol} - Insufficient data: {len(df)} bars")
            return None
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è - —É–±—Ä–∞—Ç—å timezone –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å unclosed candle
            df = df.copy()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å open_time –≤ timezone-naive –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if pd.api.types.is_datetime64tz_dtype(df['open_time']):
                df['open_time'] = df['open_time'].dt.tz_localize(None)
            
            df = df.sort_values('open_time', ascending=True).reset_index(drop=True)
            
            # –†–∞—Å—á–µ—Ç EMA200 (–∏—Å–ø–æ–ª—å–∑—É—è –í–°–ï –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –Ω–µ–∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É!)
            df['ema200'] = df['close'].ewm(span=200, adjust=False).mean()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π!)
            last_candle_time = df['open_time'].iloc[-1]
            now = datetime.now(pytz.UTC)
            
            # last_candle_time —Ç–µ–ø–µ—Ä—å timezone-naive, —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ aware –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if not hasattr(last_candle_time, 'tzinfo') or last_candle_time.tzinfo is None:
                last_candle_time = pytz.UTC.localize(last_candle_time)
            
            time_diff = (now - last_candle_time).total_seconds()
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ —Å—Ç–∞—Ä—à–µ 16 –º–∏–Ω—É—Ç - –æ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ (–Ω–µ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ!)
            if time_diff > 960:  # 16 –º–∏–Ω—É—Ç
                logger.warning(f"[Gluk] {symbol} - Last candle is CLOSED ({time_diff/60:.1f}min old), need UNCLOSED!")
                return None
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ò–Ω–¥–µ–∫—Å—ã -2 (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä) –∏ -1 (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ = –ù–ï–ó–ê–ö–†–´–¢–ê–Ø!)
            if len(df) < 2:
                return None
            
            init_idx = -2
            conf_idx = -1
            
            # –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞)
            init_open = df['open'].iloc[init_idx]
            init_close = df['close'].iloc[init_idx]
            ema200_init = df['ema200'].iloc[init_idx]
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ù–ï–ó–ê–ö–†–´–¢–ê–Ø —Å–≤–µ—á–∞ —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!)
            conf_close = df['close'].iloc[conf_idx]  # –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô close!
            conf_low = df['low'].iloc[conf_idx]      # –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô low!
            conf_high = df['high'].iloc[conf_idx]    # –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô high!
            ema200_conf = df['ema200'].iloc[conf_idx]  # EMA200 —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º close!
            
            logger.info(
                f"[Gluk] {symbol} | "
                f"Init[-2]: O:{init_open:.5f} C:{init_close:.5f} EMA:{ema200_init:.5f} | "
                f"Confirm[-1 UNCLOSED]: H:{conf_high:.5f} L:{conf_low:.5f} C:{conf_close:.5f} EMA:{ema200_conf:.5f}"
            )
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ LONG
            long_initiator = (init_close > ema200_init and init_open < ema200_init)
            long_confirm = (conf_close > ema200_conf and conf_low > ema200_conf)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ SHORT
            short_initiator = (init_close < ema200_init and init_open > ema200_init)
            short_confirm = (conf_close < ema200_conf and conf_high < ema200_conf)
            
            direction = None
            if long_initiator and long_confirm:
                direction = 'long'
            elif short_initiator and short_confirm:
                direction = 'short'
            
            if not direction:
                return None
            
            # –†–∞—Å—á–µ—Ç SL/TP (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            entry_price = await self._get_entry_price(symbol)
            if not entry_price:
                return None
            
            if direction == 'long':
                sl = ema200_conf * 0.998  # SL –Ω–∏–∂–µ EMA200
                risk = entry_price - sl
                tp1 = entry_price + risk * self.tp1_rr
                tp2 = entry_price + risk * self.tp2_rr
            else:  # short
                sl = ema200_conf * 1.002  # SL –≤—ã—à–µ EMA200
                risk = sl - entry_price
                tp1 = entry_price - risk * self.tp1_rr
                tp2 = entry_price - risk * self.tp2_rr
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞
            signal_id = hashlib.md5(
                f"{symbol}_{direction}_{df['open_time'].iloc[conf_idx]}_{entry_price}".encode()
            ).hexdigest()
            
            logger.info(
                f"[Gluk] üü° SIGNAL: {symbol} {direction.upper()} | "
                f"Entry: {entry_price:.5f} | SL: {sl:.5f} | TP1: {tp1:.5f} | TP2: {tp2:.5f}"
            )
            
            return {
                'context_hash': signal_id,
                'symbol': symbol,
                'direction': direction,
                'pattern_type': 'gluk_body_cross',
                'timeframe': self.timeframe,
                'entry_price': float(entry_price),
                'stop_loss': float(sl),
                'take_profit_1': float(tp1),
                'take_profit_2': float(tp2),
                'confidence_score': 5.0,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π score
                'zone_id': 'gluk_ema200',
                'zone_low': float(sl),
                'zone_high': float(entry_price),
                'confluence_flags': {'legacy': True},
                'meta_data': {
                    'mode': 'LEGACY',
                    'unclosed_candle': True,
                    'confirm_close': float(conf_close),
                    'confirm_ema200': float(ema200_conf)
                }
            }
            
        except Exception as e:
            logger.error(f"[Gluk] Error analyzing {symbol}: {e}", exc_info=True)
            return None
    
    async def _get_entry_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ REST API"""
        try:
            if self.client:
                price_data = await self.client.get_mark_price(symbol)
                return float(price_data['markPrice'])
            return None
        except Exception as e:
            logger.error(f"[Gluk] Error getting entry price for {symbol}: {e}")
            return None
