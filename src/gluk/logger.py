"""
Gluk Logger - –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Legacy —Å–∏—Å—Ç–µ–º—ã

–ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç Action Price –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è!
"""
import logging
import os
from datetime import datetime
import pytz


def setup_gluk_logger():
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π logger –¥–ª—è –ì–ª—é–∫ —Å–∏—Å—Ç–µ–º—ã
    
    Returns:
        Configured logger
    """
    # –°–æ–∑–¥–∞—Ç—å logger
    logger = logging.getLogger('gluk')
    logger.setLevel(logging.INFO)
    logger.propagate = False  # –ù–ï –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ root logger
    
    # –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    logger.handlers.clear()
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs('logs', exist_ok=True)
    
    # –§–∞–π–ª –ª–æ–≥–∞ —Å timestamp
    tz = pytz.timezone('Europe/Kyiv')
    timestamp = datetime.now(tz).strftime('%Y-%m-%d_%H-%M-%S')
    log_file = f'logs/gluk_{timestamp}.log'
    
    # File handler
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    
    # Console handler
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    
    # Formatter
    formatter = logging.Formatter(
        '%(asctime)s EEST | %(levelname)-8s | gluk | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    logger.info(f"üü° Gluk Logger initialized | Log file: {log_file}")
    
    return logger


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π logger –¥–ª—è –ì–ª—é–∫
gluk_logger = setup_gluk_logger()
