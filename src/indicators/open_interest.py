import pandas as pd
from typing import Dict, Optional
from src.utils.logger import logger


class OpenInterestCalculator:
    """
    –†–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫ Open Interest –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    
    Open Interest Delta (OI Delta) - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
    - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ: –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è (–±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª)
    - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ: –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è (–º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª)
    
    DOI% (Delta OI Percentage) - –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ OI –∑–∞ –ø–µ—Ä–∏–æ–¥
    """
    
    @staticmethod
    def calculate_oi_delta(current_oi: float, previous_oi: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Open Interest
        
        Args:
            current_oi: –¢–µ–∫—É—â–∏–π Open Interest
            previous_oi: –ü—Ä–µ–¥—ã–¥—É—â–∏–π Open Interest
        
        Returns:
            Delta OI (–∏–∑–º–µ–Ω–µ–Ω–∏–µ)
        """
        return current_oi - previous_oi
    
    @staticmethod
    def calculate_doi_pct(current_oi: float, previous_oi: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Open Interest (DOI%)
        
        Args:
            current_oi: –¢–µ–∫—É—â–∏–π Open Interest
            previous_oi: –ü—Ä–µ–¥—ã–¥—É—â–∏–π Open Interest
        
        Returns:
            DOI% (–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
        """
        if previous_oi == 0:
            return 0.0
        
        delta = current_oi - previous_oi
        doi_pct = (delta / previous_oi) * 100
        
        return doi_pct
    
    @staticmethod
    def calculate_oi_metrics_from_hist(oi_hist: list, lookback: int = 5) -> Dict[str, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ OI –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            oi_hist: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å Open Interest –∏—Å—Ç–æ—Ä–∏–µ–π
                     [{'openInterest': float, 'timestamp': int}, ...]
            lookback: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Returns:
            Dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏: {'oi_delta': float, 'doi_pct': float, 'current_oi': float}
        """
        if not oi_hist or len(oi_hist) < 2:
            return {
                'oi_delta': 0.0,
                'doi_pct': 0.0,
                'current_oi': 0.0,
                'data_valid': False  # –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - fallback
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        sorted_hist = sorted(oi_hist, key=lambda x: x.get('timestamp', 0))
        
        # –¢–µ–∫—É—â–∏–π OI (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
        current_oi = float(sorted_hist[-1].get('openInterest', 0))
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π OI (lookback –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞–∑–∞–¥)
        lookback_idx = max(0, len(sorted_hist) - 1 - lookback)
        previous_oi = float(sorted_hist[lookback_idx].get('openInterest', 0))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        oi_delta = OpenInterestCalculator.calculate_oi_delta(current_oi, previous_oi)
        doi_pct = OpenInterestCalculator.calculate_doi_pct(current_oi, previous_oi)
        
        return {
            'oi_delta': oi_delta,
            'doi_pct': doi_pct,
            'current_oi': current_oi,
            'previous_oi': previous_oi,
            'data_valid': True  # –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ
        }
    
    @staticmethod
    async def fetch_and_calculate_oi(client, symbol: str, period: str = '5m', 
                                     limit: int = 30, lookback: int = 5) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å OI –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
        
        Args:
            client: BinanceClient instance
            symbol: Trading symbol (e.g., 'BTCUSDT')
            period: Period for OI history ('5m', '15m', '30m', '1h', etc.)
            limit: Number of data points to fetch
            lookback: Periods to look back for delta calculation
        
        Returns:
            Dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ OI
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é Open Interest
            oi_hist = await client.get_open_interest_hist(
                symbol=symbol,
                period=period,
                limit=limit
            )
            
            if not oi_hist:
                logger.debug(f"No OI history data for {symbol}")
                return {
                    'oi_delta': 0.0,
                    'doi_pct': 0.0,
                    'current_oi': 0.0,
                    'data_valid': False  # –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - fallback
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = OpenInterestCalculator.calculate_oi_metrics_from_hist(
                oi_hist, 
                lookback=lookback
            )
            
            # –ö–†–ò–¢–ò–ß–ù–û: INFO –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            logger.info(f"üìä {symbol} OI: Current={metrics['current_oi']:.0f}, "
                       f"Delta={metrics['oi_delta']:.0f}, DOI%={metrics['doi_pct']:.2f}%")
            
            return metrics
            
        except Exception as e:
            logger.error(f"Error fetching OI for {symbol}: {e}")
            return {
                'oi_delta': 0.0,
                'doi_pct': 0.0,
                'current_oi': 0.0,
                'data_valid': False  # –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - fallback
            }


def calculate_oi_delta(current_oi: float, previous_oi: float) -> float:
    """Standalone —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return OpenInterestCalculator.calculate_oi_delta(current_oi, previous_oi)


def calculate_doi_pct(current_oi: float, previous_oi: float) -> float:
    """Standalone —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return OpenInterestCalculator.calculate_doi_pct(current_oi, previous_oi)
