import asyncio
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from src.utils.config import config
from src.utils.logger import logger


class TelegramBot:
    def __init__(self, binance_client=None):
        self.token = config.get_secret('telegram_bot_token')
        self.chat_id = config.get_secret('telegram_chat_id')
        self.app = None
        self.bot = None
        self.startup_message_sent = False
        self.performance_tracker = None
        self.ap_performance_tracker = None  # Action Price tracker
        self.strategy_validator = None
        self.binance_client = binance_client
    
    async def start(self):
        if not self.token:
            logger.error("Telegram bot token not configured")
            return
        
        self.app = Application.builder().token(self.token).build()
        self.bot = self.app.bot
        
        self.app.add_handler(CommandHandler("start", self.cmd_start))
        self.app.add_handler(CommandHandler("help", self.cmd_help))
        self.app.add_handler(CommandHandler("status", self.cmd_status))
        self.app.add_handler(CommandHandler("strategies", self.cmd_strategies))
        self.app.add_handler(CommandHandler("latency", self.cmd_latency))
        self.app.add_handler(CommandHandler("report", self.cmd_report))
        self.app.add_handler(CommandHandler("performance", self.cmd_performance))
        self.app.add_handler(CommandHandler("stats", self.cmd_stats))
        self.app.add_handler(CommandHandler("ap_stats", self.cmd_ap_stats))
        self.app.add_handler(CommandHandler("validate", self.cmd_validate))
        
        await self.app.initialize()
        await self.app.start()
        
        # –ó–∞–ø—É—Å–∫ polling –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        if self.app.updater:
            asyncio.create_task(self.app.updater.start_polling(drop_pending_updates=True))
            logger.info("Telegram bot started with polling")
        else:
            logger.warning("Telegram updater not available - commands will not work")
    
    async def stop(self):
        if self.app:
            try:
                if self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except Exception as e:
                logger.error(f"Error stopping Telegram bot: {e}")
        logger.info("Telegram bot stopped")
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        welcome_text = (
            "ü§ñ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n"
            "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/strategies - –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            "/performance - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π)\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\n"
            "/ap_stats - Action Price —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/validate - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            "/latency - –ó–∞–¥–µ—Ä–∂–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
            "/report - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        )
        await update.message.reply_text(welcome_text, parse_mode='HTML')
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        help_text = (
            "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/status - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ä—ã–Ω–∫–æ–≤\n"
            "/strategies - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
            "/performance - Win rate, PnL –∑–∞ 7 –¥–Ω–µ–π\n"
            "/stats - –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\n"
            "/validate - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            "/latency - –ó–∞–¥–µ—Ä–∂–∫–∏ WebSocket\n"
            "/report - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        )
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        status_text = "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n–°—Ç–∞—Ç—É—Å: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        await update.message.reply_text(status_text)
    
    async def cmd_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        strategies_text = (
            "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n\n"
            "1. Donchian Breakout\n"
            "2. Squeeze ‚Üí Breakout\n"
            "3. ORB/IRB\n"
            "4. MA/VWAP Pullback\n"
            "5. Break &amp; Retest\n"
            "6. ATR Momentum\n"
            "7. VWAP Mean Reversion\n"
            "8. Range Fade\n"
            "9. Volume Profile\n"
            "10. RSI/Stoch MR\n"
            "11. Liquidity Sweep\n"
            "12. Order Flow\n"
            "13. CVD Divergence\n"
            "14. Time of Day\n"
            "15. Cash &amp; Carry\n"
            "16. Market Making\n\n"
            "üéØ <b>Action Price</b> (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)\n"
            "   ‚Ä¢ Pin-Bar, Engulfing, Inside-Bar\n"
            "   ‚Ä¢ Fakey, –ü–ü–†\n"
            "   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: /ap_stats\n"
        )
        await update.message.reply_text(strategies_text, parse_mode='HTML')
    
    async def cmd_latency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        await update.message.reply_text("‚è± Latency: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    async def cmd_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        await update.message.reply_text("üìä Report: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    async def cmd_performance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π"""
        if not update.message:
            return
        
        if not self.performance_tracker:
            await update.message.reply_text("‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            perf = await self.performance_tracker.get_strategy_performance(days=7)
            
            text = (
                f"üìä <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π)</b>\n\n"
                f"üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {perf['total_signals']}\n"
                f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ: {perf['closed_signals']}\n"
                f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {perf['active_signals']}\n\n"
                f"üèÜ –ü–æ–±–µ–¥: {perf['wins']}\n"
                f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {perf['losses']}\n"
                f"üìä Win Rate: <b>{perf['win_rate']}%</b>\n\n"
                f"üéØ TP1 (0.5R): {perf.get('tp1_count', 0)}\n"
                f"üéØ TP2 (1.5R): {perf.get('tp2_count', 0)}\n"
                f"‚öñÔ∏è Breakeven: {perf.get('breakeven_count', 0)}\n"
                f"‚è±Ô∏è Time Stop: {perf.get('time_stop_count', 0)} | "
                f"PnL: {perf.get('time_stop_total_pnl', 0):+.2f}%\n\n"
                f"üí∞ –°—Ä–µ–¥–Ω–∏–π PnL: <b>{perf['avg_pnl']:+.2f}%</b>\n"
                f"üíµ –û–±—â–∏–π PnL: <b>{perf['total_pnl']:+.2f}%</b>\n\n"
                f"üü¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–±–µ–¥–∞: {perf['avg_win']:+.2f}%\n"
                f"üî¥ –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ: {perf['avg_loss']:+.2f}%\n"
            )
            await update.message.reply_text(text, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error getting performance: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
        if not update.message:
            return
        
        if not self.performance_tracker:
            await update.message.reply_text("‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            stats = await self.performance_tracker.get_all_strategies_performance(days=7)
            
            if not stats:
                await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
                return
            
            text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º (7 –¥–Ω–µ–π):</b>\n\n"
            
            for i, s in enumerate(stats[:10], 1):
                text += (
                    f"{i}. <b>{s['strategy_name']}</b>\n"
                    f"   –°–∏–≥–Ω–∞–ª–æ–≤: {s['total_signals']} | "
                    f"WR: {s['win_rate']}% | "
                    f"PnL: {s['avg_pnl']:+.2f}%\n\n"
                )
            
            if len(stats) > 10:
                text += f"... –∏ –µ—â–µ {len(stats) - 10} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
            
            await update.message.reply_text(text, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error getting stats: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_ap_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Action Price (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ —Å /performance)"""
        if not update.message:
            return
        
        if not self.ap_performance_tracker:
            await update.message.reply_text("‚ö†Ô∏è Action Price –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è production —Ä–µ–∂–∏–º)")
            return
        
        try:
            perf = await self.ap_performance_tracker.get_performance_stats(days=7)
            
            text = (
                f"üìä <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Action Price (7 –¥–Ω–µ–π)</b>\n\n"
                f"üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {perf['total_signals']}\n"
                f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ: {perf['closed_signals']}\n"
                f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {perf['active_signals']}\n\n"
                f"üèÜ –ü–æ–±–µ–¥: {perf['wins']}\n"
                f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {perf['losses']}\n"
                f"üìä Win Rate: <b>{perf['win_rate']}%</b>\n\n"
                f"üéØ TP1 (0.5R): {perf.get('tp1_count', 0)}\n"
                f"üéØ TP2 (1.5R): {perf.get('tp2_count', 0)}\n"
                f"‚öñÔ∏è Breakeven: {perf.get('breakeven_count', 0)}\n"
                f"‚è±Ô∏è Time Stop: {perf.get('time_stop_count', 0)} | "
                f"PnL: {perf.get('time_stop_total_pnl', 0):+.2f}%\n\n"
                f"üí∞ –°—Ä–µ–¥–Ω–∏–π PnL: <b>{perf['avg_pnl']:+.2f}%</b>\n"
                f"üíµ –û–±—â–∏–π PnL: <b>{perf['total_pnl']:+.2f}%</b>\n\n"
                f"üü¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–±–µ–¥–∞: {perf['avg_win']:+.2f}%\n"
                f"üî¥ –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ: {perf['avg_loss']:+.2f}%\n"
            )
            await update.message.reply_text(text, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error getting AP stats: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_validate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        if not update.message:
            return
        
        if not self.strategy_validator:
            await update.message.reply_text("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥")
        
        try:
            # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∏–º–≤–æ–ª –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç: /validate BTCUSDT
            symbol = context.args[0] if context.args else 'BTCUSDT'
            
            results = self.strategy_validator.validate_all_strategies(symbol)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            passed = results['strategies_passed']
            failed = results['strategies_failed']
            total = results['strategies_tested']
            
            text = (
                f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ({symbol})</b>\n\n"
                f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {total}\n"
                f"‚úÖ –ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {passed}\n"
                f"‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {failed}\n\n"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            for detail in results['details']:
                if detail['status'] == 'FAIL':
                    text += f"\n‚ùå <b>{detail['strategy']}</b> ({detail['timeframe']})\n"
                    for issue in detail.get('issues', [])[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–æ–±–ª–µ–º—ã
                        text += f"   ‚Ä¢ {issue}\n"
                elif detail.get('warnings'):
                    text += f"\n‚ö° <b>{detail['strategy']}</b> ({detail['timeframe']})\n"
                    text += f"   ‚Ä¢ {detail['warnings'][0]}\n"
            
            # –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Ç–æ–ª—å–∫–æ count)
            passed_list = [d['strategy'] for d in results['details'] if d['status'] == 'PASS']
            if passed_list:
                text += f"\n‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {len(passed_list)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error validating strategies: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def set_validator(self, validator):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–º–∞–Ω–¥"""
        self.strategy_validator = validator
    
    def set_performance_tracker(self, tracker):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–º–∞–Ω–¥"""
        self.performance_tracker = tracker
    
    def set_ap_performance_tracker(self, tracker):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Action Price —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–º–∞–Ω–¥"""
        self.ap_performance_tracker = tracker
    
    async def send_startup_message(self, pairs_count: int, strategies_count: int, mode: str = "Signals-Only"):
        if not self.bot or not self.chat_id:
            logger.warning("Telegram bot not configured - skipping startup message")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if self.startup_message_sent:
            logger.debug("Startup message already sent, skipping")
            return
        
        try:
            message = (
                f"ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"üìä <b>–í —Ä–∞–±–æ—Ç–µ:</b> {pairs_count} –ø–∞—Ä\n"
                f"üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:</b> {strategies_count}\n"
                f"‚öôÔ∏è <b>–†–µ–∂–∏–º:</b> {mode}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
            )
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            self.startup_message_sent = True
            logger.info("Startup message sent to Telegram")
        except Exception as e:
            logger.error(f"Error sending startup message: {e}")
    
    async def send_data_integrity_alert(self, symbol: str, issue_type: str, details: str):
        """Send data integrity alert to Telegram
        
        Args:
            symbol: Symbol with data issues
            issue_type: Type of issue ('incomplete', 'gaps', 'corruption')
            details: Detailed description of the issue
        """
        if not self.bot or not self.chat_id:
            return
        
        try:
            emoji_map = {
                'incomplete': '‚ö†Ô∏è',
                'gaps': 'üî¥',
                'corruption': 'üí•'
            }
            emoji = emoji_map.get(issue_type, '‚ö†Ô∏è')
            
            message = (
                f"{emoji} <b>Data Integrity Alert</b>\n\n"
                f"üìä Symbol: <code>{symbol}</code>\n"
                f"üîç Issue: {issue_type}\n"
                f"üìù Details: {details}\n\n"
                f"‚ö†Ô∏è Trading on this symbol may be affected"
            )
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            logger.info(f"Data integrity alert sent for {symbol}")
        except Exception as e:
            logger.error(f"Error sending data integrity alert: {e}")
    
    async def send_signal(self, signal_data: dict):
        if not self.bot or not self.chat_id:
            return None
        
        try:
            message = self._format_signal(signal_data)
            msg = await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            return msg.message_id if msg else None
        except Exception as e:
            logger.error(f"Error sending signal: {e}")
            return None
    
    def _format_signal(self, signal_data: dict) -> str:
        direction_emoji = "üü¢" if signal_data['direction'] == 'LONG' else "üî¥"
        entry_type = signal_data.get('entry_type', 'MARKET')
        symbol = signal_data['symbol']
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è entry_type
        if 'LIMIT' in entry_type:
            entry_emoji = "‚è≥" if 'pending' in entry_type.lower() else "‚úÖ"
        elif 'FILLED' in entry_type:
            entry_emoji = "‚úÖ"
        else:
            entry_emoji = "‚ö°"
        
        message = (
            f"{direction_emoji} <b>{signal_data['strategy_name']}</b>\n\n"
            f"üìä –°–∏–º–≤–æ–ª: <code>{symbol}</code>\n"
            f"üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{signal_data['direction']}</b>\n"
            f"{entry_emoji} –¢–∏–ø –≤—Ö–æ–¥–∞: <code>{entry_type}</code>\n"
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        def format_price(price):
            if self.binance_client:
                return self.binance_client.format_price(symbol, price)
            return f"{price:.8f}".rstrip('0').rstrip('.')
        
        # –î–ª—è LIMIT pending –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        if 'pending' in entry_type.lower() and 'current_price' in signal_data:
            message += (
                f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: <code>{format_price(signal_data['entry_price'])}</code>\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{format_price(signal_data['current_price'])}</code>\n"
            )
        else:
            message += f"üí∞ –í—Ö–æ–¥: <code>{format_price(signal_data['entry_price'])}</code>\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å SL –∏ TP
        stop_loss = format_price(signal_data['stop_loss'])
        tp1 = format_price(signal_data['tp1']) if signal_data.get('tp1') else 'N/A'
        tp2 = format_price(signal_data['tp2']) if signal_data.get('tp2') else 'N/A'
        
        message += (
            f"üõë –°—Ç–æ–ø: <code>{stop_loss}</code>\n"
            f"üéØ TP1: <code>{tp1}</code>\n"
            f"üéØ TP2: <code>{tp2}</code>\n\n"
            f"‚≠êÔ∏è –°–∫–æ—Ä: <code>{signal_data['score']:.1f}</code>\n"
            f"üîÑ –†–µ–∂–∏–º: <code>{signal_data['regime']}</code>\n"
        )
        
        return message
