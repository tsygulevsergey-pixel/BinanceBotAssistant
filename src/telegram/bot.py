import asyncio
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from src.utils.config import config
from src.utils.logger import logger


class TelegramBot:
    def __init__(self):
        self.token = config.get_secret('telegram_bot_token')
        self.chat_id = config.get_secret('telegram_chat_id')
        self.app = None
        self.bot = None
        self.startup_message_sent = False
        self.performance_tracker = None
    
    async def start(self):
        if not self.token:
            logger.error("Telegram bot token not configured")
            return
        
        self.app = Application.builder().token(self.token).build()
        self.bot = self.app.bot
        
        self.app.add_handler(CommandHandler("start", self.cmd_start))
        self.app.add_handler(CommandHandler("help", self.cmd_help))
        self.app.add_handler(CommandHandler("status", self.cmd_status))
        self.app.add_handler(CommandHandler("strategies", self.cmd_strategies))
        self.app.add_handler(CommandHandler("latency", self.cmd_latency))
        self.app.add_handler(CommandHandler("report", self.cmd_report))
        self.app.add_handler(CommandHandler("performance", self.cmd_performance))
        self.app.add_handler(CommandHandler("stats", self.cmd_stats))
        
        await self.app.initialize()
        await self.app.start()
        
        # –ó–∞–ø—É—Å–∫ polling –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        if self.app.updater:
            asyncio.create_task(self.app.updater.start_polling(drop_pending_updates=True))
            logger.info("Telegram bot started with polling")
        else:
            logger.warning("Telegram updater not available - commands will not work")
    
    async def stop(self):
        if self.app:
            try:
                if self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except Exception as e:
                logger.error(f"Error stopping Telegram bot: {e}")
        logger.info("Telegram bot stopped")
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        welcome_text = (
            "ü§ñ *–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω*\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n"
            "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/strategies - –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
            "/performance - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π)\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\n"
            "/latency - –ó–∞–¥–µ—Ä–∂–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
            "/report - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
        )
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        help_text = (
            "*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/status - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ä—ã–Ω–∫–æ–≤\n"
            "/strategies - –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
            "/performance - Win rate, PnL –∑–∞ 7 –¥–Ω–µ–π\n"
            "/stats - –î–µ—Ç–∞–ª–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\n"
            "/latency - –ó–∞–¥–µ—Ä–∂–∫–∏ WebSocket\n"
            "/report - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        status_text = "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n–°—Ç–∞—Ç—É—Å: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        await update.message.reply_text(status_text)
    
    async def cmd_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        strategies_text = (
            "*–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n\n"
            "1. Donchian Breakout\n"
            "2. Squeeze‚ÜíBreakout\n"
            "3. ORB/IRB\n"
            "4. MA/VWAP Pullback\n"
            "5. Break & Retest\n"
            "6. ATR Momentum\n"
            "7. VWAP Mean Reversion\n"
            "8. Range Fade\n"
        )
        await update.message.reply_text(strategies_text, parse_mode='Markdown')
    
    async def cmd_latency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        await update.message.reply_text("‚è± Latency: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    async def cmd_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        await update.message.reply_text("üìä Report: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    async def cmd_performance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π"""
        if not update.message:
            return
        
        if not self.performance_tracker:
            await update.message.reply_text("‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            perf = await self.performance_tracker.get_strategy_performance(days=7)
            
            text = (
                f"üìä *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π)*\n\n"
                f"üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {perf['total_signals']}\n"
                f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ: {perf['closed_signals']}\n"
                f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {perf['active_signals']}\n\n"
                f"üèÜ –ü–æ–±–µ–¥: {perf['wins']}\n"
                f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {perf['losses']}\n"
                f"üìä Win Rate: *{perf['win_rate']}%*\n\n"
                f"üí∞ –°—Ä–µ–¥–Ω–∏–π PnL: *{perf['avg_pnl']:+.2f}%*\n"
                f"üíµ –û–±—â–∏–π PnL: *{perf['total_pnl']:+.2f}%*\n\n"
                f"üü¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–±–µ–¥–∞: {perf['avg_win']:+.2f}%\n"
                f"üî¥ –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ: {perf['avg_loss']:+.2f}%\n"
            )
            await update.message.reply_text(text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error getting performance: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
        if not update.message:
            return
        
        if not self.performance_tracker:
            await update.message.reply_text("‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            stats = await self.performance_tracker.get_all_strategies_performance(days=7)
            
            if not stats:
                await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
                return
            
            text = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º (7 –¥–Ω–µ–π):*\n\n"
            
            for i, s in enumerate(stats[:10], 1):
                text += (
                    f"{i}. *{s['strategy_name']}*\n"
                    f"   –°–∏–≥–Ω–∞–ª–æ–≤: {s['total_signals']} | "
                    f"WR: {s['win_rate']}% | "
                    f"PnL: {s['avg_pnl']:+.2f}%\n\n"
                )
            
            if len(stats) > 10:
                text += f"... –∏ –µ—â–µ {len(stats) - 10} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
            
            await update.message.reply_text(text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error getting stats: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def set_performance_tracker(self, tracker):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–º–∞–Ω–¥"""
        self.performance_tracker = tracker
    
    async def send_startup_message(self, pairs_count: int, strategies_count: int, mode: str = "Signals-Only"):
        if not self.bot or not self.chat_id:
            logger.warning("Telegram bot not configured - skipping startup message")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if self.startup_message_sent:
            logger.debug("Startup message already sent, skipping")
            return
        
        try:
            message = (
                f"ü§ñ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!*\n\n"
                f"üìä *–í —Ä–∞–±–æ—Ç–µ:* {pairs_count} –ø–∞—Ä\n"
                f"üéØ *–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:* {strategies_count}\n"
                f"‚öôÔ∏è *–†–µ–∂–∏–º:* {mode}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
            )
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            self.startup_message_sent = True
            logger.info("Startup message sent to Telegram")
        except Exception as e:
            logger.error(f"Error sending startup message: {e}")
    
    async def send_signal(self, signal_data: dict):
        if not self.bot or not self.chat_id:
            return None
        
        try:
            message = self._format_signal(signal_data)
            msg = await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            return msg.message_id if msg else None
        except Exception as e:
            logger.error(f"Error sending signal: {e}")
            return None
    
    def _format_signal(self, signal_data: dict) -> str:
        direction_emoji = "üü¢" if signal_data['direction'] == 'LONG' else "üî¥"
        
        message = (
            f"{direction_emoji} *{signal_data['strategy_name']}*\n\n"
            f"üìä –°–∏–º–≤–æ–ª: `{signal_data['symbol']}`\n"
            f"üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{signal_data['direction']}*\n"
            f"üí∞ –í—Ö–æ–¥: `{signal_data['entry_price']:.4f}`\n"
            f"üõë –°—Ç–æ–ø: `{signal_data['stop_loss']:.4f}`\n"
            f"üéØ TP1: `{signal_data.get('tp1', 'N/A')}`\n"
            f"üéØ TP2: `{signal_data.get('tp2', 'N/A')}`\n\n"
            f"‚≠êÔ∏è –°–∫–æ—Ä: `{signal_data['score']:.1f}`\n"
            f"üîÑ –†–µ–∂–∏–º: `{signal_data['regime']}`\n"
        )
        
        return message
