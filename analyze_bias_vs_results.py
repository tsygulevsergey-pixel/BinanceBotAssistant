#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –†–ï–ê–õ–¨–ù–´–• —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ BTC bias
–°–≤—è–∑—ã–≤–∞–µ–º JSON –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑ –ª–æ–≥–æ–≤
"""

import json
import re
from pathlib import Path
from collections import defaultdict

def load_json_signals():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∏–∑ JSON"""
    with open('attached_assets/main_strategies_export_1761073131225.json', 'r', encoding='utf-8') as f:
        signals = json.load(f)
    
    for signal in signals:
        if signal.get('meta_data') and isinstance(signal['meta_data'], str):
            try:
                signal['meta_data'] = json.loads(signal['meta_data'])
            except:
                signal['meta_data'] = {}
    
    return signals

def parse_bot_logs():
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
    log_dir = Path('attached_assets')
    log_files = sorted(log_dir.glob('bot_2025-10-*.log'), 
                      key=lambda x: x.stat().st_mtime, reverse=True)
    
    pattern = re.compile(
        r'Signal closed.*?:\s*(\w+)\s+(LONG|SHORT).*?'
        r'Entry:\s*([\d.]+).*?Exit:\s*([\d.]+).*?'
        r'PnL:\s*([+-]?[\d.]+)%.*?\(([\w_]+)\)',
        re.IGNORECASE
    )
    
    trades = []
    
    for log_file in log_files[:20]:
        try:
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            for match in pattern.finditer(content):
                symbol = match.group(1)
                direction = match.group(2)
                pnl = float(match.group(5))
                exit_type = match.group(6)
                
                trades.append({
                    'symbol': symbol,
                    'direction': direction,
                    'pnl': pnl,
                    'exit_type': exit_type
                })
        except:
            pass
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_trades = []
    seen = set()
    
    for trade in trades:
        key = f"{trade['symbol']}_{trade['direction']}_{trade['pnl']}"
        if key not in seen:
            seen.add(key)
            unique_trades.append(trade)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(unique_trades)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ –ª–æ–≥–æ–≤")
    
    return unique_trades

def match_signals_with_results(signals, trades):
    """–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–¥–µ–ª–æ–∫
    trades_index = defaultdict(list)
    for trade in trades:
        key = f"{trade['symbol']}_{trade['direction']}"
        trades_index[key].append(trade)
    
    matched = []
    
    for signal in signals:
        key = f"{signal['symbol']}_{signal['direction']}"
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–¥–µ–ª–∫—É
        if key in trades_index and len(trades_index[key]) > 0:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
            trade = trades_index[key].pop(0)
            
            meta = signal.get('meta_data') or {}
            
            matched.append({
                'symbol': signal['symbol'],
                'direction': signal['direction'],
                'score': signal['score'],
                'regime': signal['market_regime'],
                'bias': meta.get('bias', 'unknown'),
                'volume_ratio': meta.get('volume_ratio', 1.0),
                'cvd_direction': meta.get('cvd_direction', ''),
                'strategy_id': signal['strategy_id'],
                'pnl': trade['pnl'],
                'exit_type': trade['exit_type']
            })
    
    print(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(matched)} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
    
    return matched

def analyze_by_bias_and_direction(matched):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ bias –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û BTC BIAS –ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Æ")
    print("="*80)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    groups = {
        'LONG_bearish': [],
        'LONG_neutral': [],
        'LONG_bullish': [],
        'SHORT_bearish': [],
        'SHORT_neutral': [],
        'SHORT_bullish': []
    }
    
    for item in matched:
        key = f"{item['direction']}_{item['bias']}"
        if key in groups:
            groups[key].append(item)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    print(f"\n{'–ì—Ä—É–ø–ø–∞':<25} {'–°–¥–µ–ª–æ–∫':<10} {'WR%':<10} {'Avg PnL':<12} {'Total PnL':<12} {'–û—Ü–µ–Ω–∫–∞'}")
    print("-"*85)
    
    results = {}
    
    for group_name, items in groups.items():
        if not items:
            continue
        
        wins = [i for i in items if i['pnl'] > 0]
        wr = (len(wins) / len(items) * 100) if items else 0
        avg_pnl = sum(i['pnl'] for i in items) / len(items)
        total_pnl = sum(i['pnl'] for i in items)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç
        direction, bias = group_name.split('_')
        is_conflict = (direction == 'LONG' and bias == 'bearish') or \
                     (direction == 'SHORT' and bias == 'bullish')
        
        if is_conflict:
            rating = f"‚ùå –ö–û–ù–§–õ–ò–ö–¢" if avg_pnl < 0 else f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢!"
        else:
            rating = "‚úÖ –ü–û –¢–†–ï–ù–î–£" if avg_pnl > 0 else "‚ùå"
        
        results[group_name] = {
            'count': len(items),
            'wr': wr,
            'avg_pnl': avg_pnl,
            'total_pnl': total_pnl,
            'is_conflict': is_conflict
        }
        
        print(f"{group_name:<25} {len(items):<10} {wr:<10.1f} {avg_pnl:<+12.2f} {total_pnl:<+12.2f} {rating}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    print(f"\n\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ù–§–õ–ò–ö–¢–û–í")
    print("="*80)
    
    # LONG –ø—Ä–∏ bearish
    if groups['LONG_bearish']:
        items = groups['LONG_bearish']
        print(f"\n‚ùå LONG –ø—Ä–∏ BEARISH bias ({len(items)} —Å–¥–µ–ª–æ–∫):")
        
        wins = [i for i in items if i['pnl'] > 0]
        sl_exits = [i for i in items if i['exit_type'] == 'SL']
        tp2_exits = [i for i in items if i['exit_type'] == 'TP2']
        
        print(f"   Win Rate: {len(wins)/len(items)*100:.1f}%")
        print(f"   Avg PnL: {sum(i['pnl'] for i in items)/len(items):+.2f}%")
        print(f"   Total PnL: {sum(i['pnl'] for i in items):+.2f}%")
        print(f"   –í—ã—Ö–æ–¥—ã: TP2={len(tp2_exits)}, SL={len(sl_exits)}, –î—Ä—É–≥–∏–µ={len(items)-len(tp2_exits)-len(sl_exits)}")
        
        # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ
        sorted_items = sorted(items, key=lambda x: x['pnl'], reverse=True)
        print(f"\n   –¢–æ–ø-3 –ª—É—á—à–∏—Ö:")
        for i, item in enumerate(sorted_items[:3], 1):
            print(f"      {i}. {item['symbol']} {item['pnl']:+.2f}% ({item['exit_type']})")
        
        print(f"\n   –¢–æ–ø-3 —Ö—É–¥—à–∏—Ö:")
        for i, item in enumerate(sorted_items[-3:][::-1], 1):
            print(f"      {i}. {item['symbol']} {item['pnl']:+.2f}% ({item['exit_type']})")
    
    # SHORT –ø—Ä–∏ bearish (–ø–æ —Ç—Ä–µ–Ω–¥—É)
    if groups['SHORT_bearish']:
        items = groups['SHORT_bearish']
        print(f"\n\n‚úÖ SHORT –ø—Ä–∏ BEARISH bias ({len(items)} —Å–¥–µ–ª–æ–∫) - –ü–û –¢–†–ï–ù–î–£:")
        
        wins = [i for i in items if i['pnl'] > 0]
        sl_exits = [i for i in items if i['exit_type'] == 'SL']
        tp2_exits = [i for i in items if i['exit_type'] == 'TP2']
        
        print(f"   Win Rate: {len(wins)/len(items)*100:.1f}%")
        print(f"   Avg PnL: {sum(i['pnl'] for i in items)/len(items):+.2f}%")
        print(f"   Total PnL: {sum(i['pnl'] for i in items):+.2f}%")
        print(f"   –í—ã—Ö–æ–¥—ã: TP2={len(tp2_exits)}, SL={len(sl_exits)}, –î—Ä—É–≥–∏–µ={len(items)-len(tp2_exits)-len(sl_exits)}")
    
    # SHORT –ø—Ä–∏ bullish
    if groups['SHORT_bullish']:
        items = groups['SHORT_bullish']
        print(f"\n\n‚ùå SHORT –ø—Ä–∏ BULLISH bias ({len(items)} —Å–¥–µ–ª–æ–∫):")
        
        wins = [i for i in items if i['pnl'] > 0]
        sl_exits = [i for i in items if i['exit_type'] == 'SL']
        tp2_exits = [i for i in items if i['exit_type'] == 'TP2']
        
        print(f"   Win Rate: {len(wins)/len(items)*100:.1f}%")
        print(f"   Avg PnL: {sum(i['pnl'] for i in items)/len(items):+.2f}%")
        print(f"   Total PnL: {sum(i['pnl'] for i in items):+.2f}%")
        print(f"   –í—ã—Ö–æ–¥—ã: TP2={len(tp2_exits)}, SL={len(sl_exits)}, –î—Ä—É–≥–∏–µ={len(items)-len(tp2_exits)-len(sl_exits)}")
    
    # LONG –ø—Ä–∏ bullish (–ø–æ —Ç—Ä–µ–Ω–¥—É)
    if groups['LONG_bullish']:
        items = groups['LONG_bullish']
        print(f"\n\n‚úÖ LONG –ø—Ä–∏ BULLISH bias ({len(items)} —Å–¥–µ–ª–æ–∫) - –ü–û –¢–†–ï–ù–î–£:")
        
        wins = [i for i in items if i['pnl'] > 0]
        sl_exits = [i for i in items if i['exit_type'] == 'SL']
        tp2_exits = [i for i in items if i['exit_type'] == 'TP2']
        
        print(f"   Win Rate: {len(wins)/len(items)*100:.1f}%")
        print(f"   Avg PnL: {sum(i['pnl'] for i in items)/len(items):+.2f}%")
        print(f"   Total PnL: {sum(i['pnl'] for i in items):+.2f}%")
        print(f"   –í—ã—Ö–æ–¥—ã: TP2={len(tp2_exits)}, SL={len(sl_exits)}, –î—Ä—É–≥–∏–µ={len(items)-len(tp2_exits)-len(sl_exits)}")
    
    return results

def analyze_by_regime(matched):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–µ–∂–∏–º–∞–º"""
    print("\n\n" + "="*80)
    print("üåä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –†–ï–ñ–ò–ú–ê–ú")
    print("="*80)
    
    regime_groups = defaultdict(list)
    for item in matched:
        regime_groups[item['regime']].append(item)
    
    print(f"\n{'–†–µ–∂–∏–º':<20} {'–°–¥–µ–ª–æ–∫':<10} {'WR%':<10} {'Avg PnL':<12} {'Total PnL':<12} {'–û—Ü–µ–Ω–∫–∞'}")
    print("-"*80)
    
    for regime, items in sorted(regime_groups.items(), key=lambda x: len(x[1]), reverse=True):
        wins = [i for i in items if i['pnl'] > 0]
        wr = (len(wins) / len(items) * 100) if items else 0
        avg_pnl = sum(i['pnl'] for i in items) / len(items)
        total_pnl = sum(i['pnl'] for i in items)
        
        rating = "‚úÖ –û–¢–õ–ò–ß–ù–û" if wr >= 55 else "‚ö†Ô∏è –°–†–ï–î–ù–ï" if wr >= 45 else "‚ùå –ü–õ–û–•–û"
        
        print(f"{regime:<20} {len(items):<10} {wr:<10.1f} {avg_pnl:<+12.2f} {total_pnl:<+12.2f} {rating}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –≤—ã—Ö–æ–¥–∞–º
        sl_count = len([i for i in items if i['exit_type'] == 'SL'])
        tp2_count = len([i for i in items if i['exit_type'] == 'TP2'])
        
        print(f"   –í—ã—Ö–æ–¥—ã: TP2={tp2_count} ({tp2_count/len(items)*100:.1f}%), SL={sl_count} ({sl_count/len(items)*100:.1f}%)")

def compare_conflicts_vs_aligned(matched):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö vs –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
    print("\n\n" + "="*80)
    print("‚öñÔ∏è –ö–û–ù–§–õ–ò–ö–¢–´ vs –í–´–†–û–í–ù–ï–ù–ù–´–ï –°–î–ï–õ–ö–ò")
    print("="*80)
    
    conflicts = []
    aligned = []
    
    for item in matched:
        is_conflict = (item['direction'] == 'LONG' and item['bias'] == 'bearish') or \
                     (item['direction'] == 'SHORT' and item['bias'] == 'bullish')
        
        if is_conflict:
            conflicts.append(item)
        elif item['bias'] in ['bullish', 'bearish']:  # –¢–æ–ª—å–∫–æ —á–µ—Ç–∫–∏–π bias
            aligned.append(item)
    
    print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
    print(f"\n{'–¢–∏–ø':<30} {'–°–¥–µ–ª–æ–∫':<10} {'WR%':<10} {'Avg PnL':<12} {'Total PnL':<12}")
    print("-"*75)
    
    # –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if conflicts:
        wins = [i for i in conflicts if i['pnl'] > 0]
        wr = (len(wins) / len(conflicts) * 100)
        avg_pnl = sum(i['pnl'] for i in conflicts) / len(conflicts)
        total_pnl = sum(i['pnl'] for i in conflicts)
        
        print(f"{'‚ùå –ö–û–ù–§–õ–ò–ö–¢–´ (–ø—Ä–æ—Ç–∏–≤ BTC)':<30} {len(conflicts):<10} {wr:<10.1f} {avg_pnl:<+12.2f} {total_pnl:+.2f}%")
        
        sl_rate = len([i for i in conflicts if i['exit_type'] == 'SL']) / len(conflicts) * 100
        print(f"   SL rate: {sl_rate:.1f}%")
    
    # –í—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–µ
    if aligned:
        wins = [i for i in aligned if i['pnl'] > 0]
        wr = (len(wins) / len(aligned) * 100)
        avg_pnl = sum(i['pnl'] for i in aligned) / len(aligned)
        total_pnl = sum(i['pnl'] for i in aligned)
        
        print(f"{'‚úÖ –í–´–†–û–í–ù–ï–ù–ù–´–ï (—Å BTC)':<30} {len(aligned):<10} {wr:<10.1f} {avg_pnl:<+12.2f} {total_pnl:+.2f}%")
        
        sl_rate = len([i for i in aligned if i['exit_type'] == 'SL']) / len(aligned) * 100
        print(f"   SL rate: {sl_rate:.1f}%")
    
    # –†–∞–∑–Ω–∏—Ü–∞
    if conflicts and aligned:
        wr_diff = (len([i for i in aligned if i['pnl'] > 0]) / len(aligned) * 100) - \
                  (len([i for i in conflicts if i['pnl'] > 0]) / len(conflicts) * 100)
        
        avg_pnl_diff = (sum(i['pnl'] for i in aligned) / len(aligned)) - \
                       (sum(i['pnl'] for i in conflicts) / len(conflicts))
        
        print(f"\nüìà –†–∞–∑–Ω–∏—Ü–∞ (–í—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–µ - –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã):")
        print(f"   Win Rate: {wr_diff:+.1f}%")
        print(f"   Avg PnL: {avg_pnl_diff:+.2f}%")

def main():
    print("\n" + "="*80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û BTC BIAS")
    print("="*80)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    signals = load_json_signals()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ JSON")
    
    trades = parse_bot_logs()
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    print("\nüîó –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏...")
    matched = match_signals_with_results(signals, trades)
    
    if not matched:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return
    
    # –ê–Ω–∞–ª–∏–∑—ã
    analyze_by_bias_and_direction(matched)
    analyze_by_regime(matched)
    compare_conflicts_vs_aligned(matched)
    
    print("\n" + "="*80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("="*80 + "\n")

if __name__ == "__main__":
    main()
