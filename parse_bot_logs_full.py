#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ bot_*.log —Ñ–∞–π–ª–æ–≤
"""

import re
from pathlib import Path
from collections import defaultdict
from datetime import datetime

class BotLogParser:
    def __init__(self, log_dir='attached_assets'):
        self.log_dir = Path(log_dir)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.patterns = {
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫
            'signal_closed': re.compile(
                r'Signal closed.*?:\s*(\w+)\s+(LONG|SHORT).*?'
                r'Entry:\s*([\d.]+).*?Exit:\s*([\d.]+).*?'
                r'PnL:\s*([+-]?[\d.]+)%.*?\(([\w_]+)\)',
                re.IGNORECASE
            ),
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è breakeven/TP1
            'breakeven': re.compile(
                r'Signal closed.*?:\s*(\w+)\s+(LONG|SHORT).*?'
                r'Breakeven.*?\(\+?([\d.]+)%\)',
                re.IGNORECASE
            ),
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è SL/TP2
            'sl_tp': re.compile(
                r'Signal closed.*?:\s*(\w+)\s+(LONG|SHORT).*?'
                r'(SL|TP\d)\s*\(([+-]?[\d.]+)%\)',
                re.IGNORECASE
            ),
        }
    
    def parse_all_logs(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö bot_*.log —Ñ–∞–π–ª–æ–≤"""
        log_files = sorted(self.log_dir.glob('bot_2025-10-*.log'), 
                          key=lambda x: x.stat().st_mtime, reverse=True)
        
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(log_files)} –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞")
        
        all_trades = []
        
        for log_file in log_files[:20]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ñ–∞–π–ª–æ–≤
            print(f"   –ü–∞—Ä—Å–∏–Ω–≥: {log_file.name} ({log_file.stat().st_size / 1024:.1f} KB)")
            
            try:
                with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                for match in self.patterns['signal_closed'].finditer(content):
                    symbol = match.group(1)
                    direction = match.group(2)
                    entry = float(match.group(3))
                    exit_price = float(match.group(4))
                    pnl = float(match.group(5))
                    exit_type = match.group(6)
                    
                    trade = {
                        'symbol': symbol,
                        'direction': direction,
                        'entry': entry,
                        'exit': exit_price,
                        'pnl': pnl,
                        'exit_type': exit_type,
                        'log_file': log_file.name
                    }
                    
                    all_trades.append(trade)
                
                # –ü–∞—Ä—Å–∏–Ω–≥ breakeven —Ñ–æ—Ä–º–∞—Ç–∞
                for match in self.patterns['breakeven'].finditer(content):
                    symbol = match.group(1)
                    direction = match.group(2)
                    pnl = float(match.group(3))
                    
                    trade = {
                        'symbol': symbol,
                        'direction': direction,
                        'entry': 0,
                        'exit': 0,
                        'pnl': pnl,
                        'exit_type': 'BREAKEVEN',
                        'log_file': log_file.name
                    }
                    
                    all_trades.append(trade)
                
                # –ü–∞—Ä—Å–∏–Ω–≥ SL/TP —Ñ–æ—Ä–º–∞—Ç–∞
                for match in self.patterns['sl_tp'].finditer(content):
                    symbol = match.group(1)
                    direction = match.group(2)
                    exit_type = match.group(3)
                    pnl = float(match.group(4))
                    
                    trade = {
                        'symbol': symbol,
                        'direction': direction,
                        'entry': 0,
                        'exit': 0,
                        'pnl': pnl,
                        'exit_type': exit_type,
                        'log_file': log_file.name
                    }
                    
                    all_trades.append(trade)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_trades = []
        seen = set()
        
        for trade in all_trades:
            key = f"{trade['symbol']}_{trade['direction']}_{trade['pnl']}"
            if key not in seen:
                seen.add(key)
                unique_trades.append(trade)
        
        print(f"\n‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(all_trades)}")
        print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(unique_trades)}")
        
        return unique_trades
    
    def analyze_trades(self, trades):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫"""
        if not trades:
            print("\n‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
            return
        
        wins = [t for t in trades if t['pnl'] > 0]
        losses = [t for t in trades if t['pnl'] <= 0]
        
        total_pnl = sum(t['pnl'] for t in trades)
        win_rate = (len(wins) / len(trades) * 100) if trades else 0
        
        print(f"\n" + "="*80)
        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"="*80)
        
        print(f"\n–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
        print(f"–ü–æ–±–µ–¥: {len(wins)} ({win_rate:.1f}%)")
        print(f"–£–±—ã—Ç–∫–æ–≤: {len(losses)} ({100-win_rate:.1f}%)")
        print(f"–°—É–º–º–∞—Ä–Ω—ã–π PnL: {total_pnl:+.2f}%")
        print(f"–°—Ä–µ–¥–Ω–∏–π PnL: {total_pnl/len(trades):+.2f}%")
        
        if wins:
            avg_win = sum(t['pnl'] for t in wins) / len(wins)
            max_win = max(t['pnl'] for t in wins)
            print(f"–°—Ä–µ–¥–Ω—è—è –ø–æ–±–µ–¥–∞: {avg_win:+.2f}%")
            print(f"–õ—É—á—à–∞—è –ø–æ–±–µ–¥–∞: {max_win:+.2f}%")
        
        if losses:
            avg_loss = sum(t['pnl'] for t in losses) / len(losses)
            max_loss = min(t['pnl'] for t in losses)
            print(f"–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:+.2f}%")
            print(f"–•—É–¥—à–∏–π —É–±—ã—Ç–æ–∫: {max_loss:+.2f}%")
        
        if wins and losses:
            profit_factor = abs(sum(t['pnl'] for t in wins) / sum(t['pnl'] for t in losses))
            print(f"Profit Factor: {profit_factor:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        print(f"\n\nüéØ –ê–ù–ê–õ–ò–ó –ü–û –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø–ú")
        print(f"="*80)
        
        for direction in ['LONG', 'SHORT']:
            dir_trades = [t for t in trades if t['direction'] == direction]
            if not dir_trades:
                continue
            
            dir_wins = [t for t in dir_trades if t['pnl'] > 0]
            dir_pnl = sum(t['pnl'] for t in dir_trades)
            dir_wr = (len(dir_wins) / len(dir_trades) * 100) if dir_trades else 0
            
            print(f"\n{direction}:")
            print(f"   –°–¥–µ–ª–æ–∫: {len(dir_trades)}")
            print(f"   –ü–æ–±–µ–¥: {len(dir_wins)} ({dir_wr:.1f}%)")
            print(f"   –°—É–º–º–∞—Ä–Ω—ã–π PnL: {dir_pnl:+.2f}%")
            print(f"   –°—Ä–µ–¥–Ω–∏–π PnL: {dir_pnl/len(dir_trades):+.2f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–∞
        print(f"\n\nüö™ –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –í–´–•–û–î–ê")
        print(f"="*80)
        
        exit_groups = defaultdict(list)
        for trade in trades:
            exit_groups[trade['exit_type']].append(trade)
        
        print(f"\n{'–¢–∏–ø –≤—ã—Ö–æ–¥–∞':<20} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<15} {'WR%':<10} {'Avg PnL%':<12} {'Total PnL%'}")
        print(f"-"*80)
        
        for exit_type, exit_trades in sorted(exit_groups.items(), 
                                            key=lambda x: sum(t['pnl'] for t in x[1]), 
                                            reverse=True):
            exit_wins = [t for t in exit_trades if t['pnl'] > 0]
            exit_wr = (len(exit_wins) / len(exit_trades) * 100) if exit_trades else 0
            exit_pnl = sum(t['pnl'] for t in exit_trades)
            avg_pnl = exit_pnl / len(exit_trades)
            
            rating = "‚úÖ" if avg_pnl > 0 else "‚ùå"
            
            print(f"{exit_type:<20} {len(exit_trades):<15} {exit_wr:<10.1f} {avg_pnl:<+12.2f} {exit_pnl:+.2f}% {rating}")
        
        # –¢–æ–ø-10 –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö
        print(f"\n\nüèÜ –¢–û–ü-10 –õ–£–ß–®–ò–• –°–î–ï–õ–û–ö")
        print(f"="*80)
        
        sorted_trades = sorted(trades, key=lambda x: x['pnl'], reverse=True)
        
        for i, trade in enumerate(sorted_trades[:10], 1):
            print(f"{i}. {trade['symbol']} {trade['direction']} ‚Üí {trade['pnl']:+.2f}% ({trade['exit_type']})")
        
        print(f"\n\nüí• –¢–û–ü-10 –•–£–î–®–ò–• –°–î–ï–õ–û–ö")
        print(f"="*80)
        
        for i, trade in enumerate(sorted_trades[-10:][::-1], 1):
            print(f"{i}. {trade['symbol']} {trade['direction']} ‚Üí {trade['pnl']:+.2f}% ({trade['exit_type']})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        print(f"\n\nüí∞ –¢–û–ü-10 –°–ê–ú–´–• –ü–†–ò–ë–´–õ–¨–ù–´–• –°–ò–ú–í–û–õ–û–í")
        print(f"="*80)
        
        symbol_groups = defaultdict(list)
        for trade in trades:
            symbol_groups[trade['symbol']].append(trade)
        
        symbol_pnls = {}
        for symbol, sym_trades in symbol_groups.items():
            symbol_pnls[symbol] = sum(t['pnl'] for t in sym_trades)
        
        top_symbols = sorted(symbol_pnls.items(), key=lambda x: x[1], reverse=True)[:10]
        
        for i, (symbol, pnl) in enumerate(top_symbols, 1):
            count = len(symbol_groups[symbol])
            avg = pnl / count
            print(f"{i}. {symbol}: {pnl:+.2f}% (—Å–¥–µ–ª–æ–∫: {count}, avg: {avg:+.2f}%)")
        
        print(f"\n\nüìâ –¢–û–ü-10 –°–ê–ú–´–• –£–ë–´–¢–û–ß–ù–´–• –°–ò–ú–í–û–õ–û–í")
        print(f"="*80)
        
        worst_symbols = sorted(symbol_pnls.items(), key=lambda x: x[1])[:10]
        
        for i, (symbol, pnl) in enumerate(worst_symbols, 1):
            count = len(symbol_groups[symbol])
            avg = pnl / count
            print(f"{i}. {symbol}: {pnl:+.2f}% (—Å–¥–µ–ª–æ–∫: {count}, avg: {avg:+.2f}%)")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"="*80)
        
        # –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥/—É–±—ã—Ç–∫–æ–≤
        max_win_streak = 0
        max_loss_streak = 0
        current_win_streak = 0
        current_loss_streak = 0
        
        for trade in trades:
            if trade['pnl'] > 0:
                current_win_streak += 1
                current_loss_streak = 0
                max_win_streak = max(max_win_streak, current_win_streak)
            else:
                current_loss_streak += 1
                current_win_streak = 0
                max_loss_streak = max(max_loss_streak, current_loss_streak)
        
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {max_win_streak}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è —É–±—ã—Ç–∫–æ–≤: {max_loss_streak}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL
        pnl_ranges = {
            '> +2.0%': len([t for t in trades if t['pnl'] > 2.0]),
            '+1.0% to +2.0%': len([t for t in trades if 1.0 <= t['pnl'] <= 2.0]),
            '+0.0% to +1.0%': len([t for t in trades if 0.0 < t['pnl'] < 1.0]),
            '0.0%': len([t for t in trades if t['pnl'] == 0.0]),
            '-1.0% to -0.0%': len([t for t in trades if -1.0 < t['pnl'] <= 0.0]),
            '-2.0% to -1.0%': len([t for t in trades if -2.0 <= t['pnl'] <= -1.0]),
            '< -2.0%': len([t for t in trades if t['pnl'] < -2.0]),
        }
        
        print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PnL:")
        for range_name, count in pnl_ranges.items():
            percentage = (count / len(trades) * 100) if trades else 0
            print(f"   {range_name:<20} {count:<10} ({percentage:.1f}%)")
        
        print(f"\n" + "="*80)
        print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print(f"="*80 + "\n")


if __name__ == "__main__":
    parser = BotLogParser()
    
    print("\n" + "="*80)
    print("üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô –ò–ó –õ–û–ì–û–í –ë–û–¢–ê")
    print("="*80)
    
    trades = parser.parse_all_logs()
    parser.analyze_trades(trades)
